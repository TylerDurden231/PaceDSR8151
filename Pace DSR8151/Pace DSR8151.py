# Test name = Software Upgrade
# Test description = Set environment, perform software upgrade and check STB after sw upgrade

from datetime import datetime
import time
import device
import TEST_CREATION_API
import os.path
import sys
import shutil

try:    
    if ((os.path.exists(os.path.join(os.path.dirname(sys.executable), "Lib\NOS_API.py")) == False) or (str(os.path.getmtime('\\\\rt-rk01\\RT-Executor\\API\\NOS_API.py')) != str(os.path.getmtime(os.path.join(os.path.dirname(sys.executable), "Lib\NOS_API.py"))))):
        shutil.copy2('\\\\rt-rk01\\RT-Executor\\API\\NOS_API.py', os.path.join(os.path.dirname(sys.executable), "Lib\NOS_API.py"))
except:
    pass

import NOS_API
    
try:
    # Get model
    model_type = NOS_API.get_model()

    # Check if folder with thresholds exists, if not create it
    if(os.path.exists(os.path.join(os.path.dirname(sys.executable), "Thresholds")) == False):
        os.makedirs(os.path.join(os.path.dirname(sys.executable), "Thresholds"))

    # Copy file with threshold if does not exists or if it is updated
    if ((os.path.exists(os.path.join(os.path.dirname(sys.executable), "Thresholds\\" + model_type + ".txt")) == False) or (str(os.path.getmtime(NOS_API.THRESHOLDS_PATH + model_type + ".txt")) != str(os.path.getmtime(os.path.join(os.path.dirname(sys.executable), "Thresholds\\" + model_type + ".txt"))))):
        shutil.copy2(NOS_API.THRESHOLDS_PATH + model_type + ".txt", os.path.join(os.path.dirname(sys.executable), "Thresholds\\" + model_type + ".txt"))
except Exception as error_message:
    pass
  

## Number of alphanumeric characters in SN
SN_LENGTH = 16  

## Number of alphanumeric characters in Cas_Id
CASID_LENGTH = 12

## Dialog stays forever until operator press some buttons on dialog
DIALOG_STAYS_FOREVER = 0

##Time to to performe SW upgrade (in seconds)
BOOT_TIME = 80

## Max record audio time in miliseconds
MAX_RECORD_AUDIO_TIME = 2000

## Max record video time in miliseconds
MAX_RECORD_VIDEO_TIME = 3000

## Constant multiplier used for conversion from seconds to milliseconds
MS_MULTIPLIER = 1000

## Wait to Autodiag app appears
WAIT_AUTODIAG_START = 35

## Wait first test in autodiag appears
WAIT_FIRST_AUTODIAG_TEST = 20

## Number of attempts to open Autodiag app
ATTEMPT_OPEN_AUTODIAG = 3

##Set correct grabber for this TestSlot
NOS_API.grabber_type()

##Set correct grabber for this TestSlot
TEST_CREATION_API.grabber_type()

def runTest():
    System_Failure = 0

    while(System_Failure < 2):
        Repeat = 0
        Navigation = 0
        Resolution = 0
        Audio_Issue = 0
        IR_Issue = 0
        Upgrade_First_Test = 0
        try:
            while(Repeat < 2):  
                BreakWhile = False
                if (Repeat == 1):
                    if(NOS_API.test_cases_results_info.DidUpgrade == 1):
                        Upgrade_First_Test = 1
                    ## Return DUT to initial state and de-initialize grabber device
                    NOS_API.deinitialize()
                    TEST_CREATION_API.write_log_to_file("#################################################################____________________ Second Test ____________________################################################################")
                
                ## Set test result default to FAIL
                test_result = "FAIL"
                
                error_codes = ""
                error_messages = ""
                
                NOS_API.read_thresholds()
        
                NOS_API.reset_test_cases_results_info()
                
                SN_LABEL = False
                CASID_LABEL = False
                
                Software_Upgrade_TestCase = False
        
                Input_Signal_TestCase = False
        
                STB_Info_TestCase = False
                
                try:
                    ## Read STB Labels using barcode reader (S/N, CAS ID) and LOG it             
                    all_scanned_barcodes = NOS_API.get_all_scanned_barcodes()
                    NOS_API.test_cases_results_info.s_n_using_barcode = all_scanned_barcodes[1]
                    NOS_API.test_cases_results_info.cas_id_using_barcode = all_scanned_barcodes[2]
                    NOS_API.test_cases_results_info.nos_sap_number = all_scanned_barcodes[0]
                except Exception as error:
                    TEST_CREATION_API.write_log_to_file(error)
                    test_result = "FAIL"
                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.scan_error_code \
                                                    + "; Error message: " + NOS_API.test_cases_results_info.scan_error_message)
                    NOS_API.set_error_message("Leitura de Etiquetas")
                    error_codes = NOS_API.test_cases_results_info.scan_error_code
                    error_messages = NOS_API.test_cases_results_info.scan_error_message
                    
                    NOS_API.add_test_case_result_to_file_report(
                                test_result,
                                "- - - - - - - - - - - - - - - - - - - -",
                                "- - - - - - - - - - - - - - - - - - - -",
                                error_codes,
                                error_messages)
                
                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    report_file = ""    
                    if (test_result != "PASS"):
                        report_file = NOS_API.create_test_case_log_file(
                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                        NOS_API.test_cases_results_info.nos_sap_number,
                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                        "",
                                        end_time)
                        NOS_API.upload_file_report(report_file) 
                        NOS_API.test_cases_results_info.isTestOK = False
                        
                        NOS_API.send_report_over_mqtt_test_plan(
                            test_result,
                            end_time,
                            error_codes,
                            report_file)
                
                    ## Update test result
                    TEST_CREATION_API.update_test_result(test_result)
        
                    return
                    
                test_number = NOS_API.get_test_number(NOS_API.test_cases_results_info.s_n_using_barcode)
                device.updateUITestSlotInfo("Teste N\xb0: " + str(int(test_number)+1))
                
                if ((len(NOS_API.test_cases_results_info.s_n_using_barcode) == SN_LENGTH) and (NOS_API.test_cases_results_info.s_n_using_barcode.isalnum() or NOS_API.test_cases_results_info.s_n_using_barcode.isdigit())):
                    SN_LABEL = True
                
                if ((len(NOS_API.test_cases_results_info.cas_id_using_barcode) == CASID_LENGTH) and (NOS_API.test_cases_results_info.cas_id_using_barcode.isalnum() or NOS_API.test_cases_results_info.cas_id_using_barcode.isdigit())):
                    CASID_LABEL = True
                
                if not(SN_LABEL and CASID_LABEL): 
                    TEST_CREATION_API.write_log_to_file("Labels Scaning")
                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.scan_error_code \
                                                + "; Error message: " + NOS_API.test_cases_results_info.scan_error_message)
                    NOS_API.set_error_message("Leitura de Etiquetas")
                    error_codes = NOS_API.test_cases_results_info.scan_error_code
                    error_messages = NOS_API.test_cases_results_info.scan_error_message
                    
                    NOS_API.add_test_case_result_to_file_report(
                                test_result,
                                "- - - - - - - - - - - - - - - - - - - -",
                                "- - - - - - - - - - - - - - - - - - - -",
                                error_codes,
                                error_messages)
        
                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                    report_file = NOS_API.create_test_case_log_file(
                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                    NOS_API.test_cases_results_info.nos_sap_number,
                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                    "",
                                    end_time)
                
                    NOS_API.upload_file_report(report_file)
                    NOS_API.test_cases_results_info.isTestOK = False
                                            
                    NOS_API.send_report_over_mqtt_test_plan(
                            test_result,
                            end_time,
                            error_codes,
                            report_file)
                            
                    ## Update test result
                    TEST_CREATION_API.update_test_result(test_result)
                    
                    ## Return DUT to initial state and de-initialize grabber device
                    NOS_API.deinitialize()
                    
                    return 
                
                if(Upgrade_First_Test == 1):
                    NOS_API.test_cases_results_info.DidUpgrade = 1
            ##############################################################################################################################################################################################################################    
            ###########################################################################################Software Upgrade###################################################################################################################    
            ##############################################################################################################################################################################################################################
                TEST_CREATION_API.write_log_to_file("####Software Upgrade####")
            
                ## Set test result default to FAIL
                test_result = "FAIL"
                
                logistic_serial_number = "-"
                firmware_version = "-"
                nagra_guide_version = "-"
                Signal_Power = "-"
                Signal_Qual = "-"
                cas_id_number = "-"
                sc_number = "-"
                signal_strength_ver = "-"
                ber_ver = "-"
                signal_strength_hor = "-"
                ber_hor = "-"
                SIGNAL_STRENGTH_THRESHOLD_LOW = NOS_API.SIGNAL_STRENGTH_THRESHOLD_LOW_DSR_8151
                SIGNAL_STRENGTH_THRESHOLD_HIGH = NOS_API.SIGNAL_STRENGTH_THRESHOLD_HIGH_DSR_8151
                BER_THRESHOLD = NOS_API.BER_THRESHOLD_DSR_8151
                
                error_codes = ""
                error_messages = ""
                
                if (NOS_API.configure_power_switch_by_inspection()):
                    if not(NOS_API.power_off()): 
                        TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        NOS_API.set_error_message("Inspection")
                        
                        NOS_API.add_test_case_result_to_file_report(
                                        test_result,
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        error_codes,
                                        error_messages)
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                        report_file = ""
                        if (test_result != "PASS"):
                            report_file = NOS_API.create_test_case_log_file(
                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                            NOS_API.test_cases_results_info.nos_sap_number,
                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                            "",
                                            end_time)
                            NOS_API.upload_file_report(report_file)
                            NOS_API.test_cases_results_info.isTestOK = False
                            
                            NOS_API.send_report_over_mqtt_test_plan(
                                    test_result,
                                    end_time,
                                    error_codes,
                                    report_file)                
                    
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
    
                        return
                    time.sleep(1)
                else:
                    TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                    
                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                    NOS_API.set_error_message("Inspection")
                    ## Return DUT to initial state and de-initialize grabber device
                    NOS_API.deinitialize()
                    
                    NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    report_file = ""
                    if (test_result != "PASS"):
                        report_file = NOS_API.create_test_case_log_file(
                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                        NOS_API.test_cases_results_info.nos_sap_number,
                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                        "",
                                        end_time)
                        NOS_API.upload_file_report(report_file)
                        NOS_API.test_cases_results_info.isTestOK = False
                    
                    
                    ## Update test result
                    TEST_CREATION_API.update_test_result(test_result)
                    
                    NOS_API.send_report_over_mqtt_test_plan(
                        test_result,
                        end_time,
                        error_codes,
                        report_file)
    
                    return
                ## Power on STB with energenie
                if (NOS_API.configure_power_switch_by_inspection()):
                    if not(NOS_API.power_on()):
                        TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        NOS_API.set_error_message("Inspection")
                        
                        NOS_API.add_test_case_result_to_file_report(
                                        test_result,
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        error_codes,
                                        error_messages)
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')    
                        report_file = ""
                        if (test_result != "PASS"):
                            report_file = NOS_API.create_test_case_log_file(
                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                            NOS_API.test_cases_results_info.nos_sap_number,
                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                            "",
                                            end_time)
                            NOS_API.upload_file_report(report_file)
                            NOS_API.test_cases_results_info.isTestOK = False
    
                    
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        
                        NOS_API.send_report_over_mqtt_test_plan(
                                test_result,
                                end_time,
                                error_codes,
                                report_file)
    
                        return
                    time.sleep(1)
                else:
                    TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                    ## Update test result
                    TEST_CREATION_API.update_test_result("FAIL")
                    
                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                    NOS_API.set_error_message("Inspection")
                    ## Return DUT to initial state and de-initialize grabber device
                    NOS_API.deinitialize()
                    
                    NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')    
                    
                    report_file = NOS_API.create_test_case_log_file(
                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                    NOS_API.test_cases_results_info.nos_sap_number,
                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                    "",
                                    end_time)
                    NOS_API.upload_file_report(report_file)
                    NOS_API.test_cases_results_info.isTestOK = False
    
                    NOS_API.send_report_over_mqtt_test_plan(
                        test_result,
                        end_time,
                        error_codes,
                        report_file)
    
                    return
                counter = 0
                delta_time = 0
                result = 0
                if(Repeat == 0 and System_Failure == 0):
                    if not(NOS_API.display_new_dialog("Conectores?", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                        TEST_CREATION_API.write_log_to_file("Conectores NOK")
                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.conector_nok_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.conector_nok_error_message) 
                        error_codes = NOS_API.test_cases_results_info.conector_nok_error_code
                        error_messages = NOS_API.test_cases_results_info.conector_nok_error_message 
                        NOS_API.set_error_message("Danos Externos")
                        
                        NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                        report_file = NOS_API.create_test_case_log_file(
                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                        NOS_API.test_cases_results_info.nos_sap_number,
                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                        "",
                                        end_time)
                    
                        NOS_API.upload_file_report(report_file)
                        NOS_API.test_cases_results_info.isTestOK = False
                                                
                        NOS_API.send_report_over_mqtt_test_plan(
                                test_result,
                                end_time,
                                error_codes,
                                report_file)
                                
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        
                        return 
                    if not(NOS_API.display_new_dialog("Chassis?", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):    
                        TEST_CREATION_API.write_log_to_file("Chassis NOK")
                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.chassis_nok_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.chassis_nok_error_message) 
                        error_codes = NOS_API.test_cases_results_info.chassis_nok_error_code
                        error_messages = NOS_API.test_cases_results_info.chassis_nok_error_message 
                        NOS_API.set_error_message("Danos Externos")
                        
                        NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                        report_file = NOS_API.create_test_case_log_file(
                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                        NOS_API.test_cases_results_info.nos_sap_number,
                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                        "",
                                        end_time)
                    
                        NOS_API.upload_file_report(report_file)
                        NOS_API.test_cases_results_info.isTestOK = False
                                                
                        NOS_API.send_report_over_mqtt_test_plan(
                                test_result,
                                end_time,
                                error_codes,
                                report_file)
                                
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        
                        return                
                    if not(NOS_API.display_new_dialog("Inserir SmartCard! A STB est\xe1 ligada?", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"): 
                        TEST_CREATION_API.write_log_to_file("No Power")
                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_power_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.no_power_error_message)
                        NOS_API.set_error_message("Não Liga")
                        error_codes = NOS_API.test_cases_results_info.no_power_error_code
                        error_messages = NOS_API.test_cases_results_info.no_power_error_message
                        NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                        report_file = NOS_API.create_test_case_log_file(
                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                        NOS_API.test_cases_results_info.nos_sap_number,
                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                        "",
                                        end_time)
                    
                        NOS_API.upload_file_report(report_file)
                        NOS_API.test_cases_results_info.isTestOK = False
                                                
                        NOS_API.send_report_over_mqtt_test_plan(
                                test_result,
                                end_time,
                                error_codes,
                                report_file)
                                
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        
                        return 
                    if not(NOS_API.display_new_dialog("SmartCard OK?", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"): 
                        TEST_CREATION_API.write_log_to_file("Smart card is not detected")
                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.sc_not_detected_error_code \
                                        + "; Error message: " + NOS_API.test_cases_results_info.sc_not_detected_error_message)
                        NOS_API.set_error_message("SmartCard")
                        error_codes = NOS_API.test_cases_results_info.sc_not_detected_error_code
                        error_messages = NOS_API.test_cases_results_info.sc_not_detected_error_message
                        NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                        report_file = NOS_API.create_test_case_log_file(
                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                        NOS_API.test_cases_results_info.nos_sap_number,
                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                        "",
                                        end_time)
                    
                        NOS_API.upload_file_report(report_file)
                        NOS_API.test_cases_results_info.isTestOK = False
                                                
                        NOS_API.send_report_over_mqtt_test_plan(
                                test_result,
                                end_time,
                                error_codes,
                                report_file)
                                
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        
                        return 
               
                NOS_API.grabber_hour_reboot()
                
                ## Initialize grabber device
                NOS_API.initialize_grabber()
                ## Start grabber device with video on default video source                                                                                      
                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)  
                
                ## Check if have image on HDMI after sw upgrade
                start_time = time.localtime()                            
                while(delta_time < BOOT_TIME):
                    if (NOS_API.is_signal_present_on_video_source()):
                        time.sleep(3)
                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                        TEST_CREATION_API.write_log_to_file("video_height: "  + str(video_height))
                        TEST_CREATION_API.write_log_to_file("counter: "  + str(counter))
                        if (video_height != "576" and video_height != "720" and video_height != "1080"):
                            time.sleep(40)
                            delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                            continue
                        if (video_height == "720" and counter < 4):
                            if(NOS_API.grab_picture("boot_up_stage_hdmi")):
                                video_result = NOS_API.mask_and_compare_pictures("installation_boot_up_ref", "boot_up_stage_hdmi", "File-MASK")
                                video_result_0 = NOS_API.mask_and_compare_pictures("installation_boot_up_Eng_ref", "boot_up_stage_hdmi", "File-MASK_Eng")  
                                video_result_1 = NOS_API.compare_pictures("No_Upgrade", "boot_up_stage_hdmi")
                                video_result_2 = NOS_API.compare_pictures("No_Upgrade_1", "boot_up_stage_hdmi")
                                if(video_result >= NOS_API.thres or video_result_0 >= NOS_API.thres):
                                    NOS_API.test_cases_results_info.channel_boot_up_state = False
                                    Software_Upgrade_TestCase = True
                                    delta_time = 601
                                elif(video_result_1 >= NOS_API.thres or video_result_2 >= NOS_API.thres):
                                    NOS_API.test_cases_results_info.channel_boot_up_state = False
                                    NOS_API.test_cases_results_info.inst_act_state = True
                                    Software_Upgrade_TestCase = True
                                    delta_time = 601   
                                else: 
                                    time.sleep(2)
                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                        video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                        if (video_result >= NOS_API.thres):
                                            while(result == 0):
                                                time.sleep(2)
                                                result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                                if(video_result >= NOS_API.thres):
                                                    time.sleep(60)  
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                                    TEST_CREATION_API.send_ir_rc_command("[UP]")
                                    if(NOS_API.grab_picture("Channel")):
                                        video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel");
                                        if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            video_result_1 = NOS_API.mask_and_compare_pictures("Banner_720_ref", "Channel", "Banner_720_MASK")
                                            video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_720_ref", "Channel", "Banner_720_MASK")
                                            video_result_3 = NOS_API.mask_and_compare_pictures("Banner_720_ref_1", "Channel", "Banner_720_MASK")
                                            if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                delta_time = 601                                      
                                            else:
                                                counter = counter + 1
                                                time.sleep(1)                                     
                                        else:
                                            TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                            counter = counter + 1
                                            time.sleep(1)
                                            delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                            else:
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                continue
                        elif (video_height == "576" and counter < 4):
                            time.sleep(2)
                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                if (video_result >= NOS_API.thres):
                                    while(result == 0):
                                        time.sleep(2)
                                        result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_576"], 5, ["[FULL_SCREEN_576]"], [40])
                                    NOS_API.test_cases_results_info.DidUpgrade = 1
                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                        video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                        if(video_result >= NOS_API.thres):
                                            time.sleep(60)
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                            else:
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                continue
                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                            if(NOS_API.grab_picture("Channel")):
                                video_result_0 = NOS_API.compare_pictures("black_576_ref", "Channel", "[FULL_SCREEN_576]");
                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_576_ref_1", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                        delta_time = 601                             
                                    else:
                                        time.sleep(1)
                                        counter = counter + 1                                    
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(1)
                                    counter = counter + 1
                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                            else:
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                continue        
                        elif (video_height == "1080" and counter < 4):    
                            time.sleep(2)
                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                if (video_result >= NOS_API.thres):
                                    while(result == 0):
                                        time.sleep(2)
                                        result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_1080"], 5, ["[FULL_SCREEN_1080]"], [NOS_API.thres])
                                    NOS_API.test_cases_results_info.DidUpgrade = 1
                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                        video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                        if(video_result >= NOS_API.thres):
                                            time.sleep(60) 
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                            else:
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                continue
                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                            if(NOS_API.grab_picture("Channel")):
                                video_result_0 = NOS_API.compare_pictures("black_1080_ref", "Channel", "[FULL_SCREEN_1080]");
                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_1080_ref_1", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                        delta_time = 601                             
                                    else:
                                        time.sleep(1)
                                        counter = counter + 1             
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(1)
                                    counter = counter + 1
                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))              
                            else:
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                continue
                        else:
                            if (Repeat == 0):
                                Repeat = Repeat + 1 
                                TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones. Line 647")
                                delta_time = 602
                                break
                            else:
                                delta_time = 602
                                Repeat = 2
                                TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones")
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                NOS_API.set_error_message("Video HDMI") 
                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                break
                    else:
                        NOS_API.grabber_stop_video_source()                    
                        ## Initialize input interfaces of DUT RT-AV101 device 
                        NOS_API.reset_dut()
                        time.sleep(2)
                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2) 
    
                        image_on_cvbs = False
                        if (NOS_API.is_signal_present_on_video_source()):
                            if(NOS_API.grab_picture("black_screen_Scart")):
                                video_result = NOS_API.compare_pictures("black_screen_cvbs", "black_screen_Scart");
                                if (video_result <= NOS_API.DEFAULT_CVBS_VIDEO_THRESHOLD):
                                    NOS_API.grabber_stop_video_source()
                                    time.sleep(1)
                                    NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)  
                                    image_on_cvbs = True
                                    if not(NOS_API.is_signal_present_on_video_source()):
                                        NOS_API.display_dialog("Verificar HDMI e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                        time.sleep(2)
                                    if (NOS_API.is_signal_present_on_video_source()):
                                        time.sleep(3)
                                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                        if (video_height != "576" and video_height != "720" and video_height != "1080"):
                                            time.sleep(45)
                                            delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                            continue
                                        if (video_height == "720" and counter < 4):
                                            if(NOS_API.grab_picture("boot_up_stage_hdmi")):
                                                video_result = NOS_API.mask_and_compare_pictures("installation_boot_up_ref", "boot_up_stage_hdmi", "File-MASK")
                                                video_result_0 = NOS_API.mask_and_compare_pictures("installation_boot_up_Eng_ref", "boot_up_stage_hdmi", "File-MASK_Eng")  
                                                video_result_1 = NOS_API.compare_pictures("No_Upgrade", "boot_up_stage_hdmi")   
                                                video_result_2 = NOS_API.compare_pictures("No_Upgrade_1", "boot_up_stage_hdmi")                                            
                                                if(video_result >= NOS_API.thres or video_result_0 >= NOS_API.thres):
                                                    NOS_API.test_cases_results_info.channel_boot_up_state = False
                                                    Software_Upgrade_TestCase = True
                                                    delta_time = 601
                                                elif(video_result_1 >= NOS_API.thres or video_result_2 >= NOS_API.thres):
                                                    NOS_API.test_cases_results_info.channel_boot_up_state = False
                                                    NOS_API.test_cases_results_info.inst_act_state = True
                                                    Software_Upgrade_TestCase = True
                                                    delta_time = 601
                                                else: 
                                                    time.sleep(2)
                                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                                        video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                                        if (video_result >= NOS_API.thres):
                                                            while(result == 0):
                                                                time.sleep(2)
                                                                result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                                                if(video_result >= NOS_API.thres):
                                                                    time.sleep(60)
                                                            else:
                                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                                continue
                                                    else:
                                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                        continue
                                                    TEST_CREATION_API.send_ir_rc_command("[UP]")
                                                    if(NOS_API.grab_picture("Channel")):
                                                        video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel");
                                                        if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                            video_result_1 = NOS_API.mask_and_compare_pictures("Banner_720_ref", "Channel", "Banner_720_MASK")
                                                            video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_720_ref", "Channel", "Banner_720_MASK")
                                                            video_result_3 = NOS_API.mask_and_compare_pictures("Banner_720_ref_1", "Channel", "Banner_720_MASK")
                                                            if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                                delta_time = 601                                          
                                                            else:
                                                                time.sleep(1)
                                                                counter = counter + 1
                                                                image_on_cvbs = True
                                                        else:
                                                            TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                            time.sleep(1)
                                                            counter = counter + 1
                                                            image_on_cvbs = True
                                                            delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                    else:
                                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                        continue
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                        elif (video_height == "576" and counter < 4):
                                            time.sleep(2)
                                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                                video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                                if (video_result >= NOS_API.thres):
                                                    while(result == 0):
                                                        time.sleep(2)
                                                        result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_576"], 5, ["[FULL_SCREEN_576]"], [40])
                                                    NOS_API.test_cases_results_info.DidUpgrade = 1
                                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                                        video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                                        if(video_result >= NOS_API.thres):
                                                            time.sleep(60)
                                                    else:
                                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                        continue
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                                            if(NOS_API.grab_picture("Channel")):
                                                video_result_0 = NOS_API.compare_pictures("black_576_ref", "Channel", "[FULL_SCREEN_576]");
                                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_576_ref_1", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                        delta_time = 601                                             
                                                    else:
                                                        time.sleep(1)
                                                        counter = counter + 1
                                                        image_on_cvbs = True
                                                else:
                                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                    time.sleep(1)
                                                    counter = counter + 1
                                                    image_on_cvbs = True
                                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                        elif (video_height == "1080" and counter < 4):    
                                            time.sleep(2)
                                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                                video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                                if (video_result >= NOS_API.thres):
                                                    while(result == 0):
                                                        time.sleep(2)
                                                        result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_1080"], 5, ["[FULL_SCREEN_1080]"], [NOS_API.thres])
                                                    NOS_API.test_cases_results_info.DidUpgrade = 1
                                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                                        video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                                        if(video_result >= NOS_API.thres):
                                                            time.sleep(60)  
                                                    else:
                                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                        continue
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                                            if(NOS_API.grab_picture("Channel")):
                                                video_result_0 = NOS_API.compare_pictures("black_1080_ref", "Channel", "[FULL_SCREEN_1080]");
                                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_1080_ref_1", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                        delta_time = 601                                             
                                                    else:
                                                        time.sleep(1)
                                                        counter = counter + 1
                                                        image_on_cvbs = True
                                                else:
                                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                    time.sleep(1)
                                                    counter = counter + 1
                                                    image_on_cvbs = True
                                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                        else:
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1 
                                                TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones. Line 835")
                                                delta_time = 602                                          
                                                break
                                            else:
                                                delta_time = 602
                                                Repeat = 2
                                                TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                NOS_API.set_error_message("Video HDMI") 
                                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                    else:
                                        delta_time = 602
                                        Repeat = 2
                                        TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                        NOS_API.set_error_message("Video HDMI (Não Retestar)")
                                        error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                        error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                else:
                                    NOS_API.grabber_stop_video_source()
                                    time.sleep(2)
                                    NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                    time.sleep(0.2)
                                    image_on_cvbs = True
                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                            else:
                                NOS_API.grabber_stop_video_source()
                                time.sleep(1)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)  
                                image_on_cvbs = True
                                if not(NOS_API.is_signal_present_on_video_source()):
                                    NOS_API.display_dialog("Verificar HDMI e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                    time.sleep(3)
                                if (NOS_API.is_signal_present_on_video_source()):
                                    continue
                                else:
                                    NOS_API.grabber_stop_video_source()                    
                                    ## Initialize input interfaces of DUT RT-AV101 device 
                                    NOS_API.reset_dut()
                                    time.sleep(2)
                                    NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2) 
                                    if (NOS_API.is_signal_present_on_video_source()):
                                        delta_time = 602
                                        Repeat = 2
                                        TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                        NOS_API.set_error_message("Video HDMI (Não Retestar)")
                                        error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                        error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        NOS_API.grabber_stop_video_source()
                                        time.sleep(1)
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                        continue
                        if not (image_on_cvbs):
                            time.sleep(1)
                            NOS_API.grabber_stop_video_source()
                            time.sleep(1)
                            NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                            time.sleep(5)
                            if (NOS_API.is_signal_present_on_video_source()):
                                time.sleep(3)
                                video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                if (video_height != "576" and video_height != "720" and video_height != "1080"):
                                    time.sleep(40)
                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                    continue
                                if (video_height == "720" and counter < 4):
                                    if(NOS_API.grab_picture("boot_up_stage_hdmi")):
                                                    
                                        video_result = NOS_API.mask_and_compare_pictures("installation_boot_up_ref", "boot_up_stage_hdmi", "File-MASK")
                                        video_result_0 = NOS_API.mask_and_compare_pictures("installation_boot_up_Eng_ref", "boot_up_stage_hdmi", "File-MASK_Eng")  
                                        video_result_1 = NOS_API.compare_pictures("No_Upgrade", "boot_up_stage_hdmi")   
                                        video_result_2 = NOS_API.compare_pictures("No_Upgrade_1", "boot_up_stage_hdmi") 
                                        if(video_result >= NOS_API.thres or video_result_0 >= NOS_API.thres):                              
                                            NOS_API.test_cases_results_info.channel_boot_up_state = False
                                            Software_Upgrade_TestCase = True
                                            delta_time = 601
                                        elif(video_result_1 >= NOS_API.thres or video_result_2 >= NOS_API.thres):
                                            NOS_API.test_cases_results_info.channel_boot_up_state = False
                                            NOS_API.test_cases_results_info.inst_act_state = True
                                            Software_Upgrade_TestCase = True
                                            delta_time = 601 
                                        else: 
                                            time.sleep(2)
                                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                                if (video_result >= NOS_API.thres):
                                                    while(result == 0):
                                                        time.sleep(2)
                                                        result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                    NOS_API.test_cases_results_info.DidUpgrade = 1
                                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                                        video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                                        if(video_result >= NOS_API.thres):
                                                            time.sleep(60)  
                                                    else:
                                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                        continue
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                                            if(NOS_API.grab_picture("Channel")):
                                                video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel");
                                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_720_ref", "Channel", "Banner_720_MASK")
                                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_720_ref", "Channel", "Banner_720_MASK")
                                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_720_ref_1", "Channel", "Banner_720_MASK")
                                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                        delta_time = 601                                             
                                                    else:
                                                        time.sleep(1)
                                                        counter = counter + 1                                                   
                                                else:
                                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                    time.sleep(1)
                                                    counter = counter + 1
                                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue                
                                elif (video_height == "576" and counter < 4):
                                    time.sleep(2)
                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                        video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                        if (video_result >= NOS_API.thres):
                                            while(result == 0):
                                                time.sleep(2)
                                                result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_576"], 5, ["[FULL_SCREEN_576]"], [40])
                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                                video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                                if(video_result >= NOS_API.thres):
                                                    time.sleep(60)
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                                    TEST_CREATION_API.send_ir_rc_command("[UP]")
                                    if(NOS_API.grab_picture("Channel")):
                                        video_result_0 = NOS_API.compare_pictures("black_576_ref", "Channel", "[FULL_SCREEN_576]");
                                        if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            video_result_1 = NOS_API.mask_and_compare_pictures("Banner_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                            video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                            video_result_3 = NOS_API.mask_and_compare_pictures("Banner_576_ref_1", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                            if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                delta_time = 601                                   
                                            else:
                                                time.sleep(1)
                                                counter = counter + 1       
                                        else:
                                            TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                            time.sleep(1)
                                            counter = counter + 1
                                            delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                                elif (video_height == "1080" and counter < 4):    
                                    time.sleep(2)
                                    if (NOS_API.grab_picture("Sw_Upgrade")):
                                        video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                        if (video_result >= NOS_API.thres):
                                            while(result == 0):
                                                time.sleep(2)
                                                result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_1080"], 5, ["[FULL_SCREEN_1080]"], [NOS_API.thres])
                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                            if (NOS_API.grab_picture("Sw_Upgrade")):
                                                video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                                if(video_result >= NOS_API.thres):
                                                    time.sleep(60) 
                                            else:
                                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                continue
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                                    TEST_CREATION_API.send_ir_rc_command("[UP]")
                                    if(NOS_API.grab_picture("Channel")):
                                        video_result_0 = NOS_API.compare_pictures("black_1080_ref", "Channel", "[FULL_SCREEN_1080]");
                                        if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            video_result_1 = NOS_API.mask_and_compare_pictures("Banner_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                            video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                            video_result_3 = NOS_API.mask_and_compare_pictures("Banner_1080_ref_1", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                            if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                delta_time = 601                                    
                                            else:
                                                time.sleep(1)
                                                counter = counter + 1
                                        else:
                                            TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                            time.sleep(1)
                                            counter = counter + 1
                                            delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))           
                                    else:
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                        continue
                                else:
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1 
                                        TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones. Line 1032")
                                        delta_time = 602
                                        break
                                    else:
                                        delta_time = 602
                                        Repeat = 2
                                        TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                        NOS_API.set_error_message("Video HDMI") 
                                        error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                        error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message                                               
                            else:
                                NOS_API.grabber_stop_video_source()                           
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)                          
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
     
                if((Software_Upgrade_TestCase == False) and (delta_time !=602)):            
                    counter_1 = 0
                    TEST_CREATION_API.send_ir_rc_command("[First_POWER]")
                    result = NOS_API.wait_for_multiple_pictures(
                                    ["Act_SSU", "Act_SSU_576", "Act_SSU_1080", "Act_SSU_Eng", "Act_SSU_576_Eng", "Act_SSU_1080_Eng"],
                                    15,
                                    ["[Act_SSU]", "[Act_SSU_576]", "[Act_SSU_1080]", "[Act_SSU]", "[Act_SSU_576]", "[Act_SSU_1080]"],
                                    [NOS_API.thres, 60, NOS_API.thres, NOS_API.thres, 60, NOS_API.thres])
                    if (result >= 0 and result < 6):
                        time.sleep(5)
                        NOS_API.test_cases_results_info.DidUpgrade = 1
                        if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                            time.sleep(10)
                            if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                                time.sleep(60)      
                    if not(NOS_API.is_signal_present_on_video_source()):
                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                        time.sleep(8)
                    time.sleep(1)
                    if not(NOS_API.is_signal_present_on_video_source()):
                        NOS_API.grabber_stop_video_source()                                    
                        ## Initialize input interfaces of DUT RT-AV101 device 
                        NOS_API.reset_dut()
                        time.sleep(2)                                    
                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)                                   
                        time.sleep(2)                                   
                        if (TEST_CREATION_API.is_signal_present_on_video_source()):
                            if not(NOS_API.grab_picture("black_Scart")):
                                if (Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1080.")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_576]");
                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                NOS_API.grabber_stop_video_source()
                                time.sleep(1)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                time.sleep(4)
                            else:
                                NOS_API.grabber_stop_video_source()
                                time.sleep(1)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                time.sleep(4)
                                NOS_API.display_dialog("Verificar HDMI e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                time.sleep(2)
                                if not(TEST_CREATION_API.is_signal_present_on_video_source()):
                                    TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                    NOS_API.set_error_message("Video HDMI (Não Retestar)")
                                    error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                    error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                        
                        else:   
                            NOS_API.grabber_stop_video_source()
                            time.sleep(1)
                            NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                            time.sleep(4)
                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                        time.sleep(8)
                    time.sleep(1)
                    if not(NOS_API.is_signal_present_on_video_source()):
                        NOS_API.grabber_stop_video_source()                                    
                        ## Initialize input interfaces of DUT RT-AV101 device 
                        NOS_API.reset_dut()
                        time.sleep(2)                                    
                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)                                   
                        time.sleep(2)                                   
                        if (TEST_CREATION_API.is_signal_present_on_video_source()):
                            if not(NOS_API.grab_picture("black_Scart")):
                                if (Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1187.")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_576]");
                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                NOS_API.grabber_stop_video_source()
                                time.sleep(1)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                time.sleep(4)
                            else:
                                NOS_API.grabber_stop_video_source()
                                time.sleep(1)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                time.sleep(4)
                                NOS_API.display_dialog("Verificar HDMI e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                time.sleep(2)
                                if not(TEST_CREATION_API.is_signal_present_on_video_source()):
                                    TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                    NOS_API.set_error_message("Video HDMI (Não Retestar)")
                                    error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                    error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                    
                        else:   
                            NOS_API.grabber_stop_video_source()
                            time.sleep(1)
                            NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                            time.sleep(4)
                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                        time.sleep(8)
                    time.sleep(1)
                    if not(NOS_API.is_signal_present_on_video_source()):
                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                        time.sleep(8)
                    time.sleep(1)
                    if (NOS_API.is_signal_present_on_video_source()):
                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                        if (video_height == "720"):
                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                            if not(NOS_API.grab_picture("black")):
                                if (Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1300.")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result_0 = NOS_API.compare_pictures("black_720_ref", "black");
                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                NOS_API.grabber_stop_video_source()
                                NOS_API.reset_dut()
                                time.sleep(2)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)
                                time.sleep(2)
                                if not(NOS_API.grab_picture("black_Scart")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1351.")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_576]");
                                if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(3)
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(5)
                                    NOS_API.grabber_stop_video_source()
                                    time.sleep(1)
                                    NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                    time.sleep(8)
                        elif (video_height == "576"):
                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                            if not(NOS_API.grab_picture("black")):
                                if (Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1407.")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result_0 = NOS_API.compare_pictures("black_576_ref", "black", "[FULL_SCREEN_576]");
                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                NOS_API.grabber_stop_video_source()
                                NOS_API.reset_dut()
                                time.sleep(2)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)
                                time.sleep(2)
                                if not(NOS_API.grab_picture("black_Scart")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1458.")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_576]");
                                if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(3)
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(5)
                                    NOS_API.grabber_stop_video_source()
                                    time.sleep(1)
                                    NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                    time.sleep(8)
                        elif(video_height == "1080"):
                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                            if not(NOS_API.grab_picture("black")):
                                if (Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1514.")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result_0 = NOS_API.compare_pictures("black_1080_ref", "black", "[FULL_SCREEN_1080]");
                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                NOS_API.grabber_stop_video_source()
                                NOS_API.reset_dut()
                                time.sleep(2)
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)
                                time.sleep(2)
                                if not(NOS_API.grab_picture("black_Scart")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1565.")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_1080]");
                                if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(3)
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    time.sleep(5)
                                    NOS_API.grabber_stop_video_source()
                                    time.sleep(1)
                                    NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                    time.sleep(8)
                    while (counter_1 < 3):
                        if (NOS_API.is_signal_present_on_video_source()):
                            video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                            if (video_height != "576" and video_height != "720" and video_height != "1080"):
                                time.sleep(40)
                                continue
                            if (video_height == "720"):
                                if not(NOS_API.grab_picture("boot_up_stage_hdmi")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1626.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.mask_and_compare_pictures("installation_boot_up_ref", "boot_up_stage_hdmi", "File-MASK")
                                video_result_0 = NOS_API.mask_and_compare_pictures("installation_boot_up_Eng_ref", "boot_up_stage_hdmi", "File-MASK_Eng")  
                                video_result_1 = NOS_API.compare_pictures("No_Upgrade", "boot_up_stage_hdmi")
                                video_result_2 = NOS_API.compare_pictures("No_Upgrade_1", "boot_up_stage_hdmi") 
                                if(video_result >= NOS_API.thres or video_result_0 >= NOS_API.thres):                     
                                    NOS_API.test_cases_results_info.channel_boot_up_state = False
                                    Software_Upgrade_TestCase = True
                                    delta_time = 601
                                    break
                                elif(video_result_1 >= NOS_API.thres or video_result_2 >= NOS_API.thres):
                                    NOS_API.test_cases_results_info.channel_boot_up_state = False
                                    NOS_API.test_cases_results_info.inst_act_state = True
                                    Software_Upgrade_TestCase = True
                                    delta_time = 601  
                                    break
                                else: 
                                    time.sleep(3)  
                                    if not(NOS_API.grab_picture("Sw_Upgrade")):
                                        if (Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1689.")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade")
                                    video_result_1 = NOS_API.compare_pictures("No_Upgrade", "Sw_Upgrade")
                                    video_result_2 = NOS_API.compare_pictures("No_Upgrade_1", "Sw_Upgrade") 
                                    if (video_result >= NOS_API.thres):
                                        while(result == 0):
                                            time.sleep(2)
                                            result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                        time.sleep(1)
                                        if not(NOS_API.grab_picture("Sw_Upgrade")):
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1742.")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                        if(video_result >= NOS_API.thres):
                                            time.sleep(60)
                                    elif(video_result_1 >= NOS_API.thres or video_result_2 >= NOS_API.thres):
                                        NOS_API.test_cases_results_info.channel_boot_up_state = False
                                        NOS_API.test_cases_results_info.inst_act_state = True
                                        Software_Upgrade_TestCase = True
                                        delta_time = 601  
                                        break
                                TEST_CREATION_API.send_ir_rc_command("[UP]")
                                if not(NOS_API.grab_picture("Channel")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1797")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel");
                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_720_ref", "Channel", "Banner_720_MASK")
                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_720_ref", "Channel", "Banner_720_MASK")
                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_720_ref_1", "Channel", "Banner_720_MASK")
                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        NOS_API.test_cases_results_info.channel_boot_up_state = True     
                                        Software_Upgrade_TestCase = True                                    
                                        delta_time = 601
                                        break    
                                    else:
                                        if (counter_1 == 2):
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones. Line 1853")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                NOS_API.set_error_message("Video HDMI") 
                                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                                counter_1 = 3
                                                Repeat = 2
                                        else:
                                            NOS_API.grabber_stop_video_source()
                                            time.sleep(2)
                                            NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                            time.sleep(0.2)
                                            counter_1 = counter_1 + 1 
                                else:
                                    if (counter_1 == 2):
                                        NOS_API.grabber_stop_video_source()                                    
                                        ## Initialize input interfaces of DUT RT-AV101 device 
                                        NOS_API.reset_dut()
                                        time.sleep(2)                                    
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)                                   
                                        time.sleep(2)                                   
                                        if (TEST_CREATION_API.is_signal_present_on_video_source()):
                                            if not(NOS_API.grab_picture("black_Scart")):
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1882.")
                                                    break
                                                else:
                                                    Software_Upgrade_TestCase = False
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_576]");
                                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 1928.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("No boot")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                    NOS_API.set_error_message("Não arranca")
                                                    error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                                    counter_1 = 3
                                                    Repeat = 2
                                            else:
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("HDMI NOK. Line 1942.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                                    NOS_API.set_error_message("Video HDMI")
                                                    error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                                    error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                                    counter_1 = 3
                                                    Repeat = 2
                                        else:
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 1956.")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("No boot")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                NOS_API.set_error_message("Não arranca")
                                                error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                                counter_1 = 3
                                                Repeat = 2
                                    else:   
                                        NOS_API.grabber_stop_video_source()
                                        #NOS_API.reset_dut()
                                        time.sleep(2)
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                        time.sleep(0.2)
                                        counter_1 = counter_1 + 1 
                                        
                            elif (video_height == "576"):
                                time.sleep(3)
                                if not(NOS_API.grab_picture("Sw_Upgrade")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 1980.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                if (video_result >= NOS_API.thres):
                                    while(result == 0):
                                        time.sleep(2)
                                        result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_576"], 5, ["[FULL_SCREEN_576]"], [40])
                                        NOS_API.test_cases_results_info.DidUpgrade = 1
                                    time.sleep(1)
                                    if not(NOS_API.grab_picture("Sw_Upgrade")):
                                        if (Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2031.")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Upgrade_ref_576", "Sw_Upgrade");
                                    if(video_result >= NOS_API.thres):
                                        time.sleep(60)
                                TEST_CREATION_API.send_ir_rc_command("[UP]")
                                if not(NOS_API.grab_picture("Channel")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2079.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result_0 = NOS_API.compare_pictures("black_576_ref", "Channel", "[FULL_SCREEN_576]");
                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_576_ref", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_576_ref_1", "Channel", "Banner_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        NOS_API.test_cases_results_info.channel_boot_up_state = True
                                        Software_Upgrade_TestCase = True                                    
                                        delta_time = 601
                                        break 
                                    else:
                                        if (counter_1 == 2):
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones. Line 2135.")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                NOS_API.set_error_message("Video HDMI") 
                                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                                counter_1 = 3
                                                Repeat = 2
                                        else:
                                            NOS_API.grabber_stop_video_source()
                                            #NOS_API.reset_dut()
                                            time.sleep(2)
                                            NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                            time.sleep(0.2)
                                            counter_1 = counter_1 + 1 
                                else:
                                    if (counter_1 == 2):
                                        NOS_API.grabber_stop_video_source()                                    
                                        ## Initialize input interfaces of DUT RT-AV101 device 
                                        NOS_API.reset_dut()
                                        time.sleep(2)                                    
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)                                   
                                        time.sleep(2)                                   
                                        if (TEST_CREATION_API.is_signal_present_on_video_source()):
                                            if not(NOS_API.grab_picture("black_Scart")):
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2165.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_576]");
                                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 2210.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("No boot")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                    NOS_API.set_error_message("Não arranca")
                                                    error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                                    counter_1 = 3
                                                    Repeat = 2
                                            else:
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("HDMI NOK. Line 2224.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                                    NOS_API.set_error_message("Video HDMI")
                                                    error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                                    error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                                    counter_1 = 3
                                                    Repeat = 2
                                        else:
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 2238.")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("No boot")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                NOS_API.set_error_message("Não arranca")
                                                error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                                counter_1 = 3
                                                Repeat = 2
                                    else:
                                        NOS_API.grabber_stop_video_source()
                                        #NOS_API.reset_dut()
                                        time.sleep(2)
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                        time.sleep(0.2)
                                        counter_1 = counter_1 + 1 
                            elif (video_height == "1080"):    
                                time.sleep(3)
                                if not(NOS_API.grab_picture("Sw_Upgrade")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2261.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                if (video_result >= NOS_API.thres):
                                    while(result == 0):
                                        time.sleep(2)
                                        result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref_1080"], 5, ["[FULL_SCREEN_1080]"], [NOS_API.thres])
                                        NOS_API.test_cases_results_info.DidUpgrade = 1
                                    if not(NOS_API.grab_picture("Sw_Upgrade")):
                                        if (Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2311.")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Upgrade_ref_1080", "Sw_Upgrade");
                                    if(video_result >= NOS_API.thres):
                                        time.sleep(60)
                                TEST_CREATION_API.send_ir_rc_command("[UP]")
                                if not(NOS_API.grab_picture("Channel")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2359.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result_0 = NOS_API.compare_pictures("black_1080_ref", "Channel", "[FULL_SCREEN_1080]");
                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_1080_ref", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_1080_ref_1", "Channel", "Banner_1080_MASK",TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        NOS_API.test_cases_results_info.channel_boot_up_state = True      
                                        Software_Upgrade_TestCase = True
                                        delta_time = 601
                                        break                       
                                    else:
                                        if (counter_1 == 2):
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones. Line 2415.")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                NOS_API.set_error_message("Video HDMI") 
                                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                                counter_1 = 3
                                                Repeat = 2
                                        else:
                                            NOS_API.grabber_stop_video_source()
                                            #NOS_API.reset_dut()
                                            time.sleep(2)
                                            NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                            time.sleep(0.2)
                                            counter_1 = counter_1 + 1
                                else:   
                                    if (counter_1 == 2):
                                        NOS_API.grabber_stop_video_source()                                    
                                        ## Initialize input interfaces of DUT RT-AV101 device 
                                        NOS_API.reset_dut()
                                        time.sleep(2)                                    
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)                                   
                                        time.sleep(2)                                   
                                        if (TEST_CREATION_API.is_signal_present_on_video_source()):
                                            if not(NOS_API.grab_picture("black_Scart")):
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2445.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result_0 = NOS_API.compare_pictures("black_576_ref", "black_Scart", "[FULL_SCREEN_576]");
                                            if (video_result_0 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 2490.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("No boot")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                    NOS_API.set_error_message("Não arranca")
                                                    error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                                    counter_1 = 3
                                                    Repeat = 2
                                            else:
                                                if (Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("HDMI NOK. Line 2490.")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                                    NOS_API.set_error_message("Video HDMI")
                                                    error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                                    error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                                    counter_1 = 3
                                                    Repeat = 2
                                        else:
                                            if (Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 2518.")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("No boot")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                NOS_API.set_error_message("Não arranca")
                                                error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                                counter_1 = 3
                                                Repeat = 2
                                    else:
                                        NOS_API.grabber_stop_video_source()
                                        #NOS_API.reset_dut()
                                        time.sleep(2)
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                        time.sleep(0.2)
                                        counter_1 = counter_1 + 1
                            else:
                                if (Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones. Line 2539.")
                                    break
                                else:
                                    TEST_CREATION_API.write_log_to_file("Resolution isn't the same of any of the expected ones")
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                    NOS_API.set_error_message("Video HDMI") 
                                    error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                    error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                    Repeat = 2
                            
                        else:
                            NOS_API.grabber_stop_video_source()
                            time.sleep(1)
                            ## Initialize input interfaces of DUT RT-AV101 device 
                            NOS_API.reset_dut()
                            time.sleep(2)
                                
                            NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)
                            time.sleep(1)
                            counter_1 = 3
                            if (NOS_API.is_signal_present_on_video_source()):
                                if not(NOS_API.grab_picture("black_screen_Scart")):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 2564.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.compare_pictures("black_screen_cvbs", "black_screen_Scart");
                                if (video_result <= NOS_API.DEFAULT_CVBS_VIDEO_THRESHOLD):
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("HDMI NOK. Line 2564.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("HDMI NOK")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.image_absence_hdmi_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.image_absence_hdmi_error_message)
                                        NOS_API.set_error_message("Video HDMI")
                                        error_codes = NOS_API.test_cases_results_info.image_absence_hdmi_error_code
                                        error_messages = NOS_API.test_cases_results_info.image_absence_hdmi_error_message
                                        Repeat = 2
                                else:
                                    if (Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 2622.")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("No boot")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                        NOS_API.set_error_message("Não arranca")
                                        error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                        error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                        Repeat = 2
                            else:
                                if (Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB didn't Boot. Line 2635.")
                                    break
                                else:
                                    TEST_CREATION_API.write_log_to_file("No boot")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                    NOS_API.set_error_message("Não arranca")
                                    error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                    error_messages = NOS_API.test_cases_results_info.no_boot_error_message    
                                    Repeat = 2
                
            
            ##############################################################################################################################################################################################################################    
            #############################################################################################Input Signal#####################################################################################################################    
            ##############################################################################################################################################################################################################################
                    
                if(Software_Upgrade_TestCase):    
                    TEST_CREATION_API.write_log_to_file("####Input Signal####")
                    ## Set test result default to FAIL
                    test_result = "FAIL"
                    
                    error_codes = ""
                    error_messages = ""
    
                    No_Upgraded = 0
                    counter = 0
                    test = "Pass"
                    flag = 0
                    Versao_Hardware_V1 = "018.249"
                    Already_Upgraded = 0
                    
                    if (NOS_API.is_signal_present_on_video_source_PaceDSR8151()):
                        while (counter < 3):
                            ## Check state of STB
                            if (NOS_API.test_cases_results_info.channel_boot_up_state):
                                lang = "Por"
                                TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                time.sleep(2)
                                ## Set resolution to 720p if is not on 720p and navigate to the signal level settings
                                video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                if (video_height != "720"):
                                    if (video_height == "1080"):
                                        TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                        if not(NOS_API.grab_picture("IR_Picture")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 2775")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_1080_ref", "IR_Picture", "IR_Ch_1080_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                        video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_1080_ref", "IR_Picture", "IR_Ch_1080_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                        if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            time.sleep(1)
                                            TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                            if not(NOS_API.grab_picture("IR_Picture")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 2825")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_1080_ref", "IR_Picture", "IR_Ch_1080_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                            video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_1080_ref", "IR_Picture", "IR_Ch_1080_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                            if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    IR_Issue = IR_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("IR. Line 2872")
                                                    break
                                                else:
                                                    if(IR_Issue == 0):
                                                        IR_Issue = IR_Issue + 1
                                                        TEST_CREATION_API.write_log_to_file("IR. Line 2877")
                                                        break
                                                    else:
                                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                        NOS_API.set_error_message("IR")
                                                        error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                        error_messages = NOS_API.test_cases_results_info.ir_nok_error_message                            
                                                        test = "Fail"
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                        if (video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            lang = "Eng"                          
                                    elif (video_height == "576"):
                                        TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                        if not(NOS_API.grab_picture("IR_Picture")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 2924")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_576_ref", "IR_Picture", "IR_Ch_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                        video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_576_ref", "IR_Picture", "IR_Ch_576_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                        if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            time.sleep(1)
                                            TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                            if not(NOS_API.grab_picture("IR_Picture")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 2974")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_576_ref", "IR_Picture", "IR_Ch_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                            video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_576_ref", "IR_Picture", "IR_Ch_576_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                            if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    IR_Issue = IR_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("IR. Line 3021")
                                                    break
                                                else:
                                                    if(IR_Issue == 0):
                                                        IR_Issue = IR_Issue + 1
                                                        TEST_CREATION_API.write_log_to_file("IR. Line 3026")
                                                        break
                                                    else:
                                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                        NOS_API.set_error_message("IR")
                                                        error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                        error_messages = NOS_API.test_cases_results_info.ir_nok_error_message
                                                        test = "Fail"
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                        if (video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            lang = "Eng"                            
                                    TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p_1]")
                                    video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                    if (video_height != "720"):
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                        time.sleep(1)
                                        TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720_slow]")                          
                                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                        if (video_height != "720"):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Resolution = Resolution + 1
                                                TEST_CREATION_API.write_log_to_file("Resolução. Line 3079")
                                                break
                                            else:
                                                if(Resolution == 0):
                                                    Resolution = Resolution + 1
                                                    TEST_CREATION_API.write_log_to_file("Resolução. Line 3084")
                                                    break
                                                else:
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.resolution_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.resolution_error_message)
                                                    error_codes = NOS_API.test_cases_results_info.resolution_error_code
                                                    error_messages = NOS_API.test_cases_results_info.resolution_error_message
                                                    NOS_API.set_error_message("Resolução")
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                        TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS]")
                                        flag = 1
                                    if (flag == 0):
                                        TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS]")
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p]")
                                    if not(NOS_API.grab_picture("IR_Picture")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 3132")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_720_ref", "IR_Picture", "IR_Ch_720_MASK")
                                    video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_720_ref", "IR_Picture", "IR_Ch_720_MASK_Eng")
                                    if (video_result_1 < NOS_API.thres and video_result_2 < NOS_API.thres):
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                        time.sleep(1)
                                        TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p]")
                                        if not(NOS_API.grab_picture("IR_Picture")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 3182")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_720_ref", "IR_Picture", "IR_Ch_720_MASK")
                                        video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_720_ref", "IR_Picture", "IR_Ch_720_MASK_Eng")
                                        if (video_result_1 < NOS_API.thres and video_result_2 < NOS_API.thres):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                IR_Issue = IR_Issue + 1
                                                TEST_CREATION_API.write_log_to_file("IR. Line 3229")
                                                break
                                            else:
                                                if(IR_Issue == 0):
                                                    IR_Issue = IR_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("IR. Line 3234")
                                                    break
                                                else:
                                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                    + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                    NOS_API.set_error_message("IR")
                                                    error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                    error_messages = NOS_API.test_cases_results_info.ir_nok_error_message
                                                    test = "Fail"
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                    if (video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        lang = "Eng"
                                
                                    TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p_1]")                       
                                
                                time.sleep(1)
                                if not(NOS_API.grab_picture("Check")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 3283")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.compare_pictures("Signal_Value_Ch_ref", "Check", "[Signal_Value_Ch]")  
                                video_result_1 = NOS_API.compare_pictures("Signal_Value_Ch_Eng_ref", "Check", "[Signal_Value_Ch]")                     
                                if (video_result < NOS_API.thres and video_result_1 < NOS_API.thres and test != "Fail"):
                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                    time.sleep(1)
                                    TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Ch_slow]")
                                    if not(NOS_API.grab_picture("Check")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 3333")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Signal_Value_Ch_ref", "Check", "[Signal_Value_Ch]")  
                                    video_result_1 = NOS_API.compare_pictures("Signal_Value_Ch_Eng_ref", "Check", "[Signal_Value_Ch]")                     
                                    if (video_result < NOS_API.thres and video_result_1 < NOS_API.thres):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 3229")
                                            break
                                        else:
                                            if(Navigation == 0):
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 3234")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                NOS_API.set_error_message("Navegação")
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                Mask_signal_level = "Ch_MASK"
                                ref_image = "Signal_Value_Ch_ref"
                            else:
                                if(NOS_API.test_cases_results_info.inst_act_state):                                    
                                    Tentativas_Act = 0
                                    while(Tentativas_Act < Num_Tentativas_Atualizcao):
                                        if (Tentativas_Act == 0):
                                            NOS_API.Send_Serial_Key("a", "feito")                      
                                            time.sleep(1)  
                                        NOS_API.configure_power_switch_by_inspection()
                                        if not(NOS_API.power_off()):
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("POWER SWITCH")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                            error_codes = NOS_API.test_cases_results_info.power_switch_error_code
                                            error_messages = NOS_API.test_cases_results_info.power_switch_error_message
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                        
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                        end_time)
                                            NOS_API.upload_file_report(report_file)
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                            
                                            return                                           
                                        time.sleep(2)                                           
                                        if not(NOS_API.power_on()):
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("POWER SWITCH")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                            error_codes = NOS_API.test_cases_results_info.power_switch_error_code
                                            error_messages = NOS_API.test_cases_results_info.power_switch_error_message
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                        
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                        end_time)
                                            NOS_API.upload_file_report(report_file)
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                            
                                            return    
                                        time.sleep(12)
                                        if not(NOS_API.display_custom_dialog("A STB est\xe1 a atualizar?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                            Tentativas_Act = Tentativas_Act + 1
                                            if (Tentativas_Act == 5):
                                                TEST_CREATION_API.write_log_to_file("Doesn't upgrade")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message)
                                                NOS_API.set_error_message("Não Actualiza") 
                                                error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                NOS_API.deinitialize()
                                                NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                            
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                            end_time)
                                                NOS_API.upload_file_report(report_file)
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                                
                                                return
                                        else:
                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                            Tentativas_Act = 6
                                    
                                    result = -2
                                    delta_time = 0
                                    start_time = time.localtime()
                                    while(result == -2 or delta_time < 180):
                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                        result = NOS_API.wait_for_multiple_pictures(["black_720_ref"], 20, ["[FULL_SCREEN]"], [80])
                                        if(result == 0 or result == -1):
                                            time.sleep(5)
                                            if (NOS_API.is_signal_present_on_video_source()):
                                                TEST_CREATION_API.send_ir_rc_command("[UP]")
                                                if not(NOS_API.grab_picture("Channel")):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        BreakWhile = True
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 4265")
                                                        break
                                                    else:
                                                        test_result = "FAIL"
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                                video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel");
                                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_720_ref", "Channel", "Banner_720_MASK")
                                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_720_ref", "Channel", "Banner_720_MASK")
                                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_720_ref_1", "Channel", "Banner_720_MASK")
                                                    video_result_4 = NOS_API.mask_and_compare_pictures("installation_boot_up_ref", "boot_up_stage_hdmi", "File-MASK")
                                                    video_result_5 = NOS_API.mask_and_compare_pictures("installation_boot_up_Eng_ref", "boot_up_stage_hdmi", "File-MASK_Eng")
                                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                        NOS_API.test_cases_results_info.channel_boot_up_state = True      
                                                        lang = "Por"
                                                        TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                                        time.sleep(2)
                                                        ## Set resolution to 720p if is not on 720p and navigate to the signal level settings
                                                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                                        if (video_height != "720"):
                                                            if (video_height == "1080"):
                                                                TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                                                if not(NOS_API.grab_picture("IR_Picture")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 4327")
                                                                        break
                                                                    else:
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_1080_ref", "IR_Picture", "IR_Ch_1080_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                                                video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_1080_ref", "IR_Picture", "IR_Ch_1080_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                                                if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                                    time.sleep(1)
                                                                    TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                                                    if not(NOS_API.grab_picture("IR_Picture")):
                                                                        if(Repeat == 0):
                                                                            Repeat = Repeat + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 4377")
                                                                            break
                                                                        else:
                                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                            NOS_API.set_error_message("Reboot")
                                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                            
                                                                            NOS_API.add_test_case_result_to_file_report(
                                                                                            test_result,
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            error_codes,
                                                                                            error_messages)
                                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                            report_file = ""    
                                                                            if (test_result != "PASS"):
                                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                "",
                                                                                                end_time)
                                                                                NOS_API.upload_file_report(report_file)
                                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                                
                                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                                        test_result,
                                                                                        end_time,
                                                                                        error_codes,
                                                                                        report_file)
                                                                            
                                                                            
                                                                            ## Update test result
                                                                            TEST_CREATION_API.update_test_result(test_result)
                                                                        
                                                                            ## Return DUT to initial state and de-initialize grabber device
                                                                            NOS_API.deinitialize()
                                                                            return
                                                                    video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_1080_ref", "IR_Picture", "IR_Ch_1080_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                                                    video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_1080_ref", "IR_Picture", "IR_Ch_1080_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_1080]")
                                                                    if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                        if(Repeat == 0):
                                                                            Repeat = Repeat + 1
                                                                            IR_Issue = IR_Issue + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("IR. Line 4424")
                                                                            break
                                                                        else:
                                                                            if(IR_Issue == 0):
                                                                                IR_Issue = IR_Issue + 1
                                                                                BreakWhile = True
                                                                                TEST_CREATION_API.write_log_to_file("IR. Line 4429")
                                                                                break
                                                                            else:
                                                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                                                NOS_API.set_error_message("IR")
                                                                                error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                                                error_messages = NOS_API.test_cases_results_info.ir_nok_error_message                            
                                                                                test = "Fail"
                                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                                test_result,
                                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                                error_codes,
                                                                                                error_messages)
                                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                                report_file = ""    
                                                                                if (test_result != "PASS"):
                                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                    "",
                                                                                                    end_time)
                                                                                    NOS_API.upload_file_report(report_file)
                                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                                    
                                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                                            test_result,
                                                                                            end_time,
                                                                                            error_codes,
                                                                                            report_file)
                                                                                
                                                                                
                                                                                ## Update test result
                                                                                TEST_CREATION_API.update_test_result(test_result)
                                                                            
                                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                                NOS_API.deinitialize()
                                                                                return
                                                                if (video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                    lang = "Eng"                          
                                                            elif (video_height == "576"):
                                                                TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                                                if not(NOS_API.grab_picture("IR_Picture")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 4476")
                                                                        break
                                                                    else:
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_576_ref", "IR_Picture", "IR_Ch_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                                                video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_576_ref", "IR_Picture", "IR_Ch_576_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                                                if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                                    time.sleep(1)
                                                                    TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p]")
                                                                    if not(NOS_API.grab_picture("IR_Picture")):
                                                                        if(Repeat == 0):
                                                                            Repeat = Repeat + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 4526")
                                                                            break
                                                                        else:
                                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                            NOS_API.set_error_message("Reboot")
                                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                            
                                                                            NOS_API.add_test_case_result_to_file_report(
                                                                                            test_result,
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            error_codes,
                                                                                            error_messages)
                                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                            report_file = ""    
                                                                            if (test_result != "PASS"):
                                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                "",
                                                                                                end_time)
                                                                                NOS_API.upload_file_report(report_file)
                                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                                
                                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                                        test_result,
                                                                                        end_time,
                                                                                        error_codes,
                                                                                        report_file)
                                                                            
                                                                            
                                                                            ## Update test result
                                                                            TEST_CREATION_API.update_test_result(test_result)
                                                                        
                                                                            ## Return DUT to initial state and de-initialize grabber device
                                                                            NOS_API.deinitialize()
                                                                            return
                                                                    video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_576_ref", "IR_Picture", "IR_Ch_576_MASK", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                                                    video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_576_ref", "IR_Picture", "IR_Ch_576_MASK_Eng", TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD,"[FULL_SCREEN_576]")
                                                                    if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                        if(Repeat == 0):
                                                                            Repeat = Repeat + 1
                                                                            IR_Issue = IR_Issue + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("IR. Line 4573")
                                                                            break
                                                                        else:
                                                                            if(IR_Issue == 0):
                                                                                IR_Issue = IR_Issue + 1
                                                                                BreakWhile = True
                                                                                TEST_CREATION_API.write_log_to_file("IR. Line 4578")
                                                                                break
                                                                            else:
                                                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                                                NOS_API.set_error_message("IR")
                                                                                error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                                                error_messages = NOS_API.test_cases_results_info.ir_nok_error_message
                                                                                test = "Fail"
                                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                                test_result,
                                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                                error_codes,
                                                                                                error_messages)
                                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                                report_file = ""    
                                                                                if (test_result != "PASS"):
                                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                    "",
                                                                                                    end_time)
                                                                                    NOS_API.upload_file_report(report_file)
                                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                                    
                                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                                            test_result,
                                                                                            end_time,
                                                                                            error_codes,
                                                                                            report_file)
                                                                                
                                                                                
                                                                                ## Update test result
                                                                                TEST_CREATION_API.update_test_result(test_result)
                                                                                
                                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                                NOS_API.deinitialize()
                                                                                return
                                                                if (video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                    lang = "Eng"                            
                                                            TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720p_1]")
                                                            video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                                            if (video_height != "720"):
                                                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                                time.sleep(1)
                                                                TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720_slow]")                          
                                                                video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                                                if (video_height != "720"):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        Resolution = Resolution + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Resolução. Line 4631")
                                                                        break
                                                                    else:
                                                                        if(Resolution == 0):
                                                                            Resolution = Resolution + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("Resolução. Line 4636")
                                                                            break
                                                                        else:
                                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.resolution_error_code \
                                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.resolution_error_message)
                                                                            error_codes = NOS_API.test_cases_results_info.resolution_error_code
                                                                            error_messages = NOS_API.test_cases_results_info.resolution_error_message
                                                                            NOS_API.set_error_message("Resolução")
                                                                            NOS_API.add_test_case_result_to_file_report(
                                                                                            test_result,
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            error_codes,
                                                                                            error_messages)
                                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                            report_file = ""    
                                                                            if (test_result != "PASS"):
                                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                "",
                                                                                                end_time)
                                                                                NOS_API.upload_file_report(report_file)
                                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                                
                                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                                        test_result,
                                                                                        end_time,
                                                                                        error_codes,
                                                                                        report_file)
                                                                            
                                                                            
                                                                            ## Update test result
                                                                            TEST_CREATION_API.update_test_result(test_result)
                                                                            
                                                                            ## Return DUT to initial state and de-initialize grabber device
                                                                            NOS_API.deinitialize()
                                                                            return
                                                                TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS]")
                                                                flag = 1
                                                            if (flag == 0):
                                                                TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS]")
                                                        else:
                                                            TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p]")
                                                            if not(NOS_API.grab_picture("IR_Picture")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 4684")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_720_ref", "IR_Picture", "IR_Ch_720_MASK")
                                                            video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_720_ref", "IR_Picture", "IR_Ch_720_MASK_Eng")
                                                            if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                                time.sleep(1)
                                                                TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p]")
                                                                if not(NOS_API.grab_picture("IR_Picture")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 4734")
                                                                        break
                                                                    else:
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result_1 = NOS_API.mask_and_compare_pictures("IR_Ch_720_ref", "IR_Picture", "IR_Ch_720_MASK")
                                                                video_result_2 = NOS_API.mask_and_compare_pictures("IR_Ch_Eng_720_ref", "IR_Picture", "IR_Ch_720_MASK_Eng")
                                                                if (video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        IR_Issue = IR_Issue + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("IR. Line 4781")
                                                                        break
                                                                    else:
                                                                        if(IR_Issue == 0):
                                                                            IR_Issue = IR_Issue + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("IR. Line 4786")
                                                                            break
                                                                        else:
                                                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                                            NOS_API.set_error_message("IR")
                                                                            error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                                            error_messages = NOS_API.test_cases_results_info.ir_nok_error_message
                                                                            test = "Fail"
                                                                            NOS_API.add_test_case_result_to_file_report(
                                                                                            test_result,
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            error_codes,
                                                                                            error_messages)
                                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                            report_file = ""    
                                                                            if (test_result != "PASS"):
                                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                "",
                                                                                                end_time)
                                                                                NOS_API.upload_file_report(report_file)
                                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                                
                                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                                        test_result,
                                                                                        end_time,
                                                                                        error_codes,
                                                                                        report_file)
                                                                            
                                                                            
                                                                            ## Update test result
                                                                            TEST_CREATION_API.update_test_result(test_result)
                                                                        
                                                                            ## Return DUT to initial state and de-initialize grabber device
                                                                            NOS_API.deinitialize()
                                                                            return
                                                            if (video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                lang = "Eng"
                                                        
                                                            TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p_1]")                       
                                                        
                                                        time.sleep(1)
                                                        if not(NOS_API.grab_picture("Check")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                BreakWhile = True
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 4835")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result = NOS_API.compare_pictures("Signal_Value_Ch_ref", "Check", "[Signal_Value_Ch]")  
                                                        video_result_1 = NOS_API.compare_pictures("Signal_Value_Ch_Eng_ref", "Check", "[Signal_Value_Ch]")                     
                                                        if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and test != "Fail"):
                                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                            time.sleep(1)
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Ch_slow]")
                                                            if not(NOS_API.grab_picture("Check")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 4885")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result = NOS_API.compare_pictures("Signal_Value_Ch_ref", "Check", "[Signal_Value_Ch]")  
                                                            video_result_1 = NOS_API.compare_pictures("Signal_Value_Ch_Eng_ref", "Check", "[Signal_Value_Ch]")                     
                                                            if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    Navigation = Navigation + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 4932")
                                                                    break
                                                                else:
                                                                    if(Navigation == 0):
                                                                        Navigation = Navigation + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 4937")
                                                                        break
                                                                    else:
                                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                                        NOS_API.set_error_message("Navegação")
                                                                        error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                        Mask_signal_level = "Ch_MASK"
                                                        ref_image = "Signal_Value_Ch_ref"
                                                        delta_time = 100
                                                        Already_Upgraded = 1
                                                        break 
                                                    elif(video_result_4 >= NOS_API.thres or video_result_5 >= NOS_API.thres):
                                                        NOS_API.test_cases_results_info.channel_boot_up_state = False      
                                                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                                        if (video_height == "720"):
                                                            if not(NOS_API.grab_picture("Check_Noise")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 4989")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_hdmi = NOS_API.compare_pictures("installation_boot_up_ref", "Check_Noise", "[Check_Noise_HDMI]")
                                                            if not(video_result_hdmi >= NOS_API.thres):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Noise on HDMI Image. Line 5034")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("Noise on HDMI Image")
                                                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                                    NOS_API.set_error_message("Video HDMI") 
                                                                    error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                                    error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                        
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                            if not(NOS_API.grab_picture("IR_Picture")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 5079")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_1 = NOS_API.mask_and_compare_pictures("IR_720_ref", "IR_Picture", "IR_720_MASK")
                                                            video_result_new = NOS_API.mask_and_compare_pictures("IR_720_new_ref", "IR_Picture", "IR_720_MASK")
                                                            if (video_result_1 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_new <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                                time.sleep(1)
                                                                TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                                if not(NOS_API.grab_picture("IR_Picture")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 5129")
                                                                        break
                                                                    else:
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result_1 = NOS_API.mask_and_compare_pictures("IR_720_ref", "IR_Picture", "IR_720_MASK")
                                                                video_result_new = NOS_API.mask_and_compare_pictures("IR_720_new_ref", "IR_Picture", "IR_720_MASK")
                                                                if (video_result_1 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_new <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        IR_Issue = IR_Issue + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("IR. Line 5176")
                                                                        break
                                                                    else:
                                                                        if(IR_Issue == 0):
                                                                            IR_Issue = IR_Issue + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("IR. Line 5181")
                                                                            break
                                                                        else:
                                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                                            NOS_API.set_error_message("IR")
                                                                            test = "Fail"
                                                                            error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                                            error_messages = NOS_API.test_cases_results_info.ir_nok_error_message
                                                                            NOS_API.add_test_case_result_to_file_report(
                                                                                            test_result,
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            error_codes,
                                                                                            error_messages)
                                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                            report_file = ""    
                                                                            if (test_result != "PASS"):
                                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                "",
                                                                                                end_time)
                                                                                NOS_API.upload_file_report(report_file)
                                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                                
                                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                                        test_result,
                                                                                        end_time,
                                                                                        error_codes,
                                                                                        report_file)
                                                                            
                                                                            
                                                                            ## Update test result
                                                                            TEST_CREATION_API.update_test_result(test_result)
                                                                        
                                                                            ## Return DUT to initial state and de-initialize grabber device
                                                                            NOS_API.deinitialize()
                                                                            return
                                                            if (video_result_1 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                Mask_signal_level = "Inst_MASK"
                                                                ref_image = "Signal_Value_Inst_ref"
                                                            elif (video_result_new > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                Mask_signal_level = "Inst_MASK"
                                                                ref_image = "Signal_Value_Inst_new_ref"
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_1]")
                                                        
                                                        time.sleep(1)
                                                        if not(NOS_API.grab_picture("Check")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                BreakWhile = True
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 5234")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result = NOS_API.compare_pictures("Signal_Value_Inst_ref", "Check", "[Signal_Value_Inst]")
                                                        video_result_1 = NOS_API.compare_pictures("Signal_Value_Inst_ref_1", "Check", "[Signal_Value_Inst]")
                                                        video_result_2 = NOS_API.compare_pictures("Signal_Value_Inst_ref_2", "Check", "[Signal_Value_Inst]")
                                                        if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):                       
                                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                            time.sleep(1)
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Inst]")
                                                            time.sleep(2)
                                                            if not(NOS_API.grab_picture("Check_Again")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 5286")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result = NOS_API.compare_pictures("Signal_Value_Inst_ref", "Check_Again", "[Signal_Value_Inst]")
                                                            video_result_1 = NOS_API.compare_pictures("Signal_Value_Inst_ref_1", "Check_Again", "[Signal_Value_Inst]")
                                                            video_result_2 = NOS_API.compare_pictures("Signal_Value_Inst_ref_2", "Check_Again", "[Signal_Value_Inst]")
                                                            if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD): 
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    Navigation = Navigation + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 5334")
                                                                    break
                                                                else:
                                                                    if(Navigation == 0):
                                                                        Navigation = Navigation + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 5339")
                                                                        break
                                                                    else:
                                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                                        NOS_API.set_error_message("Navegação")
                                                                        error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                    
                                                        delta_time = 100
                                                        Already_Upgraded = 1
                                                        break 
                                                    else:
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            BreakWhile = True
                                                            TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones. Line 5386")
                                                            break
                                                        else:
                                                            test_result = "FAIL"
                                                            TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones")
                                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                            NOS_API.set_error_message("Video HDMI") 
                                                            error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                            error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                            report_file = ""
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)                
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
    
                                                            return
                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                    if(BreakWhile):
                                        break
                                    if (delta_time > 180):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("No boot. Line 5428")
                                            break
                                        else:
                                            test_result = "FAIL"
                                            Input_Signal_TestCase = False
                                            TEST_CREATION_API.write_log_to_file("No boot")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                            NOS_API.set_error_message("Não arranca.")
                                            error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                            error_messages = NOS_API.test_cases_results_info.no_boot_error_message  
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                            return                                          
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[Set_First_Time_Inst]")
                                    
                                    video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                    if (video_height == "720"):
                                        if not(NOS_API.grab_picture("Check_Noise")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 5560")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result_hdmi = NOS_API.compare_pictures("installation_boot_up_ref", "Check_Noise", "[Check_Noise_HDMI]")
                                        if not(video_result_hdmi >= NOS_API.thres):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Noise on HDMI Image. Line 5560")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Noise on HDMI Image")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                NOS_API.set_error_message("Video HDMI") 
                                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        
                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                        if not(NOS_API.grab_picture("IR_Picture")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 5560")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result_1 = NOS_API.mask_and_compare_pictures("IR_720_ref", "IR_Picture", "IR_720_MASK")
                                        video_result_new = NOS_API.mask_and_compare_pictures("IR_720_new_ref", "IR_Picture", "IR_720_MASK")
                                        if (video_result_1 <= NOS_API.thres and video_result_new <= NOS_API.thres):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            time.sleep(1)
                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                            if not(NOS_API.grab_picture("IR_Picture")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 5700")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result_1 = NOS_API.mask_and_compare_pictures("IR_720_ref", "IR_Picture", "IR_720_MASK")
                                            video_result_new = NOS_API.mask_and_compare_pictures("IR_720_new_ref", "IR_Picture", "IR_720_MASK")
                                            if (video_result_1 <= NOS_API.thres and video_result_new <= NOS_API.thres):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    IR_Issue = IR_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("IR. Line 5334")
                                                    break
                                                else:
                                                    if(IR_Issue == 0):
                                                        IR_Issue = IR_Issue + 1
                                                        TEST_CREATION_API.write_log_to_file("IR. Line 5339")
                                                        break
                                                    else:
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                        NOS_API.set_error_message("IR")
                                                        test = "Fail"
                                                        error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                        error_messages = NOS_API.test_cases_results_info.ir_nok_error_message
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                        if (video_result_1 > NOS_API.thres):
                                            Mask_signal_level = "Inst_MASK"
                                            ref_image = "Signal_Value_Inst_ref"
                                        elif (video_result_new > NOS_API.thres):
                                            Mask_signal_level = "Inst_MASK"
                                            ref_image = "Signal_Value_Inst_new_ref"
                                    TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_1]")
                                    
                                    time.sleep(1)
                                    if not(NOS_API.grab_picture("Check")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 5805")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Signal_Value_Inst_ref", "Check", "[Signal_Value_Inst]")
                                    video_result_1 = NOS_API.compare_pictures("Signal_Value_Inst_ref_1", "Check", "[Signal_Value_Inst]")
                                    video_result_2 = NOS_API.compare_pictures("Signal_Value_Inst_ref_2", "Check", "[Signal_Value_Inst]")
                                    if (video_result < NOS_API.thres and video_result_1 < NOS_API.thres and video_result_2 < NOS_API.thres):                       
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                        time.sleep(1)
                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Inst]")
                                        time.sleep(2)
                                        if not(NOS_API.grab_picture("Check_Again")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 5857")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result = NOS_API.compare_pictures("Signal_Value_Inst_ref", "Check_Again", "[Signal_Value_Inst]")
                                        video_result_1 = NOS_API.compare_pictures("Signal_Value_Inst_ref_1", "Check_Again", "[Signal_Value_Inst]")
                                        video_result_2 = NOS_API.compare_pictures("Signal_Value_Inst_ref_2", "Check_Again", "[Signal_Value_Inst]")
                                        if (video_result < NOS_API.thres and video_result_1 < NOS_API.thres and video_result_2 < NOS_API.thres): 
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 5905")
                                                break
                                            else:
                                                if(Navigation == 0):
                                                    Navigation = Navigation + 1
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 5905")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                    NOS_API.set_error_message("Navegação")
                                                    error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                    error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                                                
                            if (test != "Fail" and No_Upgraded == 0):
                                time.sleep(5)
                                ## Perform grab picture
                                if not(NOS_API.grab_picture("Signal_Value")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 5957")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                counter = 3
                                video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value", Mask_signal_level)
                                
                                ## Check if signal value higher than threshold
                                if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    Input_Signal_TestCase = True
                                    #test_result = "PASS"
                                    NOS_API.test_cases_results_info.input_signal_ok = True
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[Inst_Act_New]")
                                    time.sleep(5)
                                    ## Perform grab picture
                                    if not(NOS_API.grab_picture("Signal_Value_1")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 6013")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    counter = 3
                                    video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value_1", Mask_signal_level)
                                    
                                    ## Check if signal value higher than threshold
                                    if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        Input_Signal_TestCase = True
                                        #test_result = "PASS"
                                        NOS_API.test_cases_results_info.input_signal_ok = True
                                    else:
                                        NOS_API.display_custom_dialog("Confirme Cabo RF e restantes cabos", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                        time.sleep(5)
                                        if not(NOS_API.grab_picture("Signal_Value_2")): 
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 6068")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        
                                        video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value_2", Mask_signal_level)
                                    
                                        ## Check if signal value higher than threshold
                                        if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            Input_Signal_TestCase = True
                                            #test_result = "PASS"
                                            NOS_API.test_cases_results_info.input_signal_ok = True
                                        else:
                                            if (NOS_API.test_cases_results_info.channel_boot_up_state):
                                                TEST_CREATION_API.send_ir_rc_command("[EXIT_SIGNAL_VALUE_SCREEN_CHANNEL_BOOT_UP_1]")
                                                if not(NOS_API.grab_picture("Serial_Number_Zone")):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 6123")
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                                video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Serial_Number_Zone", "[Serial_Number]")
                                                video_result_1 = NOS_API.compare_pictures("Info_Zon_Box_2", "Serial_Number_Zone", "[Serial_Number]")
                                                if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):  
                                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                    time.sleep(1)
                                                    TEST_CREATION_API.send_ir_rc_command("[INFO_ZON_BOX_MENU_slow]")
                                                    if not(NOS_API.grab_picture("Serial_Number_Zone_1")):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 6173")
                                                            break
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                            NOS_API.set_error_message("Reboot")
                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                    video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Serial_Number_Zone_1", "[Serial_Number]")
                                                    video_result_1 = NOS_API.compare_pictures("Info_Zon_Box_2", "Serial_Number_Zone_1", "[Serial_Number]")
                                                    if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            Navigation = Navigation + 1
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 6220")
                                                            break
                                                        else:
                                                            if(Navigation == 0):
                                                                Navigation = Navigation + 1
                                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 6225")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                                NOS_API.set_error_message("Navegação")
                                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                if not(NOS_API.grab_picture("Info_Zon_Box")):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 6268")
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                                
                                                hardware_version = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("Info_Zon_Box", "[Hardware_Version]", "[OCR_FILTER]", "Hardware_Version"))
                                                TEST_CREATION_API.write_log_to_file("The extracted Hardware version is: " + hardware_version)
                                                
                                                if (hardware_version == Versao_Hardware_V1):
                                                    Tentativas_Act = 0
                                                    Num_Tentativas_Atualizcao = 6
                                                    while(Tentativas_Act < Num_Tentativas_Atualizcao):
                                                        if (Tentativas_Act == 0):
                                                            NOS_API.Send_Serial_Key("a", "feito")                      
                                                            time.sleep(1) 
                                                        NOS_API.configure_power_switch_by_inspection()
                                                        if not(NOS_API.power_off()):
                                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                            NOS_API.set_error_message("POWER SWITCH")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                                            error_codes = NOS_API.test_cases_results_info.power_switch_error_code
                                                            error_messages = NOS_API.test_cases_results_info.power_switch_error_message
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                        
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                                        end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                            
                                                            return                                           
                                                        time.sleep(2)                                           
                                                        if not(NOS_API.power_on()):
                                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                            NOS_API.set_error_message("POWER SWITCH")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                                            error_codes = NOS_API.test_cases_results_info.power_switch_error_code
                                                            error_messages = NOS_API.test_cases_results_info.power_switch_error_message
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                        
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                                        end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                            
                                                            return    
                                                        time.sleep(12)
                                                        if not(NOS_API.display_custom_dialog("A STB est\xe1 a atualizar?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                                            Tentativas_Act = Tentativas_Act + 1
                                                            if (Tentativas_Act == 5):
                                                                TEST_CREATION_API.write_log_to_file("Doesn't upgrade")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message)
                                                                NOS_API.set_error_message("Não Actualiza") 
                                                                error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                                error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                                NOS_API.deinitialize()
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                            
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                                            end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                                
                                                                return
                                                        else:
                                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                                            Tentativas_Act = 6
                                                    
                                                    result = -2
                                                    delta_time = 0
                                                    start_time = time.localtime()
                                                    while(result == -2 or delta_time < 180):
                                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                        result = NOS_API.wait_for_multiple_pictures(["black_720_ref"], 20, ["[FULL_SCREEN]"], [80])
                                                        if(result == 0 or result == -1):
                                                            time.sleep(5)
                                                            if (NOS_API.is_signal_present_on_video_source()):
                                                                TEST_CREATION_API.send_ir_rc_command("[UP]")
                                                                if not(NOS_API.grab_picture("Channel")):
                                                                    continue
                                                                video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel");
                                                                if (video_result_0 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                    video_result_1 = NOS_API.mask_and_compare_pictures("Banner_720_ref", "Channel", "Banner_720_MASK")
                                                                    video_result_2 = NOS_API.mask_and_compare_pictures("Banner_Eng_720_ref", "Channel", "Banner_720_MASK")
                                                                    video_result_3 = NOS_API.mask_and_compare_pictures("Banner_720_ref_1", "Channel", "Banner_720_MASK")
                                                                    if(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                        NOS_API.test_cases_results_info.channel_boot_up_state = True      
                                                                        #Input_Signal_TestCase = True
                                                                        #test_result = "PASS"
                                                                        delta_time = 100
                                                                        Already_Upgraded = 1
                                                                        break    
                                                                    else:
                                                                        if(Repeat == 0):
                                                                            Repeat = Repeat + 1
                                                                            BreakWhile = True
                                                                            TEST_CREATION_API.write_log_to_file("Noise HDMI. Line 6497")
                                                                            break
                                                                        else:
                                                                            test_result = "FAIL"
                                                                            TEST_CREATION_API.write_log_to_file("Image on HDMI isn't the same of the expected ones")
                                                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message)
                                                                            NOS_API.set_error_message("Video HDMI") 
                                                                            error_codes = NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                                                            error_messages =  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                                                            NOS_API.add_test_case_result_to_file_report(
                                                                                            test_result,
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                                            error_codes,
                                                                                            error_messages)
                                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                                            report_file = ""
                                                                            if (test_result != "PASS"):
                                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                                "",
                                                                                                end_time)
                                                                                NOS_API.upload_file_report(report_file)
                                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                                
                                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                                        test_result,
                                                                                        end_time,
                                                                                        error_codes,
                                                                                        report_file)                
                                                                        
                                                                            ## Return DUT to initial state and de-initialize grabber device
                                                                            NOS_API.deinitialize()
    
                                                                            return
                                                        delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                                    if(BreakWhile):
                                                        break
                                                    if (delta_time > 180):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("No boot. Line 6539")
                                                            break
                                                        else:
                                                            test_result = "FAIL"
                                                            Input_Signal_TestCase = False
                                                            TEST_CREATION_API.write_log_to_file("No boot")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                            NOS_API.set_error_message("Não arranca")
                                                            error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.no_boot_error_message  
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                            
                                                            return                                      
                                                    
                                                    TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p]")
                                                    TEST_CREATION_API.send_ir_rc_command("[SIGNAL_LEVEL_SETTINGS_720p_1]") 
                                                    time.sleep(1)
                                                    if not(NOS_API.grab_picture("Check")):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 6589")
                                                            break
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                            NOS_API.set_error_message("Reboot")
                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                    video_result = NOS_API.compare_pictures("Signal_Value_Ch_ref", "Check", "[Signal_Value_Ch]")  
                                                    video_result_1 = NOS_API.compare_pictures("Signal_Value_Ch_Eng_ref", "Check", "[Signal_Value_Ch]")                     
                                                    if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and test != "Fail"):
                                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                        time.sleep(1)
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Ch_slow]")
                                                        if not(NOS_API.grab_picture("Check")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 6638")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result = NOS_API.compare_pictures("Signal_Value_Ch_ref", "Check", "[Signal_Value_Ch]")  
                                                        video_result_1 = NOS_API.compare_pictures("Signal_Value_Ch_Eng_ref", "Check", "[Signal_Value_Ch]")                     
                                                        if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                Navigation = Navigation + 1
                                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 6685")
                                                                break
                                                            else:
                                                                if(Navigation == 0):
                                                                    Navigation = Navigation + 1
                                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 6690")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                                    NOS_API.set_error_message("Navegação")
                                                                    error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                    Mask_signal_level = "Ch_MASK"
                                                    ref_image = "Signal_Value_Ch_ref"
                                                    
                                                    time.sleep(5)
                                                    
                                                    if not(NOS_API.grab_picture("Signal_Value_3")):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 6736")
                                                            break
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                            NOS_API.set_error_message("Reboot")
                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                    counter = 3
                                                    video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value_3", Mask_signal_level)
                                                    
                                                    ## Check if signal value higher than threshold
                                                    if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                        TEST_CREATION_API.send_ir_rc_command("[OK]")
                                        
                                                        result = NOS_API.wait_for_multiple_pictures(["Installed_Channels_ref"], 15, ["[SIC]"], [80])
                                                        if (result == -2):
                                                            #NOS_API.display_custom_dialog("Perdeu sinal ao capturar imagem", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 6788")
                                                                break
                                                            else:
                                                                Input_Signal_TestCase = False
                                                                test_result = "FAIL"
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                
                                                                return
                                                        if (result != -1):
                                                            TEST_CREATION_API.send_ir_rc_command("[OK]")
                                                        TEST_CREATION_API.send_ir_rc_command("[EXIT_SIGNAL_VALUE_SCREEN_CHANNEL_BOOT_UP]")
                                                        Input_Signal_TestCase = True
                                                        #test_result = "PASS"
                                                        NOS_API.test_cases_results_info.input_signal_ok = True
                                                    else:
                                                        TEST_CREATION_API.send_ir_rc_command("[Inst_Act_New]")
                                                        time.sleep(5)
                                                        ## Perform grab picture
                                                        if not(NOS_API.grab_picture("Signal_Value_4")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 6788")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        counter = 3
                                                        video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value_4", Mask_signal_level)
                                                        
                                                        ## Check if signal value higher than threshold
                                                        if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                            TEST_CREATION_API.send_ir_rc_command("[OK]")
                                        
                                                            result = NOS_API.wait_for_multiple_pictures(["Installed_Channels_ref"], 15, ["[SIC]"], [80])
                                                            if (result == -2):
                                                                #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 6895")
                                                                    break
                                                                else:
                                                                    Input_Signal_TestCase = False
                                                                    test_result = "FAIL"
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                    
                                                                    return
                                                            if (result != -1):
                                                                TEST_CREATION_API.send_ir_rc_command("[OK]")
                                                            TEST_CREATION_API.send_ir_rc_command("[EXIT_SIGNAL_VALUE_SCREEN_CHANNEL_BOOT_UP]")
                                                            Input_Signal_TestCase = True
                                                            #test_result = "PASS"
                                                            NOS_API.test_cases_results_info.input_signal_ok = True
                                                        else:
                                                            NOS_API.display_custom_dialog("Confirme Cabo RF e restantes cabos", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                                            time.sleep(5)
                                                            if not(NOS_API.grab_picture("Signal_Value_5")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 6949")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            
                                                            video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value_5", Mask_signal_level)
                                                        
                                                            ## Check if signal value higher than threshold
                                                            if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                TEST_CREATION_API.send_ir_rc_command("[OK]")
                                        
                                                                result = NOS_API.wait_for_multiple_pictures(["Installed_Channels_ref"], 15, ["[SIC]"], [80])
                                                                if (result == -2):
                                                                    #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        TEST_CREATION_API.write_log_to_file("Image is not displayed on HDMI. Line 7001")
                                                                        break
                                                                    else:
                                                                        Input_Signal_TestCase = False
                                                                        test_result = "FAIL"
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                        
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                        
                                                                        return
                                                                if (result != -1):
                                                                    TEST_CREATION_API.send_ir_rc_command("[OK]")
                                                                TEST_CREATION_API.send_ir_rc_command("[EXIT_SIGNAL_VALUE_SCREEN_CHANNEL_BOOT_UP]")
                                                                Input_Signal_TestCase = True
                                                                Already_Upgraded = 1
                                                                #test_result = "PASS"
                                                                NOS_API.test_cases_results_info.input_signal_ok = True
                                                            else:
                                                                test_result = "FAIL"
                                                                Already_Upgraded = 1
                                                                TEST_CREATION_API.write_log_to_file("Signal value is lower than threshold")
                                        
                                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.input_signal_error_code \
                                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.input_signal_error_message)
                                                                NOS_API.set_error_message("Sem Sinal")
                                                                error_codes = NOS_API.test_cases_results_info.input_signal_error_code
                                                                error_messages = NOS_API.test_cases_results_info.input_signal_error_message
                                                                Repeat = 2
                                                else:
                                                    test_result = "FAIL"
                                                    Already_Upgraded = 1
                                                    TEST_CREATION_API.write_log_to_file("Signal value is lower than threshold")
                            
                                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.input_signal_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.input_signal_error_message)
                                                    NOS_API.set_error_message("Sem Sinal")
                                                    error_codes = NOS_API.test_cases_results_info.input_signal_error_code
                                                    error_messages = NOS_API.test_cases_results_info.input_signal_error_message
                                                    Repeat = 2
                                            else:
                                                video_result = NOS_API.compare_pictures("installation_boot_up_Eng_ref", "Signal_Value_2", "[Installation_Menu_Eng]")
                                                video_result_1 = NOS_API.compare_pictures("installation_boot_up_ref", "Signal_Value_2", "[Installation_Menu]")
                                                
                                                if (video_result >= NOS_API.thres or video_result_1 >= NOS_API.thres):
                                                    Tentativas_Act = 0
                                                    Num_Tentativas_Atualizcao = 6
                                                    while(Tentativas_Act < Num_Tentativas_Atualizcao):
                                                        if (Tentativas_Act == 0):
                                                            NOS_API.Send_Serial_Key("a", "feito")                      
                                                            time.sleep(1)
                                                        NOS_API.configure_power_switch_by_inspection()
                                                        if not(NOS_API.power_off()):
                                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                            NOS_API.set_error_message("POWER SWITCH")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                                            error_codes = NOS_API.test_cases_results_info.power_switch_error_code
                                                            error_messages = NOS_API.test_cases_results_info.power_switch_error_message
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                        
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                                        end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                            
                                                            return                                           
                                                        time.sleep(2)                                           
                                                        if not(NOS_API.power_on()):
                                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                            NOS_API.set_error_message("POWER SWITCH")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                                            error_codes = NOS_API.test_cases_results_info.power_switch_error_code
                                                            error_messages = NOS_API.test_cases_results_info.power_switch_error_message
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                        
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                                        end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                            
                                                            return    
                                                        time.sleep(12)
                                                        if not(NOS_API.display_custom_dialog("A STB est\xe1 a atualizar?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                                            Tentativas_Act = Tentativas_Act + 1
                                                            if (Tentativas_Act == 5):
                                                                TEST_CREATION_API.write_log_to_file("Doesn't upgrade")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message)
                                                                NOS_API.set_error_message("Não Actualiza") 
                                                                error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                                error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                                NOS_API.deinitialize()
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                            
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                                            end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                                
                                                                return
                                                        else:
                                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                                            Tentativas_Act = 6
                                                    
                                                    result = NOS_API.wait_for_multiple_pictures(["installation_boot_up_ref", "installation_boot_up_Eng_ref"], 100, ["[Installation_Menu]", "[Installation_Menu_Eng]"], [NOS_API.thres, NOS_API.thres])
                                                    if (result == -2):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("No boot. Line 7194")
                                                            break
                                                        else:
                                                            test_result = "FAIL"
                                                            TEST_CREATION_API.write_log_to_file("No boot")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                            NOS_API.set_error_message("Não arranca")
                                                            error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.no_boot_error_message  
                                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                            
                                                            return
                                                    if (result != -1):
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                        if not(NOS_API.grab_picture("IR_Picture")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 7240")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result_1 = NOS_API.mask_and_compare_pictures("IR_720_ref", "IR_Picture", "IR_720_MASK")
                                                        video_result_new = NOS_API.mask_and_compare_pictures("IR_720_new_ref", "IR_Picture", "IR_720_MASK")
                                                        if (video_result_1 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_new <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                            time.sleep(1)
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                            if not(NOS_API.grab_picture("IR_Picture")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 7290")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_1 = NOS_API.mask_and_compare_pictures("IR_720_ref", "IR_Picture", "IR_720_MASK")
                                                            video_result_new = NOS_API.mask_and_compare_pictures("IR_720_new_ref", "IR_Picture", "IR_720_MASK")
                                                            if (video_result_1 <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_new <= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    IR_Issue = IR_Issue + 1
                                                                    TEST_CREATION_API.write_log_to_file("IR. Line 7337")
                                                                    break
                                                                else:
                                                                    if(IR_Issue == 0):
                                                                        IR_Issue = IR_Issue + 1
                                                                        TEST_CREATION_API.write_log_to_file("IR. Line 7342")
                                                                        break
                                                                    else:
                                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                                                        NOS_API.set_error_message("IR")
                                                                        test = "Fail"
                                                                        error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.ir_nok_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                        if (video_result_1 > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                            Mask_signal_level = "Inst_MASK"
                                                            ref_image = "Signal_Value_Inst_ref"
                                                        elif (video_result_new > TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                            Mask_signal_level = "Inst_MASK"
                                                            ref_image = "Signal_Value_Inst_new_ref"
                                                    TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_1]")
                                                    
                                                    time.sleep(1)
                                                    if not(NOS_API.grab_picture("Check")):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 7396")
                                                            break
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                            NOS_API.set_error_message("Reboot")
                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                    video_result = NOS_API.compare_pictures("Signal_Value_Inst_ref", "Check", "[Signal_Value_Inst]")
                                                    video_result_1 = NOS_API.compare_pictures("Signal_Value_Inst_ref_1", "Check", "[Signal_Value_Inst]")
                                                    video_result_2 = NOS_API.compare_pictures("Signal_Value_Inst_ref_2", "Check", "[Signal_Value_Inst]")
                                                    if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):                       
                                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                        time.sleep(1)
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Inst]")
                                                        time.sleep(2)
                                                        if not(NOS_API.grab_picture("Check_Again")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 7448")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result = NOS_API.compare_pictures("Signal_Value_Inst_ref", "Check_Again", "[Signal_Value_Inst]")
                                                        video_result_1 = NOS_API.compare_pictures("Signal_Value_Inst_ref_1", "Check_Again", "[Signal_Value_Inst]")
                                                        video_result_2 = NOS_API.compare_pictures("Signal_Value_Inst_ref_2", "Check_Again", "[Signal_Value_Inst]")
                                                        if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_1 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD): 
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                Navigation = Navigation + 1
                                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 7496")
                                                                break
                                                            else:
                                                                if(Navigation == 0):
                                                                    Navigation = Navigation + 1
                                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 7501")
                                                                    break
                                                                else:
                                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                                    NOS_API.set_error_message("Navegação")
                                                                    error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                    time.sleep(3)
                                                    if not(NOS_API.grab_picture("Signal_Value_new")):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 7545")
                                                            break
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                            NOS_API.set_error_message("Reboot")
                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                    counter = 3
                                                    video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value_new", Mask_signal_level)
                                                    
                                                    ## Check if signal value higher than threshold
                                                    if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                        Input_Signal_TestCase = True
                                                        #test_result = "PASS"
                                                        NOS_API.test_cases_results_info.input_signal_ok = True
                                                    else:
                                                        TEST_CREATION_API.send_ir_rc_command("[Inst_Act_New]")
                                                        time.sleep(5)
                                                        ## Perform grab picture
                                                        if not(NOS_API.grab_picture("Signal_Value_new_1")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 7601")
                                                                break
                                                            else:
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        counter = 3
                                                        video_result = NOS_API.mask_and_compare_pictures(ref_image, "Signal_Value_new_1", Mask_signal_level)
                                                        
                                                        ## Check if signal value higher than threshold
                                                        if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                            Input_Signal_TestCase = True
                                                            #test_result = "PASS"
                                                            NOS_API.test_cases_results_info.input_signal_ok = True
                                                        else:
                                                            test_result = "FAIL"
                                                            Already_Upgraded = 1
                                                            TEST_CREATION_API.write_log_to_file("Signal value is lower than threshold")
                                    
                                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.input_signal_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.input_signal_error_message)
                                                            NOS_API.set_error_message("Sem Sinal")
                                                            error_codes = NOS_API.test_cases_results_info.input_signal_error_code
                                                            error_messages = NOS_API.test_cases_results_info.input_signal_error_message
                                                            Repeat = 2
                                                else:
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("Some noise appear on HDMI. Line 7663")
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("Some noise appear on HDMI")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.no_boot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.no_boot_error_message)
                                                        NOS_API.set_error_message("Não arranca")
                                                        error_codes = NOS_API.test_cases_results_info.no_boot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.no_boot_error_message
                                                        test_result = "FAIL"
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                        return
                                
                                if (Already_Upgraded == 0):
                                    if (NOS_API.test_cases_results_info.channel_boot_up_state):
                                        TEST_CREATION_API.send_ir_rc_command("[OK]")
                                        
                                        result = NOS_API.wait_for_multiple_pictures(["Installed_Channels_ref"], 15, ["[SIC]"], [NOS_API.thres])
                                        if (result == -2):
                                            #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 7710")
                                                Input_Signal_TestCase = False
                                                break
                                            else:
                                                Input_Signal_TestCase = False
                                                test_result = "FAIL"
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                
                                                return
                                        if (result != -1):
                                            TEST_CREATION_API.send_ir_rc_command("[OK]")
                                            result_2 = NOS_API.wait_for_multiple_pictures(["Upgrade_ref", "Act_SSU"], 15, ["[FULL_SCREEN]", "[Act_SSU]"], [NOS_API.thres, NOS_API.thres])
                                            if (result_2 == -2):
                                                #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 7758")
                                                    Input_Signal_TestCase = False
                                                    break
                                                else:
                                                    Input_Signal_TestCase = False
                                                    test_result = "FAIL"
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                    
                                                    return
                                            elif (result_2 == -1):
                                                TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                                time.sleep(5)
                                                TEST_CREATION_API.send_ir_rc_command("[First_POWER]")
                                                result_2 = NOS_API.wait_for_multiple_pictures(["Upgrade_ref", "Act_SSU"], 15, ["[FULL_SCREEN]", "[Act_SSU]"], [NOS_API.thres, NOS_API.thres])
                                            if (result_2 == -2):
                                                #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 7808")
                                                    Input_Signal_TestCase = False
                                                    break
                                                else:
                                                    Input_Signal_TestCase = False
                                                    test_result = "FAIL"
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                    
                                                    return
                                            elif (result_2 == 0):
                                                result = 0
                                                while(result == 0):
                                                    time.sleep(2)
                                                    result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                if not(NOS_API.grab_picture("Sw_Upgrade")):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 7859")
                                                        Input_Signal_TestCase = False
                                                        break
                                                    else:
                                                        Input_Signal_TestCase = False
                                                        test_result = "FAIL"
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                                if(video_result >= NOS_API.thres):
                                                    time.sleep(60)
                                            elif (result_2 == 1):
                                                time.sleep(5)
                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                                                    time.sleep(10)
                                                    if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                                                        time.sleep(60)
                                                        if not(NOS_API.grab_picture("After_SW")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 7915")
                                                                Input_Signal_TestCase = False
                                                                break
                                                            else:
                                                                test_result = "FAIL"
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result_3 = NOS_API.mask_and_compare_pictures("installation_boot_up_ref", "After_SW", "File-MASK")
                                                        video_result_4 = NOS_API.mask_and_compare_pictures("installation_boot_up_Eng_ref", "After_SW", "File-MASK_Eng")
                                                        if ((video_result_3 >= NOS_API.thres) or (video_result_4 >= NOS_API.thres)):
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_1]")
                                                            time.sleep(4)
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_2]")
                                                            TEST_CREATION_API.send_ir_rc_command("[OK]")
                                                            time.sleep(2)
                                                            if not(NOS_API.grab_picture("NAGRA")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 7969")
                                                                    Input_Signal_TestCase = False
                                                                    break
                                                                else:
                                                                    test_result = "FAIL"
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_5 = NOS_API.compare_pictures("Upgrade_ref", "NAGRA");
                                                            if (video_result_5 >= NOS_API.thres):
                                                                result = 0
                                                                while(result == 0):
                                                                    time.sleep(2)
                                                                    result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                                if not(NOS_API.grab_picture("Sw_Upgrade_1")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 8021")
                                                                        Input_Signal_TestCase = False
                                                                        break
                                                                    else:
                                                                        test_result = "FAIL"
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade_1");
                                                                if(video_result >= NOS_API.thres):
                                                                    time.sleep(60)
                                                        else:
                                                            if not(NOS_API.grab_picture("NAGRA")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8070")
                                                                    Input_Signal_TestCase = False
                                                                    break
                                                                else:
                                                                    test_result = "FAIL"
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_6 = NOS_API.compare_pictures("Upgrade_ref", "NAGRA");
                                                            if (video_result_6 >= NOS_API.thres):
                                                                result = 0
                                                                while(result == 0):
                                                                    time.sleep(2)
                                                                    result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                                if not(NOS_API.grab_picture("Sw_Upgrade_1")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 8122")
                                                                        Input_Signal_TestCase = False
                                                                        break
                                                                    else:
                                                                        test_result = "FAIL"
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade_1");
                                                                if(video_result >= NOS_API.thres):
                                                                    time.sleep(60)
                                                    else:
                                                        if not(NOS_API.display_custom_dialog("STB em Stand-By?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                                            test_result = "FAIL"
                                                            TEST_CREATION_API.write_log_to_file("Não estava em Stand-By. Doesn't upgrade")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message) 
                                                            NOS_API.set_error_message("Não Actualiza") 
                                                            error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                            error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                        else:
                                                            test_result = "FAIL"
                                                            TEST_CREATION_API.write_log_to_file("Estava em Stand-By. Doesn't upgrade")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message) 
                                                            NOS_API.set_error_message("Não Actualiza") 
                                                            error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                            error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                else:
                                                    test_result = "FAIL"
                                                    TEST_CREATION_API.write_log_to_file("Doesn't upgrade")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message) 
                                                    NOS_API.set_error_message("Não Actualiza") 
                                                    error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                    error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                        
                                        TEST_CREATION_API.send_ir_rc_command("[EXIT_SIGNAL_VALUE_SCREEN_CHANNEL_BOOT_UP]")
                                        if (lang == "Eng"):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            time.sleep(1)
                                            TEST_CREATION_API.send_ir_rc_command("[Set_Lang_Por]")
    
                                            if not(NOS_API.grab_picture("Check_Lang")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8465")
                                                    Input_Signal_TestCase = False
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result = NOS_API.compare_pictures("IR_Ch_720_ref", "Check_Lang", "[Definitions]") 
                                            
                                            if not(video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                time.sleep(1)
                                                TEST_CREATION_API.send_ir_rc_command("[Set_Lang_Por]")
                                                
                                                if not(NOS_API.grab_picture("Check_Lang_again")):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 8516")
                                                        Input_Signal_TestCase = False
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                                
                                                video_result = NOS_API.compare_pictures("IR_Ch_720_ref", "Check_Lang_again", "[Definitions]") 
                                            
                                                if not(video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        Navigation = Navigation + 1
                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 8564")
                                                        Input_Signal_TestCase = False
                                                        break
                                                    else:
                                                        if(Navigation == 0):
                                                            Navigation = Navigation + 1
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 8569")
                                                            Input_Signal_TestCase = False
                                                            break
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                            NOS_API.set_error_message("Navegação")
                                                            error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                            error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                    
                                            TEST_CREATION_API.send_ir_rc_command("[Info_Zon_Box]")
                                    
                                    
                                    else:
                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_2]")
                                        #TEST_CREATION_API.send_ir_rc_command("[OK]")
                                        time.sleep(1)
                                        result = NOS_API.wait_for_multiple_pictures(
                                                        ["Act_SSU", "Act_SSU_576", "Act_SSU_1080", "Act_SSU_Eng", "Act_SSU_576_Eng", "Act_SSU_1080_Eng", "Upgrade_ref", "Inst_error_ref"],
                                                        15,
                                                        ["[Act_SSU]", "[Act_SSU_576]", "[Act_SSU_1080]", "[Act_SSU]", "[Act_SSU_576]", "[Act_SSU_1080]", "[FULL_SCREEN]", "[FULL_SCREEN]"],
                                                        [NOS_API.thres, 60, NOS_API.thres, NOS_API.thres, 60, NOS_API.thres, NOS_API.thres])
                                        if (result >= 0 and result < 6):
                                            time.sleep(5)
                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                            if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                                                time.sleep(10)
                                                if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                                                    time.sleep(60)
                                                    if not(NOS_API.grab_picture("After_SW")):
                                                        if(Repeat == 0):
                                                            Repeat = Repeat + 1
                                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 8274")
                                                            break
                                                        else:
                                                            test_result = "FAIL"
                                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                            NOS_API.set_error_message("Reboot")
                                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                                    video_result_3 = NOS_API.mask_and_compare_pictures("installation_boot_up_ref", "After_SW", "File-MASK")
                                                    video_result_4 = NOS_API.mask_and_compare_pictures("installation_boot_up_Eng_ref", "After_SW", "File-MASK_Eng")
                                                    if ((video_result_3 >= NOS_API.thres) or (video_result_4 >= NOS_API.thres)):
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_1]")
                                                        time.sleep(4)
                                                        TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_2]")
                                                        TEST_CREATION_API.send_ir_rc_command("[OK]")
                                                        time.sleep(2)
                                                        if not(NOS_API.grab_picture("NAGRA")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 8328")
                                                                break
                                                            else:
                                                                test_result = "FAIL"
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result_5 = NOS_API.compare_pictures("Upgrade_ref", "NAGRA");
                                                        if (video_result_5 >= NOS_API.thres):
                                                            result = 0
                                                            while(result == 0):
                                                                time.sleep(2)
                                                                result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                                            if not(NOS_API.grab_picture("Sw_Upgrade_1")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8380")
                                                                    break
                                                                else:
                                                                    test_result = "FAIL"
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade_1");
                                                            if(video_result >= NOS_API.thres):
                                                                time.sleep(60)
                                                    else:
                                                        if not(NOS_API.grab_picture("NAGRA")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 8429")
                                                                break
                                                            else:
                                                                test_result = "FAIL"
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result_6 = NOS_API.compare_pictures("Upgrade_ref", "NAGRA");
                                                        if (video_result_6 >= NOS_API.thres):
                                                            result = 0
                                                            while(result == 0):
                                                                time.sleep(2)
                                                                result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                                            if not(NOS_API.grab_picture("Sw_Upgrade_1")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8481")
                                                                    break
                                                                else:
                                                                    test_result = "FAIL"
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade_1");
                                                            if(video_result >= NOS_API.thres):
                                                                time.sleep(60)
                                                else:
                                                    test_result = "FAIL"
                                                    TEST_CREATION_API.write_log_to_file("Doesn't upgrade")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message) 
                                                    NOS_API.set_error_message("Não Actualiza") 
                                                    error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                    error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            else:
                                                test_result = "FAIL"
                                                TEST_CREATION_API.write_log_to_file("Doesn't upgrade")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message) 
                                                NOS_API.set_error_message("Não Actualiza") 
                                                error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                                error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                                
                                        elif (result == 6):
                                            result = 0
                                            while(result == 0):
                                                time.sleep(2)
                                                result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                            NOS_API.test_cases_results_info.DidUpgrade = 1
                                            if not(NOS_API.grab_picture("Sw_Upgrade")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8616")
                                                    break
                                                else:
                                                    test_result = "FAIL"
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                            if(video_result >= NOS_API.thres):
                                                time.sleep(60)
                                        elif(result == 7):
                                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Inst]")
                                            time.sleep(5)
                                            TEST_CREATION_API.send_ir_rc_command("[Down]")
                                            TEST_CREATION_API.send_ir_rc_command("[Inst_Act_New]")
                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_2]")
                                            TEST_CREATION_API.send_ir_rc_command("[OK]")
                                            time.sleep(1)
                                            if not(NOS_API.grab_picture("Sw_Upgrade")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8676")
                                                    break
                                                else:
                                                    test_result = "FAIL"
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                            video_result_1 = NOS_API.compare_pictures("Act_SSU", "Sw_Upgrade", "[Act_SSU]");
                                            video_result_2 = NOS_API.compare_pictures("Act_SSU_Eng", "Sw_Upgrade", "[Act_SSU]");
                                            if (video_result >= NOS_API.thres):
                                                result = 0
                                                while(result == 0):
                                                    time.sleep(2)
                                                    result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                if not(NOS_API.grab_picture("Sw_Upgrade")):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 8730")
                                                        break
                                                    else:
                                                        test_result = "FAIL"
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade");
                                                if(video_result >= NOS_API.thres):
                                                    time.sleep(60)
                                            elif (video_result_1 >= NOS_API.thres or video_result_2 >= NOS_API.thres):
                                                time.sleep(5)
                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                                                    time.sleep(10)
                                                    if (NOS_API.wait_for_signal_sw_upgrade_thomson(600)):
                                                        time.sleep(60)                                                
                                                        if not(NOS_API.grab_picture("After_SW")):
                                                            if(Repeat == 0):
                                                                Repeat = Repeat + 1
                                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 8785")
                                                                break
                                                            else:
                                                                test_result = "FAIL"
                                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                NOS_API.set_error_message("Reboot")
                                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                report_file = ""    
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                    
                                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                                            test_result,
                                                                            end_time,
                                                                            error_codes,
                                                                            report_file)
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                return
                                                        video_result_3 = NOS_API.compare_pictures("installation_boot_up_Eng_ref", "After_SW")
                                                        video_result_4 = NOS_API.compare_pictures("installation_boot_up_ref", "After_SW")
                                                        if ((video_result_3 >= NOS_API.thres) or (video_result_4 >= NOS_API.thres)):
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_0]")
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_1]")
                                                            time.sleep(4)
                                                            TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_2]")
                                                            TEST_CREATION_API.send_ir_rc_command("[OK]")
                                                            time.sleep(2)
                                                            if not(NOS_API.grab_picture("NAGRA")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8839")
                                                                    break
                                                                else:
                                                                    test_result = "FAIL"
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_5 = NOS_API.compare_pictures("Upgrade_ref", "NAGRA");
                                                            if (video_result_5 >= NOS_API.thres):
                                                                result = 0
                                                                while(result == 0):
                                                                    time.sleep(2)
                                                                    result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                                if not(NOS_API.grab_picture("Sw_Upgrade_1")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 8891")
                                                                        break
                                                                    else:
                                                                        test_result = "FAIL"
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade_1");
                                                                if(video_result >= NOS_API.thres):
                                                                    time.sleep(60)
                                                        else:
                                                            if not(NOS_API.grab_picture("NAGRA")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 8940")
                                                                    break
                                                                else:
                                                                    test_result = "FAIL"
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            video_result_6 = NOS_API.compare_pictures("Upgrade_ref", "NAGRA");
                                                            if (video_result_6 >= NOS_API.thres):
                                                                result = 0
                                                                while(result == 0):
                                                                    time.sleep(2)
                                                                    result = NOS_API.wait_for_multiple_pictures(["Upgrade_ref"], 5, ["[FULL_SCREEN]"], [NOS_API.thres])
                                                                NOS_API.test_cases_results_info.DidUpgrade = 1
                                                                if not(NOS_API.grab_picture("Sw_Upgrade_1")):
                                                                    if(Repeat == 0):
                                                                        Repeat = Repeat + 1
                                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 8992")
                                                                        break
                                                                    else:
                                                                        test_result = "FAIL"
                                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                        NOS_API.set_error_message("Reboot")
                                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                        
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                                video_result = NOS_API.compare_pictures("Upgrade_ref", "Sw_Upgrade_1");
                                                                if(video_result >= NOS_API.thres):
                                                                    time.sleep(60)
                                                
                            else:
                                break
                        if(BreakWhile):
                            continue
                    else:
                        #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                        if(Repeat == 0):
                            Repeat = Repeat + 1
                            TEST_CREATION_API.write_log_to_file("Reboot. Line 8481")
                            continue
                        else:
                            Repeat = 2
                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                            NOS_API.set_error_message("Reboot")
                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                    
                    if (NOS_API.test_cases_results_info.DidUpgrade == 1):
                        NOS_API.Send_Serial_Key("d", "feito") 
                
            ##############################################################################################################################################################################################################################    
            ###############################################################################################STB Info#######################################################################################################################    
            ##############################################################################################################################################################################################################################
                    
                if(Input_Signal_TestCase): 
                    TEST_CREATION_API.write_log_to_file("####STB Info####")
                
                    ## Set test result default to FAIL
                    test_result = "FAIL"
                    test_result_sn = False
                    STB_INFO_Result = False
                    test_result_ver = False 
                    logistic_serial_number = "-"
                    firmware_version = "-"
                    nagra_guide_version = "-"
                    Signal_Power = "-"
                    Signal_Qual = "-"
                    cas_id_number = "-"
                    sc_number = "-"
                    signal_strength_ver = "-"
                    ber_ver = "-"
                    signal_strength_hor = "-"
                    ber_hor = "-"
                    error_codes = ""
                    error_messages = ""
                    counter = 0
                    result = 0
                    delta_time = 0
                    #FIRMWARE_VERSION_PROD_0249 = NOS_API.Firmware_Version_DSR_8151
                    FIRMWARE_VERSION_PROD_024A = NOS_API.Firmware_Version_DSR_8151_new
                    nagra_guide_version_Prod = NOS_API.Nagra_Guide_Version_DSR_8151
                    SIGNAL_STRENGTH_THRESHOLD_LOW = NOS_API.SIGNAL_STRENGTH_THRESHOLD_LOW_DSR_8151
                    SIGNAL_STRENGTH_THRESHOLD_HIGH = NOS_API.SIGNAL_STRENGTH_THRESHOLD_HIGH_DSR_8151
                    BER_THRESHOLD = NOS_API.BER_THRESHOLD_DSR_8151
                    ## Get scanned STB Barcode
                    scanned_serial_number = NOS_API.remove_whitespaces(NOS_API.test_cases_results_info.s_n_using_barcode)
    
                    if (NOS_API.is_signal_present_on_video_source_PaceDSR8151()):  
                        TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                        if not(NOS_API.grab_picture("Channel")):
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 9145")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                
                                NOS_API.add_test_case_result_to_file_report(
                                                test_result,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                error_codes,
                                                error_messages)
                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                report_file = ""    
                                if (test_result != "PASS"):
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                
                                ## Update test result
                                TEST_CREATION_API.update_test_result(test_result)
                            
                                ## Return DUT to initial state and de-initialize grabber device
                                NOS_API.deinitialize()
                                return
                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                        if (video_height == "720"):
                            video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel");
                        elif (video_height == "576"):
                            video_result_0 = NOS_API.compare_pictures("black_576_ref", "Channel");
                        elif (video_height == "1080"):
                            video_result_0 = NOS_API.compare_pictures("black_1080_ref", "Channel");
                        if (video_result_0 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                            start_time = time.localtime()
                            while((result == 0 or result == 1 or result == 2) and delta_time < 120):
                                time.sleep(2)
                                result = NOS_API.wait_for_multiple_pictures(["black_720_ref", "black_720_ref", "black_720_ref"], 5, ["[FULL_SCREEN]", "[FULL_SCREEN_576]", "[FULL_SCREEN_1080]"], [80])
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                            #time.sleep(120)
                            if not(NOS_API.grab_picture("Channel_1")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 9203")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            if (video_height == "720"):
                                video_result_0 = NOS_API.compare_pictures("black_720_ref", "Channel_1");
                            elif (video_height == "576"):
                                video_result_0 = NOS_API.compare_pictures("black_576_ref", "Channel_1");
                            elif (video_height == "1080"):
                                video_result_0 = NOS_API.compare_pictures("black_1080_ref", "Channel_1");
                            if (video_result_0 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 9253")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                    report_file = ""
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                    return
                        ## Navigate to the Info ZON box menu
                        time.sleep(1)
                        if not(NOS_API.test_cases_results_info.channel_boot_up_state):
                            video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                            if (video_height != "720"):
                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                time.sleep(1)
                                TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720]")
                                video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                if (video_height != "720"):
                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                    time.sleep(1)
                                    TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_720_slow]")    
                                    video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                                    if (video_height != "720"):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Resolution = Resolution + 1
                                            TEST_CREATION_API.write_log_to_file("Resolução. Line 9313")
                                            continue
                                        else:
                                            if(Resolution):
                                                Resolution = Resolution + 1
                                                TEST_CREATION_API.write_log_to_file("Resolução. Line 9318")
                                                continue
                                            else:
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.resolution_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.resolution_error_message)
                                                error_codes = NOS_API.test_cases_results_info.resolution_error_code
                                                error_messages = NOS_API.test_cases_results_info.resolution_error_message
                                                NOS_API.set_error_message("Resolução")
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                time.sleep(1)
                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                            if not(NOS_API.grab_picture("Inst_Error_check")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 9362")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result = NOS_API.compare_pictures("Inst_error_ref", "Inst_Error_check")
                            if (video_result >= NOS_API.thres):
                                TEST_CREATION_API.send_ir_rc_command("[Left]")
                                TEST_CREATION_API.send_ir_rc_command("[Left]")
                                TEST_CREATION_API.send_ir_rc_command("[Left]")
                                TEST_CREATION_API.send_ir_rc_command("[Left]")
                                TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_Inst]")
                                time.sleep(5)
                                TEST_CREATION_API.send_ir_rc_command("[INSTALLATION_BOOT_UP_SEQUENCE_2]")
                                time.sleep(2)
                                TEST_CREATION_API.send_ir_rc_command("[OK]")
                                time.sleep(3)                  
                            TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                            time.sleep(1)
                            TEST_CREATION_API.send_ir_rc_command("[INFO_ZON_BOX_MENU]")
                        if not(NOS_API.grab_picture("Serial_Number_Zone")):
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 9421")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                
                                NOS_API.add_test_case_result_to_file_report(
                                                test_result,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                error_codes,
                                                error_messages)
                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                report_file = ""    
                                if (test_result != "PASS"):
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                
                                ## Update test result
                                TEST_CREATION_API.update_test_result(test_result)
                            
                                ## Return DUT to initial state and de-initialize grabber device
                                NOS_API.deinitialize()
                                return
                        video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Serial_Number_Zone", "[Serial_Number]")
                        video_result_old = NOS_API.compare_pictures("Info_Zon_Box_2", "Serial_Number_Zone", "[Serial_Number]")
                        if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_old < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                            time.sleep(1)
                            TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                            TEST_CREATION_API.send_ir_rc_command("[INFO_ZON_BOX_MENU]")
                            if not(NOS_API.grab_picture("Serial_Number_Zone_1")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 9472")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Serial_Number_Zone_1", "[Serial_Number]")
                            video_result_old = NOS_API.compare_pictures("Info_Zon_Box_2", "Serial_Number_Zone_1", "[Serial_Number]")
                            if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_old < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                time.sleep(1)
                                TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                TEST_CREATION_API.send_ir_rc_command("[INFO_ZON_BOX_MENU_slow]")
                                if not(NOS_API.grab_picture("Serial_Number_Zone_2")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 9523")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Serial_Number_Zone_2", "[Serial_Number]")
                                video_result_old = NOS_API.compare_pictures("Info_Zon_Box_2", "Serial_Number_Zone_2", "[Serial_Number]")
                                if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_old < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    if (TEST_CREATION_API.compare_pictures("Serial_Number_Zone_1", "Serial_Number_Zone_2")):
                                        #NOS_API.display_custom_dialog("STB bloqueou??", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("STB Blocks. Line 9570")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB Blocks")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                            NOS_API.set_error_message("STB bloqueou")
                                            error_codes = NOS_API.test_cases_results_info.block_error_code
                                            error_messages = NOS_API.test_cases_results_info.block_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                            return
                                    else:
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 9615")
                                            continue
                                        else:
                                            if(Navigation): 
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 9621")
                                                continue 
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                NOS_API.set_error_message("Navegação")
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                        while (counter < 3):
                            ## Perform grab picture
                            if not(NOS_API.grab_picture("Info_Zon_Box")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 9666")
                                    break
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            counter = 3
                            ## Extract serial number from image
                            logistic_serial_number = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("Info_Zon_Box", "[SERIAL_NUMBER]", "[OCR_FILTER]"))
                            NOS_API.test_cases_results_info.s_n = logistic_serial_number
                            
                            ## Check if logistic serial number is the same as scanned serial number
                            if (NOS_API.ignore_zero_letter_o_during_comparation(logistic_serial_number, scanned_serial_number)):
                    
                                NOS_API.test_cases_results_info.s_n_ok = True
                    
                                ## Set test result to PASS
                                test_result_sn = True
                                TEST_CREATION_API.write_log_to_file("Logistic serial number (from menu):\t" + logistic_serial_number, "logistic_serial_number.txt")
                    
                                ## Extract NagraGuide version from image
                                nagra_guide_version = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("Info_Zon_Box", "[NAGRA_GUIDE_VERSION]", "[OCR_FILTER]", "nagra_guide_version"))
                                
                                ## Extract SW Version from image
                                firmware_version = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("Info_Zon_Box", "[FIRMWARE_VERSION]", "[OCR_FILTER]", "firmware_version"))
                                
                                TEST_CREATION_API.write_log_to_file("The extracted nagra guide version after power is: " + nagra_guide_version)
                                TEST_CREATION_API.write_log_to_file("The extracted firmware version after power is: " + firmware_version)
                                
                                if not(nagra_guide_version == nagra_guide_version_Prod and firmware_version == FIRMWARE_VERSION_PROD_024A):
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    if (NOS_API.is_signal_present_on_video_source()):
                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                        if (NOS_API.is_signal_present_on_video_source()):
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                            + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                            NOS_API.set_error_message("IR")
                                            error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                            error_messages = NOS_API.test_cases_results_info.ir_nok_error_message                            
                                            test = "Fail"
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    time.sleep(10)
                                    TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                    if not(NOS_API.is_signal_present_on_video_source()):
                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                        if not(NOS_API.is_signal_present_on_video_source()):
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ir_nok_error_code \
                                            + "; Error message: " + NOS_API.test_cases_results_info.ir_nok_error_message)
                                            NOS_API.set_error_message("IR")
                                            error_codes = NOS_API.test_cases_results_info.ir_nok_error_code
                                            error_messages = NOS_API.test_cases_results_info.ir_nok_error_message                            
                                            test = "Fail"
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    time.sleep(10)
                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                    time.sleep(1)
                                    TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                    TEST_CREATION_API.send_ir_rc_command("[INFO_ZON_BOX_MENU]")
                                    if not(NOS_API.grab_picture("Check_versions_again")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 9421")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Check_versions_again", "[Serial_Number]")
                                    video_result_old = NOS_API.compare_pictures("Info_Zon_Box_2", "Check_versions_again", "[Serial_Number]")
                                    if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_old < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                        time.sleep(1)
                                        TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                        TEST_CREATION_API.send_ir_rc_command("[INFO_ZON_BOX_MENU]")
                                        if not(NOS_API.grab_picture("Check_versions_again_1")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 9472")
                                                continue
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Check_versions_again_1", "[Serial_Number]")
                                        video_result_old = NOS_API.compare_pictures("Info_Zon_Box_2", "Check_versions_again_1", "[Serial_Number]")
                                        if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_old < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            time.sleep(1)
                                            TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                            TEST_CREATION_API.send_ir_rc_command("[INFO_ZON_BOX_MENU_slow]")
                                            if not(NOS_API.grab_picture("Check_versions_again_2")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 9523")
                                                    continue
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result = NOS_API.compare_pictures("Info_Zon_Box_1", "Check_versions_again_2", "[Serial_Number]")
                                            video_result_old = NOS_API.compare_pictures("Info_Zon_Box_2", "Check_versions_again_2", "[Serial_Number]")
                                            if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_old < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                if (TEST_CREATION_API.compare_pictures("Check_versions_again_1", "Check_versions_again_2")):
                                                    #NOS_API.display_custom_dialog("STB bloqueou??", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("STB Blocks. Line 9570")
                                                        continue
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("STB Blocks")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                                        NOS_API.set_error_message("STB bloqueou")
                                                        error_codes = NOS_API.test_cases_results_info.block_error_code
                                                        error_messages = NOS_API.test_cases_results_info.block_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                        report_file = ""
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                        return
                                                else:
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        Navigation = Navigation + 1
                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 9615")
                                                        continue
                                                    else:
                                                        if(Navigation): 
                                                            Navigation = Navigation + 1
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 9621")
                                                            continue 
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                            NOS_API.set_error_message("Navegação")
                                                            error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                            error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                    
                                    if not(NOS_API.grab_picture("Versions_After_Power")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 9421")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    
                                    ## Extract NagraGuide version from image
                                    nagra_guide_version = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("Versions_After_Power", "[NAGRA_GUIDE_VERSION]", "[OCR_FILTER]", "nagra_guide_version_after_power"))
                                    
                                    ## Extract SW Version from image
                                    firmware_version = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("Versions_After_Power", "[FIRMWARE_VERSION]", "[OCR_FILTER]", "firmware_version_after_power"))
                                    
                                    TEST_CREATION_API.write_log_to_file("The extracted nagra guide version after power is: " + nagra_guide_version)
                                    TEST_CREATION_API.write_log_to_file("The extracted firmware version after power is: " + firmware_version)
                                    
                                    if not(nagra_guide_version == nagra_guide_version_Prod and firmware_version == FIRMWARE_VERSION_PROD_024A):
                                        Repeat = 2
                                        test_result_sn = False
                                        TEST_CREATION_API.write_log_to_file("Doesn't upgrade")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.upgrade_nok_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.upgrade_nok_error_message) 
                                        NOS_API.set_error_message("Não Actualiza") 
                                        error_codes =  NOS_API.test_cases_results_info.upgrade_nok_error_code
                                        error_messages = NOS_API.test_cases_results_info.upgrade_nok_error_message
                                        test_result = "FAIL"
                                        
                                NOS_API.test_cases_results_info.firmware_version = firmware_version
                                NOS_API.test_cases_results_info.nagra_guide_version = nagra_guide_version
                    
                            else:
                                Repeat = 2
                                TEST_CREATION_API.write_log_to_file("Logistic serial number is not the same as scanned serial number")
                                
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.wrong_s_n_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.wrong_s_n_error_message \
                                                                        + "; OCR: " + str(logistic_serial_number))
                                NOS_API.set_error_message("S/N")
                                error_codes = NOS_API.test_cases_results_info.wrong_s_n_error_code
                                error_messages = NOS_API.test_cases_results_info.wrong_s_n_error_message               
                    else:
                        #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                        if(Repeat == 0):
                            Repeat = Repeat + 1
                            TEST_CREATION_API.write_log_to_file("Reboot. Line 9765")
                            continue
                        else:
                            Repeat = 2
                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                            NOS_API.set_error_message("Reboot")
                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                            
                    ##################################################################################################################
                        
                    if(test_result_sn):
                        counter = 0
                        if (NOS_API.is_signal_present_on_video_source_PaceDSR8151()):
                            TEST_CREATION_API.send_ir_rc_command("[NAVIGATE_SC_MENU_FROM_INFO_ZON_BOX_MENU]")
                            while (counter < 3):   
                                if not(NOS_API.grab_picture("Signal_Info")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 9876")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                                compare_result = NOS_API.compare_pictures("Info_Signal_Info_ref", "Signal_Info", "[Right_Page]")                            
                                if not(compare_result >= NOS_API.thres):
                                    TEST_CREATION_API.send_ir_rc_command("[NAVIGATE_SC_MENU_FROM_INFO_ZON_BOX_MENU]")
                                    if not(NOS_API.grab_picture("Signal_Info")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 10293")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    compare_result = NOS_API.compare_pictures("Info_Signal_Info_ref", "Signal_Info", "[Right_Page]")                            
                                    if not(compare_result >= NOS_API.thres):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10339")
                                            break
                                        else:
                                            if(Navigation): 
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10344")
                                                break 
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                NOS_API.set_error_message("Navegação")
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                                
                                Signal_Power = NOS_API.replace_missed_chars(TEST_CREATION_API.OCR_recognize_text("Signal_Info", "[Signal_Power]", "[OCR_FILTER]", "Signal_Power"))
                                NOS_API.test_cases_results_info.power_percent = str(Signal_Power)
                                Signal_Qual = NOS_API.replace_missed_chars(TEST_CREATION_API.OCR_recognize_text("Signal_Info", "[Signal_Qual]", "[OCR_FILTER]", "Signal_Qual"))
                                NOS_API.test_cases_results_info.ber_percent = str(Signal_Qual)
                                
                                TEST_CREATION_API.write_log_to_file("The extracted Signal Power is: " + Signal_Power +"%")
                                TEST_CREATION_API.write_log_to_file("The extracted Signal Quality is: " + Signal_Qual +"%")
                                
                                TEST_CREATION_API.send_ir_rc_command("[NAVIGATE_SC_MENU_FROM_INFO_ZON_BOX_MENU]")
                                
                                ## Perform grab picture
                                if not(NOS_API.grab_picture("sc_info")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 9841")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                                compare_result = NOS_API.compare_pictures("sc_info_ref", "sc_info", "[Right_Page]")                            
                                if not(compare_result >= NOS_API.thres):
                                    TEST_CREATION_API.send_ir_rc_command("[NAVIGATE_SC_MENU_FROM_INFO_ZON_BOX_MENU]")
                                    if not(NOS_API.grab_picture("sc_info")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 10447")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    compare_result = NOS_API.compare_pictures("sc_info_ref", "sc_info", "[Right_Page]")                            
                                    if not(compare_result >= NOS_API.thres):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10493")
                                            continue
                                        else:
                                            if(Navigation): 
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10498")
                                                continue 
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                NOS_API.set_error_message("Navegação")
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                            
                                
                                counter = 3
                                video_result = NOS_API.mask_and_compare_pictures("sc_info_ref", "sc_info", "sc_info_mask")
                        
                                ## Check is SC not detected
                                if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                
                                    NOS_API.display_dialog("Retire e volte a colocar o cart\xe3o", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                    
                                    time.sleep(12)
                                    
                                    TEST_CREATION_API.send_ir_rc_command("[REDO_SC]")
                                    
                                    ## Perform grab picture
                                    try:
                                        TEST_CREATION_API.grab_picture("sc_info")
                                    except: 
                                        time.sleep(5)
                                        try:
                                            TEST_CREATION_API.grab_picture("sc_info")
                                        except:
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 9902")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                test_result = "FAIL"
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                            
                            
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
    
                                                return    
                                    
                                    compare_result = NOS_API.compare_pictures("sc_info_ref", "sc_info", "[Right_Page]")                            
                                    if not(compare_result >= NOS_API.thres):
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                        time.sleep(1)
                                        TEST_CREATION_API.send_ir_rc_command("[SMART_CARD_MENU]")
                                        if not(NOS_API.grab_picture("sc_info")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 10447")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        compare_result = NOS_API.compare_pictures("sc_info_ref", "sc_info", "[Right_Page]")                            
                                        if not(compare_result >= NOS_API.thres):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10493")
                                                continue
                                            else:
                                                if(Navigation): 
                                                    Navigation = Navigation + 1
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10498")
                                                    continue 
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                    NOS_API.set_error_message("Navegação")
                                                    error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                    error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                           
                                    
                                    video_result = NOS_API.mask_and_compare_pictures("sc_info_ref", "sc_info", "sc_info_mask");
                                    
                                    ## Check is SC not detected
                                    if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        NOS_API.display_dialog("Substitua o cart\xe3o e de seguida pressiona Continuar", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                    
                                        time.sleep(12)
                                        
                                        TEST_CREATION_API.send_ir_rc_command("[REDO_SC]")
                                        
                                        ## Perform grab picture
                                        try:
                                            TEST_CREATION_API.grab_picture("sc_info")
                                        except: 
                                            time.sleep(5)
                                            try:
                                                TEST_CREATION_API.grab_picture("sc_info")
                                            except:
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 9902")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    test_result = "FAIL"
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                    report_file = ""
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                
                                
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
        
                                                    return    
                                        
                                        compare_result = NOS_API.compare_pictures("sc_info_ref", "sc_info", "[Right_Page]")                            
                                        if not(compare_result >= NOS_API.thres):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            time.sleep(1)
                                            TEST_CREATION_API.send_ir_rc_command("[SMART_CARD_MENU]")
                                            if not(NOS_API.grab_picture("sc_info")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 10447")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            compare_result = NOS_API.compare_pictures("sc_info_ref", "sc_info", "[Right_Page]")                            
                                            if not(compare_result >= NOS_API.thres):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    Navigation = Navigation + 1
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10493")
                                                    continue
                                                else:
                                                    if(Navigation): 
                                                        Navigation = Navigation + 1
                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10498")
                                                        continue 
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                        NOS_API.set_error_message("Navegação")
                                                        error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                        error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                               
                                        
                                        video_result = NOS_API.mask_and_compare_pictures("sc_info_ref", "sc_info", "sc_info_mask");
                                        
                                    ## Check is SC not detected
                                    if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        TEST_CREATION_API.write_log_to_file("Smart card is not detected")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.sc_not_detected_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.sc_not_detected_error_message)
                                        NOS_API.set_error_message("SmartCard")
                                        error_codes = NOS_API.test_cases_results_info.sc_not_detected_error_code
                                        error_messages = NOS_API.test_cases_results_info.sc_not_detected_error_message
                                        Repeat = 2
                                    else:
                            
                                        ## Extract text from image
                                        sc_number = TEST_CREATION_API.OCR_recognize_text("sc_info", "[SC_NUMBER]", "[OCR_FILTER]", "sc_number")
                                        cas_id_number = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("sc_info", "[CAS_ID_NUMBER]", "[OCR_FILTER]", "cas_id_number"))
                            
                                        NOS_API.test_cases_results_info.sc_number = sc_number
                                        NOS_API.test_cases_results_info.cas_id_number = cas_id_number
                            
                                        TEST_CREATION_API.write_log_to_file("The extracted sc number is: " + sc_number)
                                        TEST_CREATION_API.write_log_to_file("The extracted cas id number is: " + cas_id_number)
                            
                                        NOS_API.update_test_slot_comment("SC number: " + NOS_API.test_cases_results_info.sc_number \
                                                                                + "; cas id number: " + NOS_API.test_cases_results_info.cas_id_number)
                            
                                        ## System must compare CAS ID number with the CAS ID number previuosly scanned by barcode scanner
                                        if (NOS_API.ignore_zero_letter_o_during_comparation(cas_id_number, NOS_API.test_cases_results_info.cas_id_using_barcode)):
                                            STB_INFO_Result = True
                                            NOS_API.test_cases_results_info.correct_cas_id_number = True
                                        else:
                                            Repeat = 2
                                            TEST_CREATION_API.write_log_to_file("CAS ID number and CAS ID number previuosly scanned by barcode scanner is not the same")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.wrong_cas_id_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.wrong_cas_id_error_message \
                                                                                + "; OCR: " + str(cas_id_number))
                                            NOS_API.set_error_message("CAS ID")
                                            error_codes = NOS_API.test_cases_results_info.wrong_cas_id_error_code
                                            error_messages = NOS_API.test_cases_results_info.wrong_cas_id_error_message            
                                else:                       
                                    ## Extract text from image
                                    sc_number = TEST_CREATION_API.OCR_recognize_text("sc_info", "[SC_NUMBER]", "[OCR_FILTER]", "sc_number")
                                    cas_id_number = NOS_API.remove_whitespaces(TEST_CREATION_API.OCR_recognize_text("sc_info", "[CAS_ID_NUMBER]", "[OCR_FILTER]", "cas_id_number"))
                        
                                    NOS_API.test_cases_results_info.sc_number = sc_number
                                    NOS_API.test_cases_results_info.cas_id_number = cas_id_number
                        
                                    TEST_CREATION_API.write_log_to_file("The extracted sc number is: " + sc_number)
                                    TEST_CREATION_API.write_log_to_file("The extracted cas id number is: " + cas_id_number)
                        
                                    NOS_API.update_test_slot_comment("SC number: " + NOS_API.test_cases_results_info.sc_number \
                                                                            + "; cas id number: " + NOS_API.test_cases_results_info.cas_id_number)
                        
                                    ## System must compare CAS ID number with the CAS ID number previuosly scanned by barcode scanner
                                    if (NOS_API.ignore_zero_letter_o_during_comparation(cas_id_number, NOS_API.test_cases_results_info.cas_id_using_barcode)):
                                        STB_INFO_Result = True
                                        NOS_API.test_cases_results_info.correct_cas_id_number = True
                                    else:
                                        Repeat = 2
                                        TEST_CREATION_API.write_log_to_file("CAS ID number and CAS ID number previuosly scanned by barcode scanner is not the same")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.wrong_cas_id_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.wrong_cas_id_error_message \
                                                                            + "; OCR: " + str(cas_id_number))
                                        NOS_API.set_error_message("CAS ID")
                                        error_codes = NOS_API.test_cases_results_info.wrong_cas_id_error_code
                                        error_messages = NOS_API.test_cases_results_info.wrong_cas_id_error_message                 
                        else:
                            #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 10015")
                                continue
                            else:
                                Repeat = 2
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
            ################################################################################################## Ver_Hor Channel  ################################################################################################################
                    
                    if(STB_INFO_Result):
                        if (NOS_API.is_signal_present_on_video_source_PaceDSR8151()):
                            counter = 0
                            video_result = 0
                            TEST_CREATION_API.send_ir_rc_command("[Ver_Hor_Check]")
                            time.sleep(2)
                            if not(NOS_API.grab_picture("Vertical_Zone")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 10037")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result = NOS_API.compare_pictures("Signal_Info_ref", "Vertical_Zone", "[Ver_Pol_Zone]")
                            if (video_result < NOS_API.thres):
                                TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                time.sleep(1)
                                TEST_CREATION_API.send_ir_rc_command("[ZAP_SEQUENCE]")
                                if not(NOS_API.grab_picture("Vertical_Zone_1")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 10086")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.compare_pictures("Signal_Info_ref", "Vertical_Zone_1", "[Ver_Pol_Zone]")
                                if (video_result < NOS_API.thres):
                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                    time.sleep(1)
                                    TEST_CREATION_API.send_ir_rc_command("[ZAP_SEQUENCE_slow]")
                                    if not(NOS_API.grab_picture("Vertical_Zone_2")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 10135")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Signal_Info_ref", "Vertical_Zone_2", "[Ver_Pol_Zone]")
                                    if (video_result < NOS_API.thres):
                                        if (TEST_CREATION_API.compare_pictures("Vertical_Zone_1", "Vertical_Zone_2")):
                                            #NOS_API.display_custom_dialog("STB bloqueou", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("STB Blocks. Line 10181")
                                                continue
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB Blocks")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                                NOS_API.set_error_message("STB bloqueou")
                                                error_codes = NOS_API.test_cases_results_info.block_error_code
                                                error_messages = NOS_API.test_cases_results_info.block_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                return
                                        else:
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10181")
                                                continue
                                            else:
                                                if(Navigation):
                                                    Navigation = Navigation + 1
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10181")
                                                    continue
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                    NOS_API.set_error_message("Navegação")
                                                    error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                    error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                            while (counter < 3):
                                counter = 3
                                ## Perform grab picture
                                if not(NOS_API.grab_picture("Signal_Info_Vertical")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 10278")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                if not (TEST_CREATION_API.compare_pictures("Signal_Info_ref", "Signal_Info_Vertical", "[CubaV_Check]")):
                                    TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                    time.sleep(3)
                                    if not(NOS_API.grab_picture("Signal_Info_Vertical")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 10325")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    if not (TEST_CREATION_API.compare_pictures("Signal_Info_ref", "Signal_Info_Vertical", "[CubaV_Check]")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10369")
                                            break
                                        else:
                                            if(Navigation == 0):
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10374")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                NOS_API.set_error_message("Navegação")
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - " + str(signal_strength_hor) + " " + ber_hor + " " + str(signal_strength_ver) + " " + ber_ver + " - - - - - - - - -",
                                                                "- - - - - - - >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                return
                                signal_strength_ver = NOS_API.replace_missed_chars_with_numbers(TEST_CREATION_API.OCR_recognize_text("Signal_Info_Vertical", "[Hor/Ver]", "[OCR_FILTER]", "Ver"))
                                try:
                                    result_float = True
                                    signal_strength_ver = float(signal_strength_ver)
                                    NOS_API.test_cases_results_info.power_vertical_polarization = str(signal_strength_ver)
                                except ValueError:
                                    result_float= False
                                
                                if(signal_strength_ver == ""  or result_float == False):
                                    signal_strength_ver = 0
                                    NOS_API.test_cases_results_info.power_vertical_polarization = "-"
                
                                TEST_CREATION_API.write_log_to_file("Power vertical polarization: " + str(signal_strength_ver) + "dBuV")
                                NOS_API.update_test_slot_comment("Power vertical polarization: " + str(signal_strength_ver) + "dBuV")                    
                                
                                if (signal_strength_ver > SIGNAL_STRENGTH_THRESHOLD_LOW and signal_strength_ver < SIGNAL_STRENGTH_THRESHOLD_HIGH):
                                    try:
                                        ber_ver = NOS_API.fix_ber(TEST_CREATION_API.OCR_recognize_text("Signal_Info_Vertical", "[Ber]", "[OCR_FILTER]"))
                                        TEST_CREATION_API.write_log_to_file("BER vertical polarization: " + ber_ver)
                                        NOS_API.update_test_slot_comment("BER vertical polarization: " + ber_ver)
                                        NOS_API.test_cases_results_info.ber_vertical_polarization = ber_ver
                                    except Exception as error:
                                        ## Set test result to INCONCLUSIVE
                                        TEST_CREATION_API.write_log_to_file(str(error))
                                        ber_ver = "-1"
                                        NOS_API.test_cases_results_info.ber_vertical_polarization = "-"
                                #if (signal_strength_ver > SIGNAL_STRENGTH_THRESHOLD_LOW and signal_strength_ver < SIGNAL_STRENGTH_THRESHOLD_HIGH):
                                    if (NOS_API.check_ber(ber_ver, BER_THRESHOLD)):
                                        test_result_ver = True
                                        break
                                    else:
                                        Repeat = 2
                                        TEST_CREATION_API.write_log_to_file("Ber on vertical polarization")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ber_vertical_polarization_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.ber_vertical_polarization_error_message)
                                        NOS_API.set_error_message("Tuner") 
                                        error_codes = NOS_API.test_cases_results_info.ber_vertical_polarization_error_code
                                        error_messages = NOS_API.test_cases_results_info.ber_vertical_polarization_error_message
                                else:
                                    time.sleep(5)
                                    if not(NOS_API.grab_picture("Signal_Info_Vertical_1")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 10278")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    if not (TEST_CREATION_API.compare_pictures("Signal_Info_ref", "Signal_Info_Vertical_1", "[CubaV_Check]")):
                                        TEST_CREATION_API.send_ir_rc_command("[Ver_CH]")
                                        time.sleep(3)
                                        if not(NOS_API.grab_picture("Signal_Info_Vertical_1")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 10325")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        if not (TEST_CREATION_API.compare_pictures("Signal_Info_ref", "Signal_Info_Vertical_1", "[CubaV_Check]")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10369")
                                                break
                                            else:
                                                if(Navigation == 0):
                                                    Navigation = Navigation + 1
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10374")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                    NOS_API.set_error_message("Navegação")
                                                    error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                    error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - " + str(signal_strength_hor) + " " + ber_hor + " " + str(signal_strength_ver) + " " + ber_ver + " - - - - - - - - -",
                                                                    "- - - - - - - >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    
                                                    return
                                    signal_strength_ver = NOS_API.replace_missed_chars_with_numbers(TEST_CREATION_API.OCR_recognize_text("Signal_Info_Vertical_1", "[Hor/Ver]", "[OCR_FILTER]", "Ver"))
                                    try:
                                        result_float = True
                                        signal_strength_ver = float(signal_strength_ver)
                                        NOS_API.test_cases_results_info.power_vertical_polarization = str(signal_strength_ver)
                                    except ValueError:
                                        result_float= False
                                    
                                    if(signal_strength_ver == ""  or result_float == False):
                                        signal_strength_ver = 0
                                        NOS_API.test_cases_results_info.power_vertical_polarization = "-"
                    
                                    TEST_CREATION_API.write_log_to_file("Power vertical polarization after power: " + str(signal_strength_ver) + "dBuV")
                                    NOS_API.update_test_slot_comment("Power vertical polarization after power: " + str(signal_strength_ver) + "dBuV")                    
                                    
                                    if (signal_strength_ver > SIGNAL_STRENGTH_THRESHOLD_LOW and signal_strength_ver < SIGNAL_STRENGTH_THRESHOLD_HIGH):
                                        try:
                                            ber_ver = NOS_API.fix_ber(TEST_CREATION_API.OCR_recognize_text("Signal_Info_Vertical_1", "[Ber]", "[OCR_FILTER]"))
                                            TEST_CREATION_API.write_log_to_file("BER vertical polarization: " + ber_ver)
                                            NOS_API.update_test_slot_comment("BER vertical polarization: " + ber_ver)
                                            NOS_API.test_cases_results_info.ber_vertical_polarization = ber_ver
                                        except Exception as error:
                                            ## Set test result to INCONCLUSIVE
                                            TEST_CREATION_API.write_log_to_file(str(error))
                                            ber_ver = "-1"
                                            NOS_API.test_cases_results_info.ber_vertical_polarization = "-"
                                        if (NOS_API.check_ber(ber_ver, BER_THRESHOLD)):
                                            test_result_ver = True
                                            break
                                        else:
                                            Repeat = 2
                                            TEST_CREATION_API.write_log_to_file("Ber on vertical polarization")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ber_vertical_polarization_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.ber_vertical_polarization_error_message)
                                            NOS_API.set_error_message("Tuner") 
                                            error_codes = NOS_API.test_cases_results_info.ber_vertical_polarization_error_code
                                            error_messages = NOS_API.test_cases_results_info.ber_vertical_polarization_error_message
                                    else:
                                        Repeat = 2
                                        TEST_CREATION_API.write_log_to_file("Power on vertical polarization")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.power_vertical_polarization_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.power_vertical_polarization_error_message)
                                        NOS_API.set_error_message("Tuner")
                                        error_codes = NOS_API.test_cases_results_info.power_vertical_polarization_error_code
                                        error_messages = NOS_API.test_cases_results_info.power_vertical_polarization_error_message
                        else:
                            #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 10466")
                                continue
                            else:
                                Repeat = 2
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message 
                
            ############################################################################################## Horizontal Polarization Test #########################################################################################################
                
                        if(test_result_ver):
                            counter = 0
                            video_result = 0
                            time.sleep(2)
                            if (NOS_API.is_signal_present_on_video_source_PaceDSR8151()):
                                ## Zap to horizontal polarization channel
                                TEST_CREATION_API.send_ir_rc_command("[Hor_CH]")
                                
                                time.sleep(5)
                                while ( counter < 3):
                                    counter = 3
                                    ## Perform grab picture
                                    if not(NOS_API.grab_picture("Signal_Info_Horizontal")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 10494")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("Signal_Info_ref", "Signal_Info_Horizontal", "[Ver_Pol_Zone]")
                                    if (video_result < NOS_API.thres):
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                        time.sleep(1)
                                        TEST_CREATION_API.send_ir_rc_command("[ZAP_SEQUENCE]")
                                        if not(NOS_API.grab_picture("Vertical_Zone_1")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 10849")
                                                continue
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result = NOS_API.compare_pictures("Signal_Info_ref", "Vertical_Zone_1", "[Ver_Pol_Zone]")
                                        if (video_result < NOS_API.thres):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            time.sleep(1)
                                            TEST_CREATION_API.send_ir_rc_command("[ZAP_SEQUENCE_slow]")
                                            if not(NOS_API.grab_picture("Vertical_Zone_2")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 10898")
                                                    continue
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            video_result = NOS_API.compare_pictures("Signal_Info_ref", "Vertical_Zone_2", "[Ver_Pol_Zone]")
                                            if (video_result < NOS_API.thres):
                                                if (TEST_CREATION_API.compare_pictures("Vertical_Zone_1", "Vertical_Zone_2")):
                                                    #NOS_API.display_custom_dialog("STB bloqueou", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        TEST_CREATION_API.write_log_to_file("STB Blocks. Line 10944")
                                                        continue
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("STB Blocks")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                                        NOS_API.set_error_message("STB bloqueou")
                                                        error_codes = NOS_API.test_cases_results_info.block_error_code
                                                        error_messages = NOS_API.test_cases_results_info.block_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                                        report_file = ""
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        return
                                                else:
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        Navigation = Navigation + 1
                                                        TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10990")
                                                        continue
                                                    else:
                                                        if(Navigation):
                                                            Navigation = Navigation + 1
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 10995")
                                                            continue
                                                        else:
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                            NOS_API.set_error_message("Navegação")
                                                            error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                            error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                    
                                        if not(NOS_API.grab_picture("Signal_Info_Horizontal")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 11039")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                    if not (TEST_CREATION_API.compare_pictures("Signal_Info_Horizontal_ref", "Signal_Info_Horizontal", "[TVI_Check]") or TEST_CREATION_API.compare_pictures("Signal_Info_Horizontal_ref_2", "Signal_Info_Horizontal", "[TVI_Check]")):
                                        TEST_CREATION_API.send_ir_rc_command("[Hor_CH]")
                                        time.sleep(3)
                                        if not(NOS_API.grab_picture("Signal_Info_Horizontal")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 11086")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        if not (TEST_CREATION_API.compare_pictures("Signal_Info_Horizontal_ref", "Signal_Info_Horizontal", "[TVI_Check]") or TEST_CREATION_API.compare_pictures("Signal_Info_Horizontal_ref_2", "Signal_Info_Horizontal", "[TVI_Check]")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 11131")
                                                break
                                            else:
                                                if(Navigation == 0):
                                                    Navigation = Navigation + 1
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place. Line 11136")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Doesn't Navigate to right place")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                    NOS_API.set_error_message("Navegação")
                                                    error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                    error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - " + str(signal_strength_hor) + " " + ber_hor + " " + str(signal_strength_ver) + " " + ber_ver + " - - - - - - - - -",
                                                                    "- - - - - - - >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    
                                                    return
                                    
                                    signal_strength_hor = NOS_API.replace_missed_chars_with_numbers(TEST_CREATION_API.OCR_recognize_text("Signal_Info_Horizontal", "[Hor/Ver]", "[OCR_FILTER]", "Hor"))
                                    try:
                                        result_float = True
                                        signal_strength_hor = float(signal_strength_hor)
                                        NOS_API.test_cases_results_info.power_horizontal_polarization = str(signal_strength_hor)
                                    except ValueError:
                                        result_float= False
                                    
                                    if(signal_strength_hor == ""  or result_float == False):
                                        signal_strength_hor = 0
                                        NOS_API.test_cases_results_info.power_horizontal_polarization = "-"
                
                                    TEST_CREATION_API.write_log_to_file("Power horizontal polarization: " + str(signal_strength_hor) + "dBuV")
                                    NOS_API.update_test_slot_comment("Power horizontal polarization: " + str(signal_strength_hor) + "dBuV")                        
                                    
                                    if (signal_strength_hor >= SIGNAL_STRENGTH_THRESHOLD_LOW and signal_strength_hor <= SIGNAL_STRENGTH_THRESHOLD_HIGH):
                                        try:
                                            ber_hor = NOS_API.fix_ber(TEST_CREATION_API.OCR_recognize_text("Signal_Info_Horizontal", "[Ber]", "[OCR_FILTER]"))
                                            TEST_CREATION_API.write_log_to_file("BER horizontal polarization: " + ber_hor)
                                            NOS_API.update_test_slot_comment("BER horizontal polarization: " + ber_hor)
                                            NOS_API.test_cases_results_info.ber_horizontal_polarization = ber_hor
                                        except Exception as error:
                                            ## Set test result to INCONCLUSIVE
                                            TEST_CREATION_API.write_log_to_file(str(error))
                                            ber_hor = "-1"
                                            NOS_API.test_cases_results_info.ber_horizontal_polarization = "-"
                                    #if (signal_strength_hor >= SIGNAL_STRENGTH_THRESHOLD_LOW and signal_strength_hor <= SIGNAL_STRENGTH_THRESHOLD_HIGH):
                                        if (NOS_API.check_ber(ber_hor, BER_THRESHOLD)):
                                            STB_Info_TestCase = True
                                            #test_result = "PASS"
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                            break
                                        else:
                                            Repeat = 2
                                            TEST_CREATION_API.write_log_to_file("Ber on horizontal polarization")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.ber_horizontal_polarization_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.ber_horizontal_polarization_error_message)
                                            NOS_API.set_error_message("Tuner") 
                                            error_codes = NOS_API.test_cases_results_info.ber_horizontal_polarization_error_code
                                            error_messages = NOS_API.test_cases_results_info.ber_horizontal_polarization_error_message
                                    else:
                                        Repeat = 2
                                        TEST_CREATION_API.write_log_to_file("Power on horizontal polarization")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.power_horizontal_polarization_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.power_horizontal_polarization_error_message)
                                        NOS_API.set_error_message("Tuner")
                                        error_codes = NOS_API.test_cases_results_info.power_horizontal_polarization_error_code
                                        error_messages = NOS_API.test_cases_results_info.power_horizontal_polarization_error_message   
                            else:
                                #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 10586")
                                    continue
                                else:
                                    Repeat = 2 
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message    
                
            ##############################################################################################################################################################################################################################    
            #############################################################################################Interfaces#######################################################################################################################    
            ##############################################################################################################################################################################################################################
                        
                if (STB_Info_TestCase):
                    TEST_CREATION_API.write_log_to_file("####Interfaces####")
                    
                    ## Set test result default to FAIL
                    test_result = "FAIL"
                    pqm_analyse_check = True
                    
                    error_codes = ""
                    error_messages = ""
                    
                    NOS_API.test_cases_results_info.chUp_state = False
                    
                    ZAP_Result = False
                    test_result_res = False
                    test_result_output = False
                    HDMI_1080i_Result = False
                    SCART_Result = False
                    test_result_coax = False
                    HDD_Test = False
                    HDD_DETECTION_Result = False
                    ERASE_CONTENT_Result = False
                    REC_START_Result = False
                    SPDIF_OPT_test = False
                    HDD_Video_Output = False
                    HDD_Video_Quality = False
                    HDD_full_test = False
                    Factory_Reset_Result = False
                    HDD_Audio_Quality = False
                    test_result_SCART_video = False
                    
                    chUp_counter = 0
                    chDown_counter = 0
                    counter = 0
                    
                    counter_AD = 0
                    timeout_AD = 0
                    
                    Lock = 0
                    erase_counter_folder_Menu = 0
                    TimeOut_Folder_Menu = 400
                    erase_counter_folder_Content = 0
                    TimeOut_Folder_Content = 400
                    erase_counter_folder = 0
                    TimeOut_Folder = 180
                    erase_counter = 0
                    space_counter = 0
                    TimeOut = 1800
                    TimeOutSche = 300
                    Fixed = False
                    delta_time = 0
                    delta_time_1 = 0
                    delta_time_2 = 0
                    delta_time_3 = 0    
                    Folder_Erased = False
                    repeat_test = False
                    
                    ## Start grabber device with video on default video source
                    TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.HDMI1)
    
                    if (NOS_API.is_signal_present_on_video_source_PaceDSR8151(2, 10, True)):
                        ## Set volume to max
                        TEST_CREATION_API.send_ir_rc_command("[VOL_MAX]")
    
                        ## Zap to service
                        TEST_CREATION_API.send_ir_rc_command("[CH_4]")
                        time.sleep(1)
                            
                        while (chUp_counter < 3):
                            if(chUp_counter == 2):
                                try:
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                except: 
                                    pass
                                    
                                NOS_API.Inspection = True
                                
                                if (NOS_API.configure_power_switch_by_inspection()):
                                    if not(NOS_API.power_off()): 
                                        TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                        NOS_API.set_error_message("Inspection")
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                        report_file = ""
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)

                                        return
                                    time.sleep(10)
                                    ## Power on STB with energenie
                                    if not(NOS_API.power_on()):
                                        TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                        NOS_API.set_error_message("Inspection")
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                        report_file = ""
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        test_result = "FAIL"
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                        
                                        return
                                    time.sleep(15)
                                else:
                                    TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                                    
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                    NOS_API.set_error_message("Inspection")
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                    report_file = ""
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    test_result = "FAIL"
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                    
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                        test_result,
                                        end_time,
                                        error_codes,
                                        report_file)
                                    
                                    return
                                
                                NOS_API.Inspection = False
                                
                                NOS_API.initialize_grabber()
                                
                                ## Start grabber device with video on default video source
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.HDMI1)
                                time.sleep(2)
                                TEST_CREATION_API.send_ir_rc_command("[CH_4]")
                                time.sleep(2)
                            
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                            
                            ## Perform grab picture
                            if not(NOS_API.grab_picture("service_1")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 10685")
                                    break
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result = NOS_API.compare_pictures("service_1_ref", "service_1", "[HALF_SCREEN]")
                            video_result_1 = NOS_API.compare_pictures("service_1_ref1", "service_1", "[HALF_SCREEN]")
                            video_result_2 = NOS_API.compare_pictures("service_1_ref2", "service_1", "[HALF_SCREEN]")
                
                            ## Check if STB zap to horizontal polarization channel (check image and audio)
                            if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                
                                # Record audio from HDMI
                                TEST_CREATION_API.record_audio("audio_chUp", MAX_RECORD_AUDIO_TIME)         
                                
                                #Amostra sem som
                                audio_result_1 = NOS_API.compare_audio("No_Both_ref", "audio_chUp")
                                
                                if (audio_result_1 < TEST_CREATION_API.AUDIO_THRESHOLD):        
                                
                                    NOS_API.test_cases_results_info.chUp_state = True
                                    break
                                    
                                else:
                                    if (chUp_counter == 2):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Audio_Issue = Audio_Issue + 1
                                            TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on hdmi 720p interface. Line 10732")
                                            repeat_test = True
                                            break
                                        else:  
                                            if(Audio_Issue == 0):
                                                Audio_Issue = Audio_Issue + 1
                                                TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on hdmi 720p interface. Line 10737")
                                                repeat_test = True
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on hdmi 720p interface.")
                                                NOS_API.set_error_message("Audio HDMI")
                                                NOS_API.update_test_slot_comment("Error codes: " + NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_code  \
                                                                                + ";\n" + NOS_API.test_cases_results_info.hdmi_720p_signal_interference_error_code  \
                                                                                + "; Error messages: " + NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_message \
                                                                                + ";\n" + NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_message)
                                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_code + " " + NOS_API.test_cases_results_info.hdmi_720p_signal_interference_error_code
                                                error_messages = NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_message + " " + NOS_API.test_cases_results_info.hdmi_720p_signal_interference_error_message
                                                chUp_counter = 3 
                                                Repeat = 2
                                    else:     
                                        if (chUp_counter == 0):
                                            TEST_CREATION_API.send_ir_rc_command("[CH_4]")
                                            TEST_CREATION_API.send_ir_rc_command("[CH-]")
                                            TEST_CREATION_API.send_ir_rc_command("[CH+]")
                                            time.sleep(5)
                                            TEST_CREATION_API.send_ir_rc_command("[CH_4]")
                                            chUp_counter = chUp_counter + 1
                                        else:
                                            chUp_counter = chUp_counter + 1
                            else:
                                if (chUp_counter == 2):
                                    TEST_CREATION_API.write_log_to_file("STB is not zap to service 1 (ChUp failed)")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.zap_channel_up_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.zap_channel_up_error_message )
                                                                    #+ "; V: " + str(video_result))
                                    NOS_API.set_error_message("Tuner")
                                    error_codes = NOS_API.test_cases_results_info.zap_channel_up_error_code
                                    error_messages = NOS_API.test_cases_results_info.zap_channel_up_error_message
                                    chUp_counter = 3
                                    Repeat = 2
                                else:
                                    if (chUp_counter == 0):
                                        video_result_2 = NOS_API.compare_pictures("SmartCard_Error_ref", "service_1", "[SmartCard_Error]")
                                        if (video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                            NOS_API.display_dialog("Retire e volte a colocar o cart\xe3o", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                            time.sleep(3)
                                        TEST_CREATION_API.send_ir_rc_command("[CH_4]")
                                        TEST_CREATION_API.send_ir_rc_command("[CH-]")
                                        TEST_CREATION_API.send_ir_rc_command("[CH+]")
                                        time.sleep(5)
                                        TEST_CREATION_API.send_ir_rc_command("[CH_4]")
                                        chUp_counter = chUp_counter + 1
                                    else:
                                        chUp_counter = chUp_counter + 1
                        
                        if(repeat_test):
                            continue
                        ###################
                        ## CH Down
                        ###################
                        if (NOS_API.test_cases_results_info.chUp_state):
                        
                            TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                            time.sleep(2)
                            
                            if not (NOS_API.is_signal_present_on_video_source_PaceDSR8151(2, 10, True)):
                                #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 10787")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    test_result = "FAIL"
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                                
                            ## Record video with duration of recording (10 seconds)
                            NOS_API.record_video("video", MAX_RECORD_VIDEO_TIME)
                    
                            ## Instance of PQMAnalyse type
                            pqm_analyse = TEST_CREATION_API.PQMAnalyse()
                    
                            ## Set what algorithms should be checked while analyzing given video file with PQM.
                            # Attributes are set to false by default.
                            pqm_analyse.black_screen_activ = True
                            pqm_analyse.blocking_activ = True
                            pqm_analyse.freezing_activ = True
                    
                            # Name of the video file that will be analysed by PQM.
                            pqm_analyse.file_name = "video"
                    
                            ## Analyse recorded video
                            analysed_video = TEST_CREATION_API.pqm_analysis(pqm_analyse)
                    
                            if (pqm_analyse.black_screen_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):
                                pqm_analyse_check = False
                                NOS_API.set_error_message("Video HDMI")
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_image_absence_error_code \
                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_image_absence_error_code)
                                error_codes = NOS_API.test_cases_results_info.hdmi_720p_image_absence_error_code
                                error_messages = NOS_API.test_cases_results_info.hdmi_720p_image_absence_error_message
                            if (pqm_analyse.blocking_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):
                                pqm_analyse_check = False
                                NOS_API.set_error_message("Video HDMI")
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_blocking_error_code \
                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_blocking_error_message)
                                if (error_codes == ""):
                                    error_codes = NOS_API.test_cases_results_info.hdmi_720p_blocking_error_code
                                else:
                                    error_codes = error_codes + " " + NOS_API.test_cases_results_info.hdmi_720p_blocking_error_code
                                    
                                if (error_messages == ""):
                                    error_messages = NOS_API.test_cases_results_info.hdmi_720p_blocking_error_message
                                else:
                                    error_messages = error_messages + " " + NOS_API.test_cases_results_info.hdmi_720p_blocking_error_message
                            if (pqm_analyse.freezing_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):
                                pqm_analyse_check = False
                                NOS_API.set_error_message("Video HDMI")
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_image_freezing_error_code \
                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_image_freezing_error_message)
                                if (error_codes == ""):
                                    error_codes = NOS_API.test_cases_results_info.hdmi_720p_image_freezing_error_code
                                else:
                                    error_codes = error_codes + " " + NOS_API.test_cases_results_info.hdmi_720p_image_freezing_error_code
                                    
                                if (error_messages == ""):
                                    error_messages = NOS_API.test_cases_results_info.hdmi_720p_image_freezing_error_message
                                else:
                                    error_messages = error_messages + " " + NOS_API.test_cases_results_info.hdmi_720p_image_freezing_error_message
                                        
                            if not(pqm_analyse_check):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Fails on PQM analyses. Line 10885")
                                    continue
                                else:
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            
                            if not(analysed_video): 
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Could'n't Record Video. Line 10922")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("Could'n't Record Video")
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.grabber_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.grabber_error_message)
                                    error_codes = NOS_API.test_cases_results_info.grabber_error_code
                                    error_messages = NOS_API.test_cases_results_info.grabber_error_message
                                    NOS_API.set_error_message("Inspection")
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return 
                            
                            if (NOS_API.is_video_playing):
                                while (chDown_counter < 3):
                                    if(chDown_counter == 2):
                                        try:
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                        except: 
                                            pass
                                            
                                        NOS_API.Inspection = True
                                        
                                        if (NOS_API.configure_power_switch_by_inspection()):
                                            if not(NOS_API.power_off()): 
                                                TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                NOS_API.set_error_message("Inspection")
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)

                                                return
                                            time.sleep(10)
                                            ## Power on STB with energenie
                                            if not(NOS_API.power_on()):
                                                TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                NOS_API.set_error_message("Inspection")
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                test_result = "FAIL"
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                                
                                                return
                                            time.sleep(15)
                                        else:
                                            TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                                            
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            test_result = "FAIL"
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                            
                                            return
                                        
                                        NOS_API.Inspection = False
                                        
                                        NOS_API.initialize_grabber()
                                        
                                        ## Start grabber device with video on default video source
                                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                        TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.HDMI1)
                                        time.sleep(2)
                                        TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                                        time.sleep(2)
                                        
                                    TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                                    
                                    ## Perform grab picture
                                    if not(NOS_API.grab_picture("service_2")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 10972")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    video_result = NOS_API.compare_pictures("service_2_ref", "service_2", "[HALF_SCREEN]")
                                    video_result_1 = NOS_API.compare_pictures("service_2_ref1", "service_2", "[HALF_SCREEN]")
                                    video_result_2 = NOS_API.compare_pictures("service_2_ref2", "service_2", "[HALF_SCREEN]")
                                    ## Check if STB zap to horizontal polarization channel (check image and audio)
                                    if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                    
                                        ## Record audio from HDMI
                                        TEST_CREATION_API.record_audio("audio_chDown", MAX_RECORD_AUDIO_TIME)
    
                                        #Amostra sem som
                                        audio_result_1 = NOS_API.compare_audio("No_Both_ref", "audio_chDown")
                                                
                                        if (audio_result_1 < TEST_CREATION_API.AUDIO_THRESHOLD):
                                            ZAP_Result = True
                                            break
                                                    
                                        else:
                                            if (chDown_counter == 2):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    Audio_Issue = Audio_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on hdmi 720p interface. Line 11177")
                                                    repeat_test = True
                                                    break
                                                else:  
                                                    if(Audio_Issue == 0):
                                                        Audio_Issue = Audio_Issue + 1
                                                        TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on hdmi 720p interface. Line 11182")
                                                        repeat_test = True
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on hdmi 720p interface.")
                                                        NOS_API.set_error_message("Audio HDMI")
                                                        NOS_API.update_test_slot_comment("Error codes: " + NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_code  \
                                                                                        + ";\n" + NOS_API.test_cases_results_info.hdmi_720p_signal_interference_error_code  \
                                                                                        + "; Error messages: " + NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_message \
                                                                                        + ";\n" + NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_message)
                                                        error_codes = NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_code + " " + NOS_API.test_cases_results_info.hdmi_720p_signal_interference_error_code
                                                        error_messages = NOS_API.test_cases_results_info.hdmi_720p_signal_discontinuities_error_message + " " + NOS_API.test_cases_results_info.hdmi_720p_signal_interference_error_message
                                                        chDown_counter = 3
                                                        Repeat = 2
                                            else:
                                                if (chDown_counter == 0):
                                                    TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                                                    TEST_CREATION_API.send_ir_rc_command("[CH+]")
                                                    TEST_CREATION_API.send_ir_rc_command("[CH-]")
                                                    time.sleep(5)
                                                    TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                                                    chDown_counter = chDown_counter + 1
                                                else:
                                                    chDown_counter = chDown_counter + 1
                                    else:
                                        if (chDown_counter == 2):
                                            TEST_CREATION_API.write_log_to_file("STB is not zap to service 2")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.zap_channel_down_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.zap_channel_down_error_message)
                                                                            #+ "; V: " + str(video_result))
                                            NOS_API.set_error_message("Tuner")
                                            error_codes = NOS_API.test_cases_results_info.zap_channel_down_error_code
                                            error_messages = NOS_API.test_cases_results_info.zap_channel_down_error_message
                                            chDown_counter = 3
                                            Repeat = 2
                                        else:
                                            if (chDown_counter == 0):
                                                TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                                                TEST_CREATION_API.send_ir_rc_command("[CH+]")
                                                time.sleep(1)
                                                TEST_CREATION_API.send_ir_rc_command("[CH-]")
                                                time.sleep(5)
                                                TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                                                chDown_counter = chDown_counter + 1
                                            else:
                                                chDown_counter = chDown_counter + 1
                                                
                                if(repeat_test):
                                    continue
                    else:
                        #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                        if(Repeat == 0):
                            Repeat = Repeat + 1
                            TEST_CREATION_API.write_log_to_file("Reboot. Line 11064")
                            continue
                        else:
                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                            NOS_API.set_error_message("Reboot")
                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                        
            ########################################################################################### HDD Test ########################################################################################################################
    
                    if(ZAP_Result):
                        TEST_CREATION_API.send_ir_rc_command("[HDD_MENU]")
                        time.sleep(1.5)
                        
                        ## Perform grab picture
                        if not(NOS_API.grab_picture("hdd_menu")):
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 11084")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                
                                NOS_API.add_test_case_result_to_file_report(
                                                test_result,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                error_codes,
                                                error_messages)
                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                report_file = ""    
                                if (test_result != "PASS"):
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                
                                ## Update test result
                                TEST_CREATION_API.update_test_result(test_result)
                            
                                ## Return DUT to initial state and de-initialize grabber device
                                NOS_API.deinitialize()
                                return
    
                        video_result = NOS_API.compare_pictures("hdd_menu_ref", "hdd_menu", "[HDD_MENU]")
                        video_result1 = NOS_API.compare_pictures("hdd_menu_ref_2", "hdd_menu", "[HDD_MENU]")
    
                        ## Check is HDD menu is opened
                        if not(video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                            time.sleep(1)
                            TEST_CREATION_API.send_ir_rc_command("[HDD_MENU]")
                            
                            ## Perform grab picture
                            if not(NOS_API.grab_picture("hdd_menu_1")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 11139")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
    
                            video_result_2 = NOS_API.compare_pictures("hdd_menu_ref", "hdd_menu_1", "[HDD_MENU]")
                            video_result_3 = NOS_API.compare_pictures("hdd_menu_ref_2", "hdd_menu", "[HDD_MENU]")
                            
                            ## Check is HDD menu is opened
                            if not(video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_3 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    Navigation = Navigation + 1
                                    TEST_CREATION_API.write_log_to_file("Hdd menu is not opened. Line 11188")
                                    continue
                                else:
                                    if(Navigation == 0):
                                        Navigation = Navigation + 1
                                        TEST_CREATION_API.write_log_to_file("Hdd menu is not opened. Line 11193")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("Hdd menu is not opened.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                        NOS_API.set_error_message("Navegação")
                                        error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                        error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                        if not(NOS_API.grab_picture("hdd_detection")):
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 11237")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                
                                NOS_API.add_test_case_result_to_file_report(
                                                test_result,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                error_codes,
                                                error_messages)
                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                report_file = ""    
                                if (test_result != "PASS"):
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                
                                ## Update test result
                                TEST_CREATION_API.update_test_result(test_result)
                            
                                ## Return DUT to initial state and de-initialize grabber device
                                NOS_API.deinitialize()
                                return
                        
                        video_result = NOS_API.compare_pictures("hdd_detection_ref", "hdd_detection", "[HDD_DETECTION]")
    
                        ## Check if hdd is detected
                        if (video_result < NOS_API.thres):
                            if not(NOS_API.grab_picture("Check_Space")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 11286")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            
                            try:
                                Check_hdd_space = int(NOS_API.Fix_HDD_Space_For_One_Char(TEST_CREATION_API.OCR_recognize_text("Check_Space", "[HDD_SPACE]", "", "Check_HDD_Space")))
                            except Exception as error:
                                TEST_CREATION_API.write_log_to_file(str(error))
                                Check_hdd_space = 0
    
                            if (Check_hdd_space > 95):
                                if(TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "Check_Space", "[Check_HDD_Content]")):
                                    ## Set test result to PASS
                                    HDD_DETECTION_Result = True
                                    NOS_API.test_cases_results_info.hdd_detection = True
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                                    NOS_API.test_cases_results_info.AutoDiagHDDTest = 1
                                    ERASE_CONTENT_Result = True
                            else:
                                if (Check_hdd_space <= 1):
                                    if not(NOS_API.grab_picture("empty_recorded_list")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 11348")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                NOS_API.test_cases_results_info.mac_using_barcode,
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                
                                    erase_to_reduce_counter = 0
                                    while not((TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[RECORDED_CONTENT_AREA]")) or (erase_to_reduce_counter >= 5)):
                                        if (TEST_CREATION_API.compare_pictures("Lock_Content_ref", "empty_recorded_list", "[Lock_Content]") or TEST_CREATION_API.compare_pictures("Lock_Content_ws_ref", "empty_recorded_list", "[Lock_Content]")):
                                            TEST_CREATION_API.send_ir_rc_command("[DELETE_A_CONTENT_BLOCK]")
                                            TEST_CREATION_API.send_ir_rc_command("[UP]")
                                            if not(NOS_API.grab_picture("empty_recorded_list")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    BreakWhile = True
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 11398")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            if (TEST_CREATION_API.compare_pictures("Wrong_Pass_Block_Content_ref", "empty_recorded_list", "[Incorret_Pin]")):
                                                NOS_API.test_cases_results_info.AutoDiagHDDTest = 1
                                                break
                                            continue
                                
                                        if (erase_counter == 3):
                                            erase_counter = 0
                                            
                                            if not(TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_1]") and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_2]") and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_3]") == False and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_4]") == False):
                                                                    
                                                TEST_CREATION_API.send_ir_rc_command("[Exit_HDD_Loop]")
                                                TEST_CREATION_API.send_ir_rc_command("[Mega_UP]")
                                                Fixed = True
                                                
                                        ## Delete next recorded content
                                        TEST_CREATION_API.send_ir_rc_command("[DELETE_A_CONTENT]")
                                        TEST_CREATION_API.send_ir_rc_command("[UP]")
                                        ## Perform grab picture
                                        if not(NOS_API.grab_picture("empty_recorded_list")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                BreakWhile = True
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 11462")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    NOS_API.test_cases_results_info.mac_using_barcode,
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        
                                        erase_counter = erase_counter + 1  
                                        erase_to_reduce_counter = erase_to_reduce_counter + 1 
                                    if(BreakWhile):
                                        continue
                                TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                                NOS_API.test_cases_results_info.AutoDiagHDDTest = 1
                                ERASE_CONTENT_Result = True
                        else:
                            Repeat = 2
                            TEST_CREATION_API.write_log_to_file("Hdd is not detected")
                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.hdd_not_detected_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.hdd_not_detected_error_message \
                                                                + "; V: " + str(video_result))
                            error_codes = NOS_API.test_cases_results_info.hdd_not_detected_error_code
                            error_messages = NOS_API.test_cases_results_info.hdd_not_detected_error_message
                            NOS_API.set_error_message("HDD")
                            
                        ################################################################ Erase content from HDD #######################################################################
                                
                        if(HDD_DETECTION_Result):
                            if not(NOS_API.grab_picture("empty_recorded_list")):   
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 11527")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            
                            if not(TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[HDD_MENU_LEFT]")): 
                                if not(NOS_API.grab_picture("empty_recorded_folder")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 11573")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                if not(TEST_CREATION_API.compare_pictures("empty_recorded_folder_ref", "empty_recorded_folder", "[Folder_Home]")):
                                    TEST_CREATION_API.send_ir_rc_command("[Folder_Home]")
                                    if not(NOS_API.grab_picture("empty_recorded_folder")):    
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 11619")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                NOS_API.test_cases_results_info.mac_using_barcode,
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    if not(TEST_CREATION_API.compare_pictures("empty_recorded_folder_ref", "empty_recorded_folder", "[Folder_Home]")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Hdd menu is not opened. Line 11663")
                                            continue
                                        else:
                                            if(Navigation == 0):
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Hdd menu is not opened. Line 11668")
                                                continue
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Hdd menu is not opened.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message)
                                                NOS_API.set_error_message("Navegação")
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                start_time_2 = time.localtime()
                                while not((TEST_CREATION_API.compare_pictures("empty_recorded_folder_ref", "empty_recorded_folder", "[Folder_Check]")) or (delta_time_2 >= TimeOut_Folder_Menu)):
                                    if (erase_counter_folder_Menu == 2):
                                        erase_counter_folder_Menu = 0
                                        if not(TEST_CREATION_API.compare_pictures("empty_recorded_folder_ref", "empty_recorded_folder", "[Check_not_folder_loop_1]") and TEST_CREATION_API.compare_pictures("empty_recorded_folder_ref", "empty_recorded_folder", "[Check_not_folder_loop_2]")):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_HDD_Folder_Loop]")                     
                                            Fixed = True
                                    ## Perform grab picture
                                    TEST_CREATION_API.send_ir_rc_command("[Erase_Folder]")
                                    
                                    if not(NOS_API.grab_picture("empty_recorded_folder_1")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            BreakWhile = True
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 11723")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                NOS_API.test_cases_results_info.mac_using_barcode,
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
    
                                    if (TEST_CREATION_API.compare_pictures("empty_recorded_folder_1", "empty_recorded_folder", "[Folder_Block]")):
                                        if (TEST_CREATION_API.compare_pictures("empty_recorded_folder_lock_ref", "empty_recorded_folder_1", "[Lock]")):
                                            TEST_CREATION_API.send_ir_rc_command("[Unlock]")
                                            TEST_CREATION_API.send_ir_rc_command("[Erase_Folder]")
                                            Lock = 1
                                        if not(NOS_API.grab_picture("empty_recorded_folder_Lock")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                BreakWhile = True
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 11774")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    NOS_API.test_cases_results_info.mac_using_barcode,
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        if (TEST_CREATION_API.compare_pictures("empty_recorded_folder_1", "empty_recorded_folder_Lock", "[Folder_Block]")):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_and_DVR]")
                                            time.sleep(5)
                                            TEST_CREATION_API.send_ir_rc_command("[Check_Serie]")
                                            if not(NOS_API.grab_picture("empty_recorded_list_block")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    BreakWhile = True
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 11823")
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            while (TEST_CREATION_API.compare_pictures("Erase_Serie_ref", "empty_recorded_list_block", "[Erase_Serie_1]")):
                                                TEST_CREATION_API.send_ir_rc_command("[Double_OK]")
                                                time.sleep(3)
                                                TEST_CREATION_API.send_ir_rc_command("[Check_Serie]")
                                                if not(NOS_API.grab_picture("empty_recorded_list_block")):  
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        BreakWhile = True
                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 11823")
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                            if(BreakWhile):
                                                break
                                            time.sleep(8)
                                            TEST_CREATION_API.send_ir_rc_command("[RIGHT]")
                                            start_time_1 = time.localtime()
                                            while not((TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list_block", "[RECORDED_CONTENT_AREA]")) or (delta_time_1 >= TimeOut_Folder_Content)):
                                                if (erase_counter_folder_Content == 2):
                                                    erase_counter_folder_Content = 0
                                                    if not(TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list_block", "[Check_not_loop_1]") and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list_block", "[Check_not_loop_2]")):
                                                        TEST_CREATION_API.send_ir_rc_command("[Exit_HDD_Loop]")
                                                        time.sleep(1)
                                                        TEST_CREATION_API.send_ir_rc_command("[Mega_UP]")
                                                        TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                                        time.sleep(1)
                                                        TEST_CREATION_API.send_ir_rc_command("[DVR]")
                                                        time.sleep(1)
                                                        TEST_CREATION_API.send_ir_rc_command("[Erase_Folder_block]")
                                                        Fixed = True
                                                ## Delete next recorded content
                                                if (Lock == 1):
                                                    TEST_CREATION_API.send_ir_rc_command("[Erase_Content_block]")
                                                else:
                                                    TEST_CREATION_API.send_ir_rc_command("[Erase_Content_block_NL]")    
                                                
                                                ## Perform grab picture
                                                if not(NOS_API.grab_picture("empty_recorded_list_block")):
                                                    if(Repeat == 0):
                                                        Repeat = Repeat + 1
                                                        BreakWhile = True
                                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 11942")
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                        NOS_API.set_error_message("Reboot")
                                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                        report_file = ""    
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        return
                                    
                                                erase_counter_folder_Content = erase_counter_folder_Content + 1       
                                                delta_time_1 = (time.mktime(time.localtime()) - time.mktime(start_time_1))
                                            if(BreakWhile):
                                                break
                                            if (delta_time_1 >= TimeOut_Folder_Content):
                                                TEST_CREATION_API.write_log_to_file("Doesn't Erase HDD")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdd_erase_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.hdd_erase_error_message)
                                                error_codes = NOS_API.test_cases_results_info.hdd_erase_error_code
                                                error_messages = NOS_API.test_cases_results_info.hdd_erase_error_message
                                                NOS_API.set_error_message("HDD")
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    NOS_API.test_cases_results_info.mac_using_barcode,
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                            
                                        TEST_CREATION_API.send_ir_rc_command("[Folder_Home]")
                                        
                                    if not(NOS_API.grab_picture("empty_recorded_folder")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            BreakWhile = True
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 12034")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                NOS_API.test_cases_results_info.mac_using_barcode,
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                
                                    erase_counter_folder_Menu = erase_counter_folder_Menu + 1       
                                    delta_time_2 = (time.mktime(time.localtime()) - time.mktime(start_time_2))
                                if(BreakWhile): 
                                    continue
                                if (delta_time_2 >= TimeOut_Folder_Menu):
                                    TEST_CREATION_API.write_log_to_file("Doesn't Erase HDD")
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdd_erase_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.hdd_erase_error_message)
                                    error_codes = NOS_API.test_cases_results_info.hdd_erase_error_code
                                    error_messages = NOS_API.test_cases_results_info.hdd_erase_error_message
                                    NOS_API.set_error_message("HDD")
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        NOS_API.test_cases_results_info.mac_using_barcode,
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                                
                                TEST_CREATION_API.send_ir_rc_command("[Exit_and_DVR]")
                                if not(NOS_API.grab_picture("empty_recorded_list")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 12124")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                    
                            start_time_3 = time.localtime()
                            while not((TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[HDD_MENU_LEFT]")) or (delta_time_3 >= TimeOut_Folder)):
                                if (erase_counter_folder == 2):
                                    erase_counter_folder = 0
                                    if not(TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_1]") and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_2]")):
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_HDD_Loop]")
                                        TEST_CREATION_API.send_ir_rc_command("[Mega_UP]")
                                        Fixed = True
                                    Folder_Erased = True
                                        
                                TEST_CREATION_API.send_ir_rc_command("[Erase_Serie_Folder]") 
                                if not(NOS_API.grab_picture("empty_recorded_list")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        BreakWhile = True
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 12180")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                            
                                erase_counter_folder = erase_counter_folder + 1       
                                delta_time_3 = (time.mktime(time.localtime()) - time.mktime(start_time_3))
                            if(BreakWhile):
                                continue
                            if (delta_time_3 >= TimeOut_Folder):
                                TEST_CREATION_API.write_log_to_file("Doesn't Erase HDD")
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdd_erase_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.hdd_erase_error_message)
                                error_codes = NOS_API.test_cases_results_info.hdd_erase_error_code
                                error_messages = NOS_API.test_cases_results_info.hdd_erase_error_message
                                NOS_API.set_error_message("HDD")
                                
                                NOS_API.add_test_case_result_to_file_report(
                                                test_result,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                error_codes,
                                                error_messages)
                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                report_file = ""    
                                if (test_result != "PASS"):
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    NOS_API.test_cases_results_info.mac_using_barcode,
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                
                                ## Update test result
                                TEST_CREATION_API.update_test_result(test_result)
                            
                                ## Return DUT to initial state and de-initialize grabber device
                                NOS_API.deinitialize()
                                return
                        
                            if (Folder_Erased):
                                TEST_CREATION_API.send_ir_rc_command("[MegaUP]")
                                
                            start_time = time.localtime()
                            ## Empty all recorded content from HDD
                            while not((TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[RECORDED_CONTENT_AREA]")) or (delta_time >= TimeOut)):
                                if (TEST_CREATION_API.compare_pictures("Lock_Content_ref", "empty_recorded_list", "[Lock_Content]") or TEST_CREATION_API.compare_pictures("Lock_Content_ws_ref", "empty_recorded_list", "[Lock_Content]")):
                                    TEST_CREATION_API.send_ir_rc_command("[DELETE_A_CONTENT_BLOCK]")
                                    TEST_CREATION_API.send_ir_rc_command("[UP]")
                                    if not(NOS_API.grab_picture("empty_recorded_list")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            BreakWhile = True
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 12280")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                NOS_API.test_cases_results_info.mac_using_barcode,
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    if (TEST_CREATION_API.compare_pictures("Wrong_Pass_Block_Content_ref", "empty_recorded_list", "[Incorret_Pin]")):
                                        NOS_API.test_cases_results_info.AutoDiagHDDTest = 1
                                        break
                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                    continue
                        
                                if (erase_counter == 3):
                                    erase_counter = 0
                                    
                                    if not(TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_1]") and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_2]") and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_3]") == False and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list", "[Check_not_loop_4]") == False):
                                                            
                                        TEST_CREATION_API.send_ir_rc_command("[Exit_HDD_Loop]")
                                        TEST_CREATION_API.send_ir_rc_command("[Mega_UP]")
                                        Fixed = True
                                        
                                ## Delete next recorded content
                                TEST_CREATION_API.send_ir_rc_command("[DELETE_A_CONTENT]")
                                TEST_CREATION_API.send_ir_rc_command("[UP]")
                                ## Perform grab picture
                                if not(NOS_API.grab_picture("empty_recorded_list")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        BreakWhile = True
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 12344")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                                erase_counter = erase_counter + 1       
                                delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                            if(BreakWhile):
                                continue
                            if (delta_time < TimeOut and NOS_API.test_cases_results_info.AutoDiagHDDTest == 0):
                                TEST_CREATION_API.send_ir_rc_command("[Down]")
                                if not(NOS_API.grab_picture("empty_recorded_list_sche")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 12395")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                            
                                start_time = time.localtime()
                                erase_counter = 0
                                delta_time = 0
                                
                                while not(TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list_sche", "[RECORDED_CONTENT_AREA]") or delta_time >= TimeOutSche):
                                    
                                    if (erase_counter == 3):
                                        erase_counter = 0
                                        
                                        if not (TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list_sche", "[Check_not_loop_1]") and TEST_CREATION_API.compare_pictures("empty_recorded_list_ref", "empty_recorded_list_sche", "[Check_not_loop_2]")):
                                            TEST_CREATION_API.send_ir_rc_command("[Exit_HDD_Loop]")
                                            TEST_CREATION_API.send_ir_rc_command("[Mega_UP]")
                                            TEST_CREATION_API.send_ir_rc_command("[Down]")
                                            
                                            Fixed = True
                                    ## Delete next recorded content
                                    TEST_CREATION_API.send_ir_rc_command("[DELETE_A_CONTENT_SCHED]")
                            
                                    ## Perform grab picture
                                    if not(NOS_API.grab_picture("empty_recorded_list_sche")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            BreakWhile = True
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 12460")
                                            break
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                NOS_API.test_cases_results_info.mac_using_barcode,
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    
                                    erase_counter = erase_counter + 1       
                                    delta_time = (time.mktime(time.localtime()) - time.mktime(start_time))
                                if(BreakWhile):
                                    continue
                            if (delta_time >= TimeOut):
                                Repeat = 2
                                TEST_CREATION_API.write_log_to_file("Doesn't Erase HDD")
                                NOS_API.set_error_message("HDD")
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdd_erase_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.hdd_erase_error_message)
                                error_codes = NOS_API.test_cases_results_info.hdd_erase_error_code
                                error_messages = NOS_API.test_cases_results_info.hdd_erase_error_message
                                
                            while ((space_counter < 2) and (delta_time < TimeOut) and (NOS_API.test_cases_results_info.AutoDiagHDDTest == 0)):
                                ## Perform grab picture
                                if not(NOS_API.grab_picture("hdd_space")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        BreakWhile = True
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 12521")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            NOS_API.test_cases_results_info.mac_using_barcode,
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                                try:
                                    hdd_space = int(TEST_CREATION_API.OCR_recognize_text("hdd_space", "[HDD_SPACE]", "", "hdd_space"))
                                except Exception as error:
                                    TEST_CREATION_API.write_log_to_file(str(error))
                                    hdd_space = 0
    
                                if (hdd_space >= 90):
                                    ERASE_CONTENT_Result = True
                                    break
                                else:
                                    if (space_counter == 1):
                                        TEST_CREATION_API.write_log_to_file("HDD size NOK")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdd_size_nok_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.hdd_size_nok_error_message  \
                                                                            + "; OCR: " + str(hdd_space))
                                        error_codes = NOS_API.test_cases_results_info.hdd_size_nok_error_code
                                        error_messages = NOS_API.test_cases_results_info.hdd_size_nok_error_message
                                        NOS_API.set_error_message("HDD")
                                        Repeat = 2
                                        break
                                    else:
                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                        time.sleep(2)
                                        TEST_CREATION_API.send_ir_rc_command("[POWER]")
                                        time.sleep(5)
                                        TEST_CREATION_API.send_ir_rc_command("[DVR]") 
                                        time.sleep(4)
                                        
                                        if not(NOS_API.grab_picture("hdd_space")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                BreakWhile = True
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 12595")
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    NOS_API.test_cases_results_info.mac_using_barcode,
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        video_result = NOS_API.compare_pictures("hdd_menu_ref", "hdd_space", "[HDD_MENU]")
                                        ## Check is HDD menu is opened
                                        if not(video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        
                                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                                            time.sleep(3)
                                            TEST_CREATION_API.send_ir_rc_command("[HDD_MENU]")
                                            time.sleep(4)
                                space_counter = space_counter + 1
                            
                            if(BreakWhile):
                                continue
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                            if (Fixed):
                                time.sleep(2)
                                TEST_CREATION_API.send_ir_rc_command("[CH_4]")
                                    
                                    
            ########################################################################################### 1080i HDMI Test ########################################################################################################################
    
                    if(ERASE_CONTENT_Result):
            
                    ########################################################################## Set Resolution 1080p #######################################################################
                    
                        TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_1080p]")
                        time.sleep(2)
                        video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                        
                        if (video_height != "1080"):
                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                            TEST_CREATION_API.send_ir_rc_command("[SET_RESOLUTION_1080p_slow]")
                            time.sleep(2)
                            video_height = NOS_API.get_av_format_info(TEST_CREATION_API.AudioVideoInfoType.video_height)
                        
                        if (video_height != "1080"):
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                Resolution = Resolution + 1
                                TEST_CREATION_API.write_log_to_file("Resolução. Line 12677")
                                continue
                            else:
                                if(Resolution == 0):
                                    Resolution = Resolution + 1
                                    TEST_CREATION_API.write_log_to_file("Resolução. Line 12682")
                                    continue
                                else:
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.resolution_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.resolution_error_message)
                                    error_codes = NOS_API.test_cases_results_info.resolution_error_code
                                    error_messages = NOS_API.test_cases_results_info.resolution_error_message
                                    NOS_API.set_error_message("Resolução")
                                    Repeat = 2
                        else:
                            test_result_res = True
                            
                    ################################################################################# HDMI 1080 OUTPUT ###########################################################################
                    
                    if(test_result_res):
                    
                        TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                        if not(NOS_API.grab_picture("Wrong_HDMI_video")):
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 12707")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                
                                NOS_API.add_test_case_result_to_file_report(
                                                test_result,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                error_codes,
                                                error_messages)
                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                report_file = ""    
                                if (test_result != "PASS"):
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                
                                ## Update test result
                                TEST_CREATION_API.update_test_result(test_result)
                            
                                ## Return DUT to initial state and de-initialize grabber device
                                NOS_API.deinitialize()
                                return
                        video_result = NOS_API.compare_pictures("HDMI_video_ref", "Wrong_HDMI_video", "[HALF_SCREEN_1080p]")
                        video_result_2 = NOS_API.compare_pictures("HDMI_video_ref_2", "Wrong_HDMI_video", "[HALF_SCREEN_1080p]")
                        if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                            TEST_CREATION_API.send_ir_rc_command("[Left]")
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")       
                            TEST_CREATION_API.send_ir_rc_command("[CH_322]")
                            time.sleep(3)
                            TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                            TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                            time.sleep(3)
                            if not(NOS_API.grab_picture("Wrong_HDMI_video_1")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 12761")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result = NOS_API.compare_pictures("HDMI_video_ref", "Wrong_HDMI_video_1", "[HALF_SCREEN_1080p]")
                            video_result_2 = NOS_API.compare_pictures("HDMI_video_ref_2", "Wrong_HDMI_video_1", "[HALF_SCREEN_1080p]")
                            if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                TEST_CREATION_API.send_ir_rc_command("[CH_322]")
                                time.sleep(5)
                                TEST_CREATION_API.send_ir_rc_command("[CH_3]")
                                time.sleep(1)
                                TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                                time.sleep(2)
                                if not(NOS_API.grab_picture("Wrong_HDMI_video_2")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 12813")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                video_result = NOS_API.compare_pictures("HDMI_video_ref", "Wrong_HDMI_video_2", "[HALF_SCREEN_1080p]")
                                video_result_2 = NOS_API.compare_pictures("HDMI_video_ref_2", "Wrong_HDMI_video_2", "[HALF_SCREEN_1080p]")
                                if (video_result < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD and video_result_2 < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    video_result_final = NOS_API.compare_pictures("Wrong_HDMI_video_1", "Wrong_HDMI_video_2", "[HALF_SCREEN_1080p]")
                                    if (video_result_final < TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 12861")
                                            continue
                                        else:
                                            if(Navigation == 0):
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 12866")
                                                continue
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed")
                                                NOS_API.set_error_message("Navegação")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message) 
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                    else:
                                        #NOS_API.display_custom_dialog("STB bloqueou", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("STB Blocks. Line 12909")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB Blocks")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                            NOS_API.set_error_message("STB bloqueou")
                                            error_codes = NOS_API.test_cases_results_info.block_error_code
                                            error_messages = NOS_API.test_cases_results_info.block_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                            return
                        #time.sleep(1)
                        #TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                        
                        #if(NOS_API.test_cases_results_info.AutoDiagHDDTest == 0):
                        ## Start recording
                        TEST_CREATION_API.send_ir_rc_command("[REC]")
    
                        ## Perform grab picture
                        TEST_CREATION_API.grab_picture("rec")
    
                        video_result_1 = NOS_API.compare_pictures("Rec_ref", "rec", "[REC_ICON]")
                        video_result_2 = NOS_API.compare_pictures("Rec_ref_2", "rec", "[REC_ICON]")
                        #video_result_2 = NOS_API.compare_pictures("rec1_ref", "rec", "[REC_ICON]")
    
                        ## Check if recording is started
                        if (video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
    
                            ## Use this variable in script Video Recording Content to check is recording started or not
                            NOS_API.test_cases_results_info.recording_started = True
                            REC_START_Result = True
    
                        else:
                            if not(NOS_API.display_custom_dialog("O Led REC est\xe1 ligado?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                ## Start recording
                                TEST_CREATION_API.send_ir_rc_command("[REC]")
                                
                                if not(NOS_API.grab_picture("rec_1")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 12979")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                                video_result = NOS_API.compare_pictures("Rec_ref", "rec_1", "[REC_ICON]")
                                video_result1 = NOS_API.compare_pictures("Rec_ref_2", "rec", "[REC_ICON]")

                                ## Check if recording is started
                                if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    ## Use this variable in script Video Recording Content to check is recording started or not
                                    NOS_API.test_cases_results_info.recording_started = True
                                    REC_START_Result = True                          
                                else:
                                    if not(NOS_API.display_custom_dialog("O Led REC est\xe1 ligado?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                        ## Use this variable in script Video Recording Content to check is recording started or not
                                        NOS_API.test_cases_results_info.recording_started = False
                
                                        TEST_CREATION_API.write_log_to_file("Recording is not started")
                
                                            
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.recording_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.recording_error_message \
                                                                                    + "; V: " + str(video_result_1))
                                        error_codes = NOS_API.test_cases_results_info.recording_error_code
                                        error_messages = NOS_API.test_cases_results_info.recording_error_message
                                        NOS_API.set_error_message("HDD")
                                        Repeat = 2
                                    else:
                                        ## Use this variable in script Video Recording Content to check is recording started or not
                                        NOS_API.test_cases_results_info.recording_started = True
                                        REC_START_Result = True   
                            else:
                                ## Use this variable in script Video Recording Content to check is recording started or not
                                NOS_API.test_cases_results_info.recording_started = True
                                REC_START_Result = True
                                
                        if not(NOS_API.grab_picture("Double_Rec")):
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 13055")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                
                                NOS_API.add_test_case_result_to_file_report(
                                                test_result,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                error_codes,
                                                error_messages)
                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                report_file = ""    
                                if (test_result != "PASS"):
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                
                                ## Update test result
                                TEST_CREATION_API.update_test_result(test_result)
                            
                                ## Return DUT to initial state and de-initialize grabber device
                                NOS_API.deinitialize()
                                return
                        video_result = NOS_API.compare_pictures("Double_Rec_ref", "Double_Rec", "[Double_Rec]")
                        if (video_result >= NOS_API.thres):
                            time.sleep(1)
                            TEST_CREATION_API.send_ir_rc_command("[Down]")
                            TEST_CREATION_API.send_ir_rc_command("[OK]")
                        #else:
                        #    REC_START_Result = True
                    if(REC_START_Result):
            
                        if (NOS_API.is_signal_present_on_video_source_PaceDSR8151(2, 10, True)):                
                
                            if not (NOS_API.is_signal_present_on_video_source_PaceDSR8151(2, 10, True)):
                                #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 13110")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    test_result = "FAIL"
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                                
                            if not(NOS_API.grab_picture("HDMI_video_Resolution")):
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 13154")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                    NOS_API.set_error_message("Reboot")
                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            video_result = NOS_API.compare_pictures("Resolution", "HDMI_video_Resolution", "[Resolution]")
                            if (video_result >= NOS_API.thres):
                                #NOS_API.display_custom_dialog("STB bloqueou", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Bloqueou. Line 13199")
                                    continue
                                else:
                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                    error_codes = NOS_API.test_cases_results_info.block_error_code
                                    error_messages = NOS_API.test_cases_results_info.block_error_message
                                    NOS_API.set_error_message("STB's bloqueou")
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                    report_file = ""
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    
                                    NOS_API.send_report_over_mqtt(
                                                test_result, 
                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                "",
                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                end_time,
                                                error_codes,
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                "- - - - - - - - - - - - - - - - - - - -",
                                                report_file)
                                    return
                            
                            
                            ## Record video with duration of recording (10 seconds)
                            NOS_API.record_video("video", MAX_RECORD_VIDEO_TIME)
                    
                            ## Instance of PQMAnalyse type
                            pqm_analyse = TEST_CREATION_API.PQMAnalyse()
                    
                            ## Set what algorithms should be checked while analyzing given video file with PQM.
                            # Attributes are set to false by default.
                            pqm_analyse.black_screen_activ = True
                            pqm_analyse.blocking_activ = True
                            pqm_analyse.freezing_activ = True
                    
                            # Name of the video file that will be analysed by PQM.
                            pqm_analyse.file_name = "video"
                    
                            ## Analyse recorded video
                            analysed_video = TEST_CREATION_API.pqm_analysis(pqm_analyse)
                    
                            if (pqm_analyse.black_screen_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):   
                                pqm_analyse_check = False
                                NOS_API.set_error_message("Video HDMI") 
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_code \
                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_message)
                                error_codes = NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_code
                                error_messages = NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_message
                            if (pqm_analyse.blocking_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):
                                pqm_analyse_check = False
                                NOS_API.set_error_message("Video HDMI") 
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_code \
                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_message)
                                if (error_codes == ""):
                                    error_codes = NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_code
                                else:
                                    error_codes = error_codes + " " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_code
                                    
                                if (error_messages == ""):
                                    error_messages = NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_message
                                else:
                                    error_messages = error_messages + " " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_message
                            if (pqm_analyse.freezing_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):
                                pqm_analyse_check = False
                                NOS_API.set_error_message("Video HDMI") 
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_code \
                                        + "; Error message: " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_message)
                                if (error_codes == ""):
                                    error_codes = NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_code
                                else:
                                    error_codes = error_codes + " " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_code
                                
                                if (error_messages == ""):
                                    error_messages = NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_message
                                else:
                                    error_messages = error_messages + " " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_message
                            
                            if not(pqm_analyse_check): 
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Fails on PQM analyses. Line 13305")
                                    continue
                                else:
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                            
                            if not(analysed_video): 
                                if(Repeat == 0):
                                    Repeat = Repeat + 1
                                    TEST_CREATION_API.write_log_to_file("Could'n't Record Video. Line 13342")
                                    continue
                                else:
                                    TEST_CREATION_API.write_log_to_file("Could'n't Record Video")
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.grabber_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.grabber_error_message)
                                    error_codes = NOS_API.test_cases_results_info.grabber_error_code
                                    error_messages = NOS_API.test_cases_results_info.grabber_error_message
                                    NOS_API.set_error_message("Inspection")
                                    
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                    report_file = NOS_API.create_test_case_log_file(
                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                    "",
                                                    end_time)
                                    NOS_API.upload_file_report(report_file)
                                    NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return   
                            else:
                                test_result_output = True
                        else:
                            #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 13387")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                Repeat = 2
                            
                    ############################################################################## HDMI 1080p Quality ########################################################################### 
    
                    if(test_result_output):
                        
                        if (NOS_API.is_signal_present_on_video_source_PaceDSR8151(2, 10, True)):
                                
                            counter = 0
                            video_result = 0
                            while (counter < 3):
                                ## Perform grab picture
                                if not(NOS_API.grab_picture("HDMI_video")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 13411")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                counter = 3
                                ## Compare grabbed and expected image and get result of comparison
                                video_result = NOS_API.compare_pictures("HDMI_video_ref", "HDMI_video", "[HALF_SCREEN_1080p]")
                                video_result_1 = NOS_API.compare_pictures("HDMI_video_ref_2", "HDMI_video", "[HALF_SCREEN_1080p]")
                
                                ## Check video analysis results and update comments
                                if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    ## Set test result to PASS
                                    HDMI_1080i_Result = True
                                    TEST_CREATION_API.write_log_to_file("Video Result: "+str(video_result))
                                    TEST_CREATION_API.write_log_to_file("Video THRESHOLD: "+str(TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD))
                                    break
                                else:
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("HDMI NOK. Line 13466")
                                        break
                                    else:
                                        TEST_CREATION_API.write_log_to_file("Video with RT-RK pattern is not reproduced correctly on HDMI 1080p.")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_1080p_noise_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.hdmi_1080p_noise_error_message)
                                        TEST_CREATION_API.write_log_to_file("Video Result: "+str(video_result))
                                        TEST_CREATION_API.write_log_to_file("Video THRESHOLD: "+str(TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD))
                                        error_codes = NOS_API.test_cases_results_info.hdmi_1080p_noise_error_code
                                        error_messages = NOS_API.test_cases_results_info.hdmi_1080p_noise_error_message
                                        NOS_API.set_error_message("Video HDMI")
                                        Repeat = 2
                        else:
                            #NOS_API.display_custom_dialog("Perdeu sinal a meio do teste", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                            if(Repeat == 0):
                                Repeat = Repeat + 1
                                TEST_CREATION_API.write_log_to_file("Reboot. Line 13481")
                                continue
                            else:
                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                NOS_API.set_error_message("Reboot")
                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                Repeat = 2
                            
                    if(HDMI_1080i_Result):
                        NOS_API.grabber_stop_video_source()
                        time.sleep(1)
                        NOS_API.grabber_stop_audio_source()
                        time.sleep(1)
                    
                        ## Initialize input interfaces of DUT RT-AV101 device 
                        NOS_API.reset_dut()
    
                        ## Start grabber device with video on default video source
                        NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.CVBS2)
                        
                        if not(NOS_API.is_signal_present_on_video_source()):
                            NOS_API.display_dialog("Confirme o cabo SCART e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                        
                        #TEST_CREATION_API.send_ir_rc_command("[VOL HALF]")
                
                        if (NOS_API.is_signal_present_on_video_source()):
                            ## Check if video is playing (check if video is not freezed)
                            if (NOS_API.is_video_playing(TEST_CREATION_API.VideoInterface.CVBS2)):
                                video_result = 0
                                counter = 0
                                try:    
                                    ## Perform grab picture
                                    if not(NOS_API.grab_picture("SCART_video")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("HDMI NOK. Line 13519")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("No Signal on Scart")
                                            NOS_API.set_error_message("Video Scart")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.scart_image_absence_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.scart_image_absence_error_message)
                                            error_codes = NOS_API.test_cases_results_info.scart_image_absence_error_code
                                            error_messages = NOS_API.test_cases_results_info.scart_image_absence_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    ## Compare grabbed and expected image and get result of comparison
                                    video_result = NOS_API.compare_pictures("SCART_video_ref", "SCART_video", "[HALF_SCREEN_576p]")
                                    video_result_1 = NOS_API.compare_pictures("SCART_video_ref_1", "SCART_video", "[HALF_SCREEN_576p]")
                                    
                                except Exception as error:
                                    ## Set test result to INCONCLUSIVE
                                    TEST_CREATION_API.write_log_to_file(str(error))
                                    test_result = "FAIL"
                                    TEST_CREATION_API.write_log_to_file("There is no signal on SCART interface.")
                                    
                                ## Check video analysis results and update comments
                                if (video_result >= NOS_API.DEFAULT_CVBS_VIDEO_THRESHOLD or video_result_1 >= NOS_API.DEFAULT_CVBS_VIDEO_THRESHOLD):
                                    ## Set test result to PASS
                                    test_result_SCART_video = True
                                    TEST_CREATION_API.write_log_to_file("Video Result: "+str(video_result))
                                    TEST_CREATION_API.write_log_to_file("Video THRESHOLD: "+str(NOS_API.DEFAULT_CVBS_VIDEO_THRESHOLD))
                                else:
                                    TEST_CREATION_API.write_log_to_file("Video with RT-RK pattern is not reproduced correctly on SCART interface.")
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.scart_noise_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.scart_noise_error_message)
                                    TEST_CREATION_API.write_log_to_file("Video Result: "+str(video_result))
                                    TEST_CREATION_API.write_log_to_file("Video THRESHOLD: "+str(NOS_API.DEFAULT_CVBS_VIDEO_THRESHOLD))
                                    error_codes = NOS_API.test_cases_results_info.scart_noise_error_code
                                    error_messages =  NOS_API.test_cases_results_info.scart_noise_error_message
                                    NOS_API.set_error_message("Video Scart")
                                    Repeat = 2
                    
                            else:
                                TEST_CREATION_API.write_log_to_file("Channel with RT-RK color bar pattern was not playing on SCART interface.")
                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.scart_image_freezing_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.scart_image_freezing_error_message \
                                                                    + "; Video is not playing on SCART interface")
                                error_codes = NOS_API.test_cases_results_info.scart_image_freezing_error_code
                                error_messages = NOS_API.test_cases_results_info.scart_image_freezing_error_message
                                NOS_API.set_error_message("Video Scart")
                                Repeat = 2
                        else:
                            TEST_CREATION_API.write_log_to_file("No Signal on Scart")
                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.scart_image_absence_error_code \
                                                        + "; Error message: " + NOS_API.test_cases_results_info.scart_image_absence_error_message)
                            error_codes = NOS_API.test_cases_results_info.scart_image_absence_error_code
                            error_messages = NOS_API.test_cases_results_info.scart_image_absence_error_message
                            NOS_API.set_error_message("Video Scart")
                            Repeat = 2
                            
                            
                        ##################################################### SCART AUDIO ################################################################### 
                
                        if(test_result_SCART_video):
                        
                            NOS_API.grabber_stop_video_source()
                            time.sleep(0.5)
                            
                            ## Start grabber device with audio on SCART audio source
                            TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.LINEIN2)
                            time.sleep(3)
                    
                            Audio_Counter = 0
                    
                            while (Audio_Counter < 3):
                                if(Audio_Counter == 2):
                                    try:
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                    except: 
                                        pass
                                        
                                    NOS_API.Inspection = True
                                    
                                    if (NOS_API.configure_power_switch_by_inspection()):
                                        if not(NOS_API.power_off()): 
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)

                                            return
                                        time.sleep(10)
                                        ## Power on STB with energenie
                                        if not(NOS_API.power_on()):
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            test_result = "FAIL"
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                            
                                            return
                                        time.sleep(15)
                                    else:
                                        TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                                        
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                        NOS_API.set_error_message("Inspection")
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                        report_file = ""
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        test_result = "FAIL"
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                        
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                        
                                        return
                                    
                                    NOS_API.Inspection = False
                                    
                                    NOS_API.initialize_grabber()
                                    
                                    ## Start grabber device with audio on SCART audio source
                                    TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.LINEIN2)
                                    time.sleep(3)
                            
                                if (Audio_Counter == 1):
                                    NOS_API.display_dialog("Confirme o cabo SCART e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                
                    
                                ## Record audio from digital output (SCART)
                                TEST_CREATION_API.record_audio("SCART_audio", MAX_RECORD_AUDIO_TIME)
                                
                                ## Compare recorded and expected audio and get result of comparison
                                audio_result_1 = NOS_API.compare_audio("No_Left_ref", "SCART_audio")
                                audio_result_2 = NOS_API.compare_audio("No_right_ref", "SCART_audio")
                                audio_result_3 = NOS_API.compare_audio("No_Both_ref", "SCART_audio")
                                
                                ## Check is audio present on channel
                                if (TEST_CREATION_API.is_audio_present("SCART_audio")):
                                    if not(audio_result_1 >= TEST_CREATION_API.AUDIO_THRESHOLD or audio_result_2 >= TEST_CREATION_API.AUDIO_THRESHOLD or audio_result_3 >= TEST_CREATION_API.AUDIO_THRESHOLD):
                                        SCART_Result = True
                                        break
                                    else:
                                        if (Audio_Counter == 2):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Audio_Issue = Audio_Issue + 1
                                                TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on SCART interface. Line 14180")
                                                repeat_test = True
                                                break
                                            else:  
                                                if(Audio_Issue == 0):
                                                    Audio_Issue = Audio_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on SCART interface. Line 14186")
                                                    repeat_test = True
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on SCART interface.")
                                                    NOS_API.update_test_slot_comment("Error codes: " + NOS_API.test_cases_results_info.scart_signal_discontinuities_error_code  \
                                                                                    + ";\n" + NOS_API.test_cases_results_info.scart_signal_interference_error_code  \
                                                                                    + "; Error messages: " + NOS_API.test_cases_results_info.scart_signal_discontinuities_error_message \
                                                                                    + ";\n" + NOS_API.test_cases_results_info.scart_signal_discontinuities_error_message)
                                                    error_codes = NOS_API.test_cases_results_info.scart_signal_discontinuities_error_code + " " + NOS_API.test_cases_results_info.scart_signal_interference_error_code
                                                    error_messages = NOS_API.test_cases_results_info.scart_signal_discontinuities_error_message + " " + NOS_API.test_cases_results_info.scart_signal_interference_error_message
                                                    NOS_API.set_error_message("Audio Scart") 
                                                    Audio_Counter = 3
                                                    Repeat = 2
                                        else:
                                            Audio_Counter = Audio_Counter + 1
                                else:
                                    if (Audio_Counter == 2):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Audio_Issue = Audio_Issue + 1
                                            TEST_CREATION_API.write_log_to_file("Audio is not present on SCART interface.. Line 14194")
                                            repeat_test = True
                                            break
                                        else:  
                                            if(Audio_Issue == 0):
                                                Audio_Issue = Audio_Issue + 1
                                                TEST_CREATION_API.write_log_to_file("Audio is not present on SCART interface. Line 14200")
                                                repeat_test = True
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Audio is not present on SCART interface.")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.scart_signal_absence_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.scart_signal_absence_error_message \
                                                                                + "; Audio is not present on SCART interface")
                                                error_codes = NOS_API.test_cases_results_info.scart_signal_absence_error_code
                                                error_messages = NOS_API.test_cases_results_info.scart_signal_absence_error_message
                                                NOS_API.set_error_message("Audio Scart") 
                                                Audio_Counter = 3
                                                Repeat = 2
                                    else:
                                        Audio_Counter = Audio_Counter + 1                       
    
            ###################################################################################################### SPDIF Test ########################################################################################################################                            
                        
                        if(SCART_Result):
                            NOS_API.grabber_stop_audio_source()
                            time.sleep(1)   
    
                            ## Start grabber device with audio on SPDIF Coaxial source
                            TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.SPDIF_COAX)
                            time.sleep(3)
                    
                            Audio_Counter = 0
                            
                            while (Audio_Counter < 3):
                                if(Audio_Counter == 2):
                                    try:
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                    except: 
                                        pass
                                        
                                    NOS_API.Inspection = True
                                    
                                    if (NOS_API.configure_power_switch_by_inspection()):
                                        if not(NOS_API.power_off()): 
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)

                                            return
                                        time.sleep(10)
                                        ## Power on STB with energenie
                                        if not(NOS_API.power_on()):
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            test_result = "FAIL"
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                            
                                            return
                                        time.sleep(15)
                                    else:
                                        TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                                        
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                        NOS_API.set_error_message("Inspection")
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                        report_file = ""
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        test_result = "FAIL"
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                        
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                        
                                        return
                                    
                                    NOS_API.Inspection = False
                                    
                                    NOS_API.initialize_grabber()
                                    
                                    ## Start grabber device with audio on SPDIF Coaxial source
                                    TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.SPDIF_COAX)
                                    time.sleep(3)

                                if (Audio_Counter == 1):
                                    NOS_API.display_dialog("Confirme o cabo SPDIF e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
    
                                ## Record audio from digital output (SPDIF COAX)
                                TEST_CREATION_API.record_audio("SPDIF_COAX_audio", MAX_RECORD_AUDIO_TIME)
                                
                                #Amostra sem som
                                audio_result_1 = NOS_API.compare_audio("No_Both_ref", "SPDIF_COAX_audio")
    
                                ## Check is audio present on channel
                                if (TEST_CREATION_API.is_audio_present("SPDIF_COAX_audio")):
                                    if (audio_result_1 < TEST_CREATION_API.AUDIO_THRESHOLD):
                                        test_result_coax = True                    
                                        break
                                    else:
                                        if (Audio_Counter == 2):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Audio_Issue = Audio_Issue + 1
                                                TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on SPDIF coaxial interface. Line 14139")
                                                repeat_test = True
                                                break
                                            else:  
                                                if(Audio_Issue == 0):
                                                    Audio_Issue = Audio_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on SPDIF coaxial interface. Line 14144")
                                                    repeat_test = True
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on SPDIF coaxial interface.")
                                                    NOS_API.update_test_slot_comment("Error codes: " + NOS_API.test_cases_results_info.spdif_coaxial_signal_discontinuities_error_code  \
                                                                                    + ";\n" + NOS_API.test_cases_results_info.spdif_coaxial_signal_interference_error_code  \
                                                                                    + "; Error messages: " + NOS_API.test_cases_results_info.spdif_coaxial_signal_discontinuities_error_message \
                                                                                    + ";\n" + NOS_API.test_cases_results_info.spdif_coaxial_signal_discontinuities_error_message)
                                                    NOS_API.set_error_message("SPDIF")
                                                    error_codes = NOS_API.test_cases_results_info.spdif_coaxial_signal_discontinuities_error_code + " " + NOS_API.test_cases_results_info.spdif_coaxial_signal_interference_error_code
                                                    error_messages = NOS_API.test_cases_results_info.spdif_coaxial_signal_discontinuities_error_message + " " + NOS_API.test_cases_results_info.spdif_coaxial_signal_interference_error_message
                                                    Audio_Counter = 3
                                                    Repeat = 2
                                        else:
                                            Audio_Counter = Audio_Counter + 1
                                else:
                                    if (Audio_Counter == 2):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Audio_Issue = Audio_Issue + 1
                                            TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF coaxial interface. Line 14164")
                                            repeat_test = True
                                            break
                                        else:  
                                            if(Audio_Issue == 0):
                                                Audio_Issue = Audio_Issue + 1
                                                TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF coaxial interface. Line 14168")
                                                repeat_test = True
                                                break
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF coaxial interface.")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.spdif_coaxial_signal_absence_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.spdif_coaxial_signal_absence_error_message \
                                                                                + "; Audio is not present on SCART interface")
                                                NOS_API.set_error_message("SPDIF")
                                                error_codes = NOS_API.test_cases_results_info.spdif_coaxial_signal_absence_error_code
                                                error_messages = NOS_API.test_cases_results_info.spdif_coaxial_signal_absence_error_message
                                                Audio_Counter = 3
                                                Repeat = 2
                                    else:
                                        Audio_Counter = Audio_Counter + 1
                            if(repeat_test):
                                continue
                            ###############################################################  SPDIF OPTICAL TEST ###############################################################            
                                        
                            if(test_result_coax):
                            
                                NOS_API.grabber_stop_audio_source()
                                time.sleep(0.5)
                                
                                ## Start grabber device with audio on default audio source
                                TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.SPDIF_OPT)
                                time.sleep(3)
                                
                                Audio_Counter = 0
                                
                                while (Audio_Counter < 3):
                                    if(Audio_Counter == 2):
                                        try:
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                        except: 
                                            pass
                                            
                                        NOS_API.Inspection = True
                                        
                                        if (NOS_API.configure_power_switch_by_inspection()):
                                            if not(NOS_API.power_off()): 
                                                TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                NOS_API.set_error_message("Inspection")
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)

                                                return
                                            time.sleep(10)
                                            ## Power on STB with energenie
                                            if not(NOS_API.power_on()):
                                                TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                NOS_API.set_error_message("Inspection")
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                test_result = "FAIL"
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                                
                                                return
                                            time.sleep(15)
                                        else:
                                            TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                                            
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            test_result = "FAIL"
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                            
                                            return
                                        
                                        NOS_API.Inspection = False
                                        
                                        NOS_API.initialize_grabber()
                                        
                                        ## Start grabber device with audio on default audio source
                                        TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.SPDIF_OPT)
                                        time.sleep(3)
                                    
                                    if (Audio_Counter == 1):
                                        NOS_API.display_dialog("Confirme o cabo TOSLINK e restantes cabos", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                    
                                    ## Record audio from digital output (SPDIF OPT)
                                    TEST_CREATION_API.record_audio("SPDIF_OPT_audio", MAX_RECORD_AUDIO_TIME)
                                    
                                    #Amostra sem som
                                    audio_result_1 = NOS_API.compare_audio("No_Both_ref", "SPDIF_OPT_audio")
    
                                    ## Check is audio present on channel
                                    if (TEST_CREATION_API.is_audio_present("SPDIF_OPT_audio")):
                                        if (audio_result_1 < TEST_CREATION_API.AUDIO_THRESHOLD):
                                            SPDIF_OPT_test = True
                                            break  
                                        else:
                                            if (Audio_Counter == 2):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    Audio_Issue = Audio_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF optical interface. Line 14357")
                                                    repeat_test = True
                                                    break
                                                else:  
                                                    if(Audio_Issue == 0):
                                                        Audio_Issue = Audio_Issue + 1
                                                        TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF optical interface. Line 14362")
                                                        repeat_test = True
                                                        break
                                                    else:
                                                        TEST_CREATION_API.write_log_to_file("Audio with RT-RK pattern is not reproduced correctly on SPDIF optical interface.")
                                                        NOS_API.update_test_slot_comment("Error codes: " + NOS_API.test_cases_results_info.spdif_optical_signal_discontinuities_error_code  \
                                                                                            + ";\n" + NOS_API.test_cases_results_info.spdif_optical_signal_interference_error_code  \
                                                                                            + "; Error messages: " + NOS_API.test_cases_results_info.spdif_optical_signal_discontinuities_error_message \
                                                                                            + ";\n" + NOS_API.test_cases_results_info.spdif_optical_signal_discontinuities_error_message)
                                                        error_codes = NOS_API.test_cases_results_info.spdif_optical_signal_discontinuities_error_code + " " + NOS_API.test_cases_results_info.spdif_optical_signal_interference_error_code
                                                        error_messages = NOS_API.test_cases_results_info.spdif_optical_signal_discontinuities_error_message + " " + NOS_API.test_cases_results_info.spdif_optical_signal_discontinuities_error_message
                                                        Audio_Counter = 3
                                                        Repeat = 2
                                                        NOS_API.set_error_message("TOSLINK")
                        
                                            else: 
                                                Audio_Counter = Audio_Counter + 1
                                    else:
                                        if (Audio_Counter == 2):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                Audio_Issue = Audio_Issue + 1
                                                TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF optical interface. Line 14383")
                                                repeat_test = True
                                                break
                                            else:  
                                                if(Audio_Issue == 0):
                                                    Audio_Issue = Audio_Issue + 1
                                                    TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF optical interface. Line 14388")
                                                    repeat_test = True
                                                    break
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("Audio is not present on SPDIF optical interface.")
                                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.spdif_optical_signal_absence_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.spdif_optical_signal_absence_error_message \
                                                                                + "; Audio is not present on SPDIF optical interface" )
                                                    error_codes = NOS_API.test_cases_results_info.spdif_optical_signal_absence_error_code
                                                    error_messages = NOS_API.test_cases_results_info.spdif_optical_signal_absence_error_message
                                                    Audio_Counter = 3
                                                    Repeat = 2
                                                    NOS_API.set_error_message("TOSLINK")
                    
                                        else:
                                            Audio_Counter = Audio_Counter + 1    
                                
                                if (repeat_test):
                                    continue
                                    
                            #if(SPDIF_OPT_test and NOS_API.test_cases_results_info.AutoDiagHDDTest == 0):
                            if(SPDIF_OPT_test):
                                NOS_API.grabber_stop_audio_source()
                                time.sleep(1)
                                
                                ## Start grabber device with video on default video source
                                NOS_API.grabber_start_video_source(TEST_CREATION_API.VideoInterface.HDMI1)
                                TEST_CREATION_API.grabber_start_audio_source(TEST_CREATION_API.AudioInterface.HDMI1)
                                
                                TEST_CREATION_API.send_ir_rc_command("[DVR]")
                                
                                if not(NOS_API.is_signal_present_on_video_source()):
                                    time.sleep(3)
                                
                                TEST_CREATION_API.send_ir_rc_command("[Left]")
                                TEST_CREATION_API.send_ir_rc_command("[MegaUP]")
                                
                                if not(NOS_API.grab_picture("Check_Content_was_recorded")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 13747")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                                if (TEST_CREATION_API.compare_pictures("HDD_Menu_Empty_ref", "Check_Content_was_recorded", "[Check_HDD_Menu_Empty]")):
                                    TEST_CREATION_API.send_ir_rc_command("[Left]")
                                    TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                                    TEST_CREATION_API.send_ir_rc_command("[EXIT]")
                                    time.sleep(1)
                                    TEST_CREATION_API.send_ir_rc_command("[DVR]")
                                    if not(NOS_API.grab_picture("Check_Content_was_recorded")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 13842")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    if (TEST_CREATION_API.compare_pictures("HDD_Menu_Empty_ref", "Check_Content_was_recorded", "[Check_HDD_Menu_Empty]")):
                                        #NOS_API.display_dialog("STB bloqueou", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("STB Blocks. Line 14670")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB Blocks")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                            NOS_API.set_error_message("STB bloqueou")
                                            error_codes = NOS_API.test_cases_results_info.block_error_code
                                            error_messages = NOS_API.test_cases_results_info.block_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                            return
                                                                
                                if (TEST_CREATION_API.compare_pictures("Empty_After_Record_ref", "Check_Content_was_recorded", "[HDD_Content_After_Record]")):
                                    ## Use this variable in script Video Recording Content to check is recording started or not
                                    NOS_API.test_cases_results_info.recording_started = False
            
                                    TEST_CREATION_API.write_log_to_file("STB didn't save Recorded Content")
    
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.recording_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.recording_error_message \
                                                                                + "; V: " + str(video_result_1))
                                    error_codes = NOS_API.test_cases_results_info.recording_error_code
                                    error_messages = NOS_API.test_cases_results_info.recording_error_message
                                    NOS_API.set_error_message("HDD")
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                    report_file = ""
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    
                                    NOS_API.send_report_over_mqtt_test_plan(
                                            test_result,
                                            end_time,
                                            error_codes,
                                            report_file)
                                
                                    return
                                
                                if not(TEST_CREATION_API.compare_pictures("Check_Content_was_recorded_ref", "Check_Content_was_recorded", "[Check_Content_Was_Recorded]") or TEST_CREATION_API.compare_pictures("Check_Content_was_recorded_ref_2", "Check_Content_was_recorded", "[Check_Content_Was_Recorded]")):
                                    TEST_CREATION_API.send_ir_rc_command("[NAVIGATE_SC_MENU_FROM_INFO_ZON_BOX_MENU]")
                                    
                                    if not(NOS_API.grab_picture("Time_Recorded")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 13747")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                
                                    Time_Recorded = int(NOS_API.replace_missed_chars_with_numbers(TEST_CREATION_API.OCR_recognize_text("Time_Recorded", "[Time_Recorded]", "[OCR_FILTER]", "Time_Recorded")))
                                    
                                    if(Time_Recorded < 9):
                                        TEST_CREATION_API.send_ir_rc_command("[Play_Content_Without_Red_Ball]")
                                    else:
                                        NOS_API.test_cases_results_info.recording_started = False
                                    
                                        TEST_CREATION_API.write_log_to_file("Recording is not started")
                                    
                                            
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.recording_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.recording_error_message \
                                                                                    + "; V: " + str(video_result_1))
                                        error_codes = NOS_API.test_cases_results_info.recording_error_code
                                        error_messages = NOS_API.test_cases_results_info.recording_error_message
                                        NOS_API.set_error_message("HDD")
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[PLAY_CONTENT_FROM_HDD]")
    
                                if (NOS_API.is_signal_present_on_video_source_PaceDSR8151(2, 10, True)):      
                        
                                    if not (NOS_API.is_signal_present_on_video_source_PaceDSR8151(2, 10, True)):
                                        #NOS_API.display_dialog("Perdeu sinal a meio do teste", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot. Line 13923")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            test_result = "FAIL"
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                        
                                    if not(NOS_API.grab_picture("Check_Play")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 13967")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    if (TEST_CREATION_API.compare_pictures("Check_Play_ref", "Check_Play", "[HDD_MENU_HD]", NOS_API.thres)):
                                        TEST_CREATION_API.send_ir_rc_command("[PLAY_CONTENT_FROM_HDD_MENU]")
                                        if not(NOS_API.grab_picture("Check_Play_1")):
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("Reboot. Line 14013")
                                                continue
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                NOS_API.set_error_message("Reboot")
                                                error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                        if (TEST_CREATION_API.compare_pictures("Check_Play_ref", "Check_Play_1", "[HDD_MENU_HD]", NOS_API.thres)):
                                            #NOS_API.display_dialog("STB bloqueou", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                            if(Repeat == 0):
                                                Repeat = Repeat + 1
                                                TEST_CREATION_API.write_log_to_file("STB Blocks. Line 14057")
                                                continue
                                            else:
                                                TEST_CREATION_API.write_log_to_file("STB Blocks")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.block_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.block_error_message)
                                                NOS_API.set_error_message("STB bloqueou")
                                                error_codes = NOS_API.test_cases_results_info.block_error_code
                                                error_messages = NOS_API.test_cases_results_info.block_error_message
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                                return
                                        
                                    ## Record video with duration of recording (10 seconds)
                                    NOS_API.record_video("Recorde_video", MAX_RECORD_VIDEO_TIME)
                            
                                    ## Instance of PQMAnalyse type
                                    pqm_analyse = TEST_CREATION_API.PQMAnalyse()
                            
                                    ## Set what algorithms should be checked while analyzing given video file with PQM.
                                    # Attributes are set to false by default.
                                    pqm_analyse.black_screen_activ = True
                                    pqm_analyse.blocking_activ = True
                                    pqm_analyse.freezing_activ = True
                            
                                    # Name of the video file that will be analysed by PQM.
                                    pqm_analyse.file_name = "Recorde_video"
                            
                                    ## Analyse recorded video
                                    analysed_video = TEST_CREATION_API.pqm_analysis(pqm_analyse)
                            
                                    if (pqm_analyse.black_screen_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):   
                                        pqm_analyse_check = False
                                        NOS_API.set_error_message("HDD") 
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_code \
                                                + "; Error message: " + NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_message)
                                        error_codes = NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_code
                                        error_messages = NOS_API.test_cases_results_info.hdmi_1080p_image_absence_error_message
                                    if (pqm_analyse.blocking_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):
                                        pqm_analyse_check = False
                                        NOS_API.set_error_message("HDD") 
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_code \
                                                + "; Error message: " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_message)
                                        if (error_codes == ""):
                                            error_codes = NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_code
                                        else:
                                            error_codes = error_codes + " " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_code
                                            
                                        if (error_messages == ""):
                                            error_messages = NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_message
                                        else:
                                            error_messages = error_messages + " " + NOS_API.test_cases_results_info.hdmi_1080p_blocking_error_message
                                    if (pqm_analyse.freezing_detected == TEST_CREATION_API.AlgorythmResult.DETECTED):
                                        pqm_analyse_check = False
                                        NOS_API.set_error_message("HDD") 
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_code \
                                                + "; Error message: " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_message)
                                        if (error_codes == ""):
                                            error_codes = NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_code
                                        else:
                                            error_codes = error_codes + " " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_code
                                        
                                        if (error_messages == ""):
                                            error_messages = NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_message
                                        else:
                                            error_messages = error_messages + " " + NOS_API.test_cases_results_info.hdmi_1080p_image_freezing_error_message
                                    
                                    if not(pqm_analyse_check): 
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Fails on PQM analyses. Line 14157")
                                            continue
                                        else:
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    
                                    if not(analysed_video): 
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Could'n't Record Video. Line 14194")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("Could'n't Record Video")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.grabber_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.grabber_error_message)
                                            error_codes = NOS_API.test_cases_results_info.grabber_error_code
                                            error_messages = NOS_API.test_cases_results_info.grabber_error_message
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return   
                                    else:
                                        HDD_Video_Output = True
                                else:
                                    #NOS_API.display_dialog("Perdeu sinal a meio do teste", NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "Continuar"
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 14239")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        Repeat = 2
                                    
                            if(HDD_Video_Output):
                                counter = 0
                                video_result = 0
                                while (counter < 3):
                                    ## Perform grab picture
                                    if not(NOS_API.grab_picture("HDMI_video")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 14258")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    counter = 3
                                    ## Compare grabbed and expected image and get result of comparison
                                    video_result = NOS_API.compare_pictures("HDMI_video_ref", "HDMI_video", "[HALF_SCREEN_1080p]")
                                    video_result_1 = NOS_API.compare_pictures("HDMI_video_ref_2", "HDMI_video", "[HALF_SCREEN_1080p]")
                    
                                    ## Check video analysis results and update comments
                                    if (video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        ## Set test result to PASS
                                        HDD_Video_Quality = True
                                        TEST_CREATION_API.write_log_to_file("Video Result: "+str(video_result))
                                        TEST_CREATION_API.write_log_to_file("Video THRESHOLD: "+str(TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD))
                                        break
                                    else:
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Recorded video is not reproduced correctly on HDMI 720p interface.. Line 14313")
                                            continue
                                        else:
                                            TEST_CREATION_API.write_log_to_file("Recorded video is not reproduced correctly on HDMI 720p interface.")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.recorded_content_nok_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.recorded_content_nok_error_message)
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_message \
                                                                                + "; V: " + str(video_result))
                                            NOS_API.set_error_message("HDD") 
                                            error_codes = NOS_API.test_cases_results_info.recorded_content_nok_error_code + " " + NOS_API.test_cases_results_info.hdmi_720p_noise_error_code
                                            error_messages =  NOS_API.test_cases_results_info.recorded_content_nok_error_message + " " +  NOS_API.test_cases_results_info.hdmi_720p_noise_error_message
                                            Repeat = 2
                            
                            if(HDD_Video_Quality):
                                # Record audio from HDMI
                                TEST_CREATION_API.record_audio("Recorded_audio", MAX_RECORD_AUDIO_TIME)         
                                
                                #Amostra sem som
                                audio_result_1 = NOS_API.compare_audio("No_Both_ref", "Recorded_audio")
                                
                                if (audio_result_1 < TEST_CREATION_API.AUDIO_THRESHOLD):                   
                                    HDD_Audio_Quality = True
                                else:
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Audio is not present on Recorded Content. Line 14339")
                                        continue
                                    else:
                                        TEST_CREATION_API.write_log_to_file("Audio is not present on Recorded Content.")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.recorded_content_nok_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.recorded_content_nok_error_message)
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdmi_720p_signal_absence_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.hdmi_720p_signal_absence_error_message \
                                                                            + "; Audio is not present on hdmi_576p interface")
                                        error_codes = NOS_API.test_cases_results_info.recorded_content_nok_error_code + " " + NOS_API.test_cases_results_info.hdmi_720p_signal_absence_error_code
                                        error_messages = NOS_API.test_cases_results_info.recorded_content_nok_error_message + " " +  NOS_API.test_cases_results_info.hdmi_720p_signal_absence_error_message
                                        NOS_API.set_error_message("HDD") 
                                        Repeat = 2
                            NOS_API.Send_Serial_Key("d", "feito")
                            
                            if (HDD_Audio_Quality and NOS_API.test_cases_results_info.AutoDiagHDDTest == 1):
                                if not(NOS_API.display_custom_dialog("Ventoinha?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                    TEST_CREATION_API.write_log_to_file("FAN is not running")
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.fan_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.fan_error_message)
                                    NOS_API.set_error_message("Ventoinha")
                                    error_codes = NOS_API.test_cases_results_info.fan_error_code
                                    error_messages = NOS_API.test_cases_results_info.fan_error_message
                                    test_result = "FAIL"
                                    NOS_API.add_test_case_result_to_file_report(
                                                    test_result,
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                    error_codes,
                                                    error_messages)
                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    report_file = ""    
                                    if (test_result != "PASS"):
                                        report_file = NOS_API.create_test_case_log_file(
                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                        "",
                                                        end_time)
                                        NOS_API.upload_file_report(report_file)
                                        NOS_API.test_cases_results_info.isTestOK = False
                                        
                                        NOS_API.send_report_over_mqtt_test_plan(
                                                test_result,
                                                end_time,
                                                error_codes,
                                                report_file)
                                    
                                    
                                    ## Update test result
                                    TEST_CREATION_API.update_test_result(test_result)
                                
                                    ## Return DUT to initial state and de-initialize grabber device
                                    NOS_API.deinitialize()
                                    return
                                    
                                NOS_API.display_custom_dialog("Pressione no bot\xe3o 'Power'", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                time.sleep(2)
                                if (NOS_API.is_signal_present_on_video_source()):
                                    NOS_API.display_custom_dialog("Pressione no bot\xe3o 'Power'", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                    time.sleep(2)
                                    if (NOS_API.is_signal_present_on_video_source()):
                                        TEST_CREATION_API.write_log_to_file("Power button NOK")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_button_nok_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.power_button_nok_error_message)
                                        NOS_API.set_error_message("Botões")   
                                        error_codes = NOS_API.test_cases_results_info.power_button_nok_error_code
                                        error_messages = NOS_API.test_cases_results_info.power_button_nok_error_message  
                                        test_result = "FAIL"
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                if (NOS_API.display_custom_dialog("O Led Vermelho est\xe1 ligado?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                    while (counter_AD < ATTEMPT_OPEN_AUTODIAG):
                                        NOS_API.configure_power_switch_by_inspection()
                                        if not(NOS_API.power_off()): 
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')   
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                            return
                                        NOS_API.display_custom_dialog("Pressione Continuar no monitor e de seguida pressione '-' e '+'", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG)
                                        if not(NOS_API.power_on()): 
                                            TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                            NOS_API.set_error_message("Inspection")
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')   
                                            report_file = ""
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                            return
                                        start_time_in_ms = int(time.time() * MS_MULTIPLIER)
                                        result = NOS_API.display_custom_dialog("", 1, ["Repetir"], WAIT_AUTODIAG_START)
                                        timeout_AD = int(time.time() * MS_MULTIPLIER) - start_time_in_ms
                                        if (result == "Repetir"):
                                            if (timeout_AD > (WAIT_AUTODIAG_START * MS_MULTIPLIER)):
                                                result_wait = NOS_API.wait_for_multiple_pictures(["AutoDiag_ref"], WAIT_FIRST_AUTODIAG_TEST, ["[AutoDiag]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                if (result_wait != -1 and result_wait != -2):
                                                    if (NOS_API.display_custom_dialog("O Display est\xe1 ligado?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                                        TEST_CREATION_API.send_ir_rc_command("[HDD_Test_Menu]")
                                                        result_wait = NOS_API.wait_for_multiple_pictures(["HDD_Test_Menu_ref"], 10, ["[HDD_Test_Menu]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                        if not(result_wait != -1 and result_wait != -2):
                                                            TEST_CREATION_API.send_ir_rc_command("[Repeat_HDD_Test_Menu]")
                                                            result_wait = NOS_API.wait_for_multiple_pictures(["HDD_Test_Menu_ref"], 5, ["[HDD_Test_Menu]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                            if not(result_wait != -1 and result_wait != -2):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    Navigation = Navigation + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 14538")
                                                                    break
                                                                else:
                                                                    if(Navigation == 0):
                                                                        Navigation = Navigation + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 14544")
                                                                        break
                                                                    else:
                                                                        counter_AD = 4
                                                                        TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed")
                                                                        NOS_API.set_error_message("Navegação")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message) 
                                                                        error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                       
                                                        TEST_CREATION_API.send_ir_rc_command("[HDD_Erase]")
                                                        result_wait = NOS_API.wait_for_multiple_pictures(["HDD_Erase_Result_ref"], 10, ["[HDD_Erase_Menu]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                        if not(result_wait != -1 and result_wait != -2):
                                                            TEST_CREATION_API.send_ir_rc_command("[Repeat_HDD_Erase]")
                                                            result_wait = NOS_API.wait_for_multiple_pictures(["HDD_Erase_Result_ref"], 10, ["[HDD_Erase_Menu]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                            if not(result_wait != -1 and result_wait != -2):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    Navigation = Navigation + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 14678")
                                                                    break
                                                                else:
                                                                    if(Navigation == 0):
                                                                        Navigation = Navigation + 1
                                                                        BreakWhile = True
                                                                        TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 14684")
                                                                        break
                                                                    else:
                                                                        counter_AD = 4
                                                                        TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed")
                                                                        NOS_API.set_error_message("Navegação")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message) 
                                                                        error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                        
                                                        TEST_CREATION_API.send_ir_rc_command("[HDD_Erase_Pass]")
                                                        result_wait = NOS_API.wait_for_multiple_pictures(["HDD_Erase_Result_ref"], 20, ["[HDD_Erase_Menu]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                        if not(result_wait != -1 and result_wait != -2):
                                                            if not(NOS_API.grab_picture("HDD_Erase_Result")):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 14734")
                                                                    break
                                                                else:
                                                                    counter_AD = 4
                                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                                    NOS_API.set_error_message("Reboot")
                                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                                    
                                                                    NOS_API.add_test_case_result_to_file_report(
                                                                                    test_result,
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                                    error_codes,
                                                                                    error_messages)
                                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                    report_file = ""    
                                                                    if (test_result != "PASS"):
                                                                        report_file = NOS_API.create_test_case_log_file(
                                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                        "",
                                                                                        end_time)
                                                                        NOS_API.upload_file_report(report_file)
                                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                                        
                                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                                test_result,
                                                                                end_time,
                                                                                error_codes,
                                                                                report_file)
                                                                    
                                                                    
                                                                    ## Update test result
                                                                    TEST_CREATION_API.update_test_result(test_result)
                                                                
                                                                    ## Return DUT to initial state and de-initialize grabber device
                                                                    NOS_API.deinitialize()
                                                                    return
                                                            
                                                            counter_AD = 4
                                                            TEST_CREATION_API.write_log_to_file("Doesn't Erase HDD")
                                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.hdd_erase_error_code \
                                                                                                + "; Error message: " + NOS_API.test_cases_results_info.hdd_erase_error_message)
                                                            error_codes = NOS_API.test_cases_results_info.hdd_erase_error_code
                                                            error_messages = NOS_API.test_cases_results_info.hdd_erase_error_message
                                                            NOS_API.set_error_message("HDD")
                                                            
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                            report_file = ""    
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                NOS_API.test_cases_results_info.mac_using_barcode,
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            return
                                        
                                                        TEST_CREATION_API.send_ir_rc_command("[Factory_Reset_AD]")
                                                        result_wait = NOS_API.wait_for_multiple_pictures(["Factory_Reset_AD_ref"], 10, ["[Factory_Reset_Menu]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                        if not(result_wait != -1 and result_wait != -2):
                                                            TEST_CREATION_API.send_ir_rc_command("[Repeat_Factory_Reset]")
                                                            result_wait = NOS_API.wait_for_multiple_pictures(["Factory_Reset_AD_ref"], 10, ["[Factory_Reset_Menu]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                            if not(result_wait != -1 and result_wait != -2):
                                                                if(Repeat == 0):
                                                                    Repeat = Repeat + 1
                                                                    Navigation = Navigation + 1
                                                                    BreakWhile = True
                                                                    TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 14826")
                                                                    break
                                                                else:
                                                                    if(Navigation == 0):
                                                                        Navigation = Navigation + 1
                                                                        TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed. Line 14831")
                                                                        BreakWhile = True
                                                                        break
                                                                    else:
                                                                        counter_AD = 4
                                                                        TEST_CREATION_API.write_log_to_file("Navigation to resumo screen failed")
                                                                        NOS_API.set_error_message("Navegação")
                                                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                                            + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message) 
                                                                        error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                                        error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                                        NOS_API.add_test_case_result_to_file_report(
                                                                                        test_result,
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                                        error_codes,
                                                                                        error_messages)
                                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                                        report_file = ""    
                                                                        if (test_result != "PASS"):
                                                                            report_file = NOS_API.create_test_case_log_file(
                                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                            "",
                                                                                            end_time)
                                                                            NOS_API.upload_file_report(report_file)
                                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                                            
                                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                                    test_result,
                                                                                    end_time,
                                                                                    error_codes,
                                                                                    report_file)
                                                                        
                                                                        
                                                                        ## Update test result
                                                                        TEST_CREATION_API.update_test_result(test_result)
                                                                    
                                                                        ## Return DUT to initial state and de-initialize grabber device
                                                                        NOS_API.deinitialize()
                                                                        return
                                                        
                                                        TEST_CREATION_API.send_ir_rc_command("[Factory_Reset_Pass]")
                                                        time.sleep(1)
                                                        TEST_CREATION_API.send_ir_rc_command("[Factory_Reset_All]")
                                                        
                                                        result_wait = NOS_API.wait_for_multiple_pictures(["Factory_Reset_Result_ref"], 40, ["[Factory_Reset_Result]"], [TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD])
                                                        if (result_wait != -1 and result_wait != -2):
                                                            NOS_API.configure_power_switch_by_inspection()
                                                            if not(NOS_API.power_off()): 
                                                                counter_AD = 4
                                                                TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                                NOS_API.set_error_message("Inspection")
                                                                
                                                                NOS_API.add_test_case_result_to_file_report(
                                                                                test_result,
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                                error_codes,
                                                                                error_messages)
                                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')   
                                                                report_file = ""
                                                                if (test_result != "PASS"):
                                                                    report_file = NOS_API.create_test_case_log_file(
                                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                    "",
                                                                                    end_time)
                                                                    NOS_API.upload_file_report(report_file)
                                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                                
                                                                
                                                                ## Update test result
                                                                TEST_CREATION_API.update_test_result(test_result)
                                                            
                                                                ## Return DUT to initial state and de-initialize grabber device
                                                                NOS_API.deinitialize()
                                                                
                                                                NOS_API.send_report_over_mqtt_test_plan(
                                                                        test_result,
                                                                        end_time,
                                                                        error_codes,
                                                                        report_file)
                                                            
                                                                return
                                                            test_result = "PASS" 
                                                            counter_AD = 4
                                                            Repeat = 2
                                                        else:
                                                            counter_AD = 4
                                                            TEST_CREATION_API.write_log_to_file("Factory Reset Fail")
                                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.measure_boot_time_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.measure_boot_time_error_message)
                                                            NOS_API.set_error_message("Factory Reset")  
                                                            error_codes = NOS_API.test_cases_results_info.measure_boot_time_error_code
                                                            error_messages = NOS_API.test_cases_results_info.measure_boot_time_error_message
                                                            NOS_API.add_test_case_result_to_file_report(
                                                                            test_result,
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                                            error_codes,
                                                                            error_messages)
                                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')   
                                                            report_file = ""
                                                            if (test_result != "PASS"):
                                                                report_file = NOS_API.create_test_case_log_file(
                                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                                "",
                                                                                end_time)
                                                                NOS_API.upload_file_report(report_file)
                                                                NOS_API.test_cases_results_info.isTestOK = False
                                                            
                                                            
                                                            ## Update test result
                                                            TEST_CREATION_API.update_test_result(test_result)
                                                        
                                                            ## Return DUT to initial state and de-initialize grabber device
                                                            NOS_API.deinitialize()
                                                            
                                                            NOS_API.send_report_over_mqtt_test_plan(
                                                                    test_result,
                                                                    end_time,
                                                                    error_codes,
                                                                    report_file)
                                                        
                                                            return
                                                    else:
                                                        counter_AD = 4
                                                        TEST_CREATION_API.write_log_to_file("Display NOK")
                                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.display_nok_error_code \
                                                                                        + "; Error message: " + NOS_API.test_cases_results_info.display_nok_error_message)
                                                        NOS_API.set_error_message("Display")
                                                        error_codes = NOS_API.test_cases_results_info.display_nok_error_code
                                                        error_messages = NOS_API.test_cases_results_info.display_nok_error_message
                                                        
                                                        NOS_API.add_test_case_result_to_file_report(
                                                                        test_result,
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                                        error_codes,
                                                                        error_messages)
                                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')   
                                                        report_file = ""
                                                        if (test_result != "PASS"):
                                                            report_file = NOS_API.create_test_case_log_file(
                                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                            "",
                                                                            end_time)
                                                            NOS_API.upload_file_report(report_file)
                                                            NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        
                                                        ## Update test result
                                                        TEST_CREATION_API.update_test_result(test_result)
                                                    
                                                        ## Return DUT to initial state and de-initialize grabber device
                                                        NOS_API.deinitialize()
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                        return
                                        
                                        counter_AD = counter_AD + 1
                                    if(BreakWhile):
                                        continue
                                    if (counter_AD == 3):
                                        TEST_CREATION_API.write_log_to_file("Autodiag failed")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.core_ic_fail_error_code \
                                                                        + "; Error message: " + NOS_API.test_cases_results_info.core_ic_fail_error_message)
                                        NOS_API.set_error_message("AutoDiag")
                                        error_codes = NOS_API.test_cases_results_info.autodiag_error_code
                                        error_messages = NOS_API.test_cases_results_info.autodiag_error_message
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        
                                        return
                                        
                            if(HDD_Audio_Quality and NOS_API.test_cases_results_info.AutoDiagHDDTest == 0):
                                NOS_API.grabber_stop_audio_source()
                                time.sleep(1)
                                
                                TEST_CREATION_API.send_ir_rc_command("[DVR]")
                                time.sleep(1.5)
                                ## Delete recorded content
                                TEST_CREATION_API.send_ir_rc_command("[DELETE_A_CONTENT]")
                                time.sleep(1)
                                TEST_CREATION_API.send_ir_rc_command("[Factory_Reset]")
                                ## Perform grab picture
                                if not(NOS_API.grab_picture("Factory_Reset")):
                                    if(Repeat == 0):
                                        Repeat = Repeat + 1
                                        TEST_CREATION_API.write_log_to_file("Reboot. Line 15061")
                                        continue
                                    else:                                    
                                        TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                        NOS_API.set_error_message("Reboot")
                                        error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                        error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                        
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                
                                video_result = NOS_API.compare_pictures("Factory_Reset_ref", "Factory_Reset", "[Factory_Reset]")
                                video_result_2 = NOS_API.compare_pictures("Factory_Reset_ref_2", "Factory_Reset", "[Factory_Reset]")
                                
                                if not(video_result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                    TEST_CREATION_API.send_ir_rc_command("[Exit_Menu]")
                                    time.sleep(1)
                                    TEST_CREATION_API.send_ir_rc_command("[Factory_Reset_Slow]")
                                    ## Perform grab picture
                                    if not(NOS_API.grab_picture("Factory_Reset_1")):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            TEST_CREATION_API.write_log_to_file("Reboot. Line 15113")
                                            continue
                                        else:  
                                            TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                            NOS_API.set_error_message("Reboot")
                                            error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                            error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                            
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    
                                    video_result_1 = NOS_API.compare_pictures("Factory_Reset_ref", "Factory_Reset_1", "[Factory_Reset]")
                                    video_result_2 = NOS_API.compare_pictures("Factory_Reset_ref_2", "Factory_Reset", "[Factory_Reset]")
                                    
                                    if not(video_result_1 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or video_result_2 >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                        if(Repeat == 0):
                                            Repeat = Repeat + 1
                                            Navigation = Navigation + 1
                                            TEST_CREATION_API.write_log_to_file("Navigation to Factory Reset screen failed. Line 15161")
                                            continue
                                        else:  
                                            if(Navigation == 0):
                                                Navigation = Navigation + 1
                                                TEST_CREATION_API.write_log_to_file("Navigation to Factory Reset screen failed. Line 15166")
                                                continue
                                            else:  
                                                TEST_CREATION_API.write_log_to_file("Navigation to Factory Reset screen failed")
                                                NOS_API.set_error_message("Navegação")
                                                NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.navigation_error_code \
                                                                                    + "; Error message: " + NOS_API.test_cases_results_info.navigation_error_message) 
                                                error_codes = NOS_API.test_cases_results_info.navigation_error_code
                                                error_messages = NOS_API.test_cases_results_info.navigation_error_message
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                report_file = ""    
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                    
                                                    NOS_API.send_report_over_mqtt_test_plan(
                                                            test_result,
                                                            end_time,
                                                            error_codes,
                                                            report_file)
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                return
                                    else:
                                        TEST_CREATION_API.send_ir_rc_command("[OK]")
                                else:
                                    TEST_CREATION_API.send_ir_rc_command("[OK]")
                                    
                                if (NOS_API.wait_for_signal_present(35)):
                                    time.sleep(2)
                                    if (NOS_API.wait_for_signal_present(35)):
                                        if (NOS_API.wait_for_picture(["FTI_ref"], 30, "[FULL_SCREEN]", 0.0, NOS_API.thres)):
                                            Factory_Reset_Result = True
                                        else:
                                            if not(NOS_API.grab_picture("Factory_Reset_Black")):
                                                if(Repeat == 0):
                                                    Repeat = Repeat + 1
                                                    TEST_CREATION_API.write_log_to_file("Reboot. Line 15220")
                                                    continue
                                                else:
                                                    TEST_CREATION_API.write_log_to_file("STB lost Signal.Possible Reboot.")
                                                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.reboot_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.reboot_error_message)
                                                    NOS_API.set_error_message("Reboot")
                                                    error_codes = NOS_API.test_cases_results_info.reboot_error_code
                                                    error_messages = NOS_API.test_cases_results_info.reboot_error_message
                                                    
                                                    NOS_API.add_test_case_result_to_file_report(
                                                                    test_result,
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    "- - - - - - - - - - - - - - - - - - - -",
                                                                    error_codes,
                                                                    error_messages)
                                                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                                    report_file = ""    
                                                    if (test_result != "PASS"):
                                                        report_file = NOS_API.create_test_case_log_file(
                                                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                        NOS_API.test_cases_results_info.nos_sap_number,
                                                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                        "",
                                                                        end_time)
                                                        NOS_API.upload_file_report(report_file)
                                                        NOS_API.test_cases_results_info.isTestOK = False
                                                        
                                                        NOS_API.send_report_over_mqtt_test_plan(
                                                                test_result,
                                                                end_time,
                                                                error_codes,
                                                                report_file)
                                                    
                                                    
                                                    ## Update test result
                                                    TEST_CREATION_API.update_test_result(test_result)
                                                
                                                    ## Return DUT to initial state and de-initialize grabber device
                                                    NOS_API.deinitialize()
                                                    return
                                            
                                            V_Result = NOS_API.compare_pictures("Black_After_FR_ref", "Factory_Reset_Black", "[FULL_SCREEN]")
                                            V2_Result = NOS_API.compare_pictures("FTI_ref", "Factory_Reset_Black", "[FULL_SCREEN]")
                                    
                                            if (V_Result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD or V2_Result >= TEST_CREATION_API.DEFAULT_HDMI_VIDEO_THRESHOLD):
                                                Factory_Reset_Result = True
                                            else:
                                                TEST_CREATION_API.write_log_to_file("Factory Reset Fail")
                                                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.measure_boot_time_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.measure_boot_time_error_message)
                                                NOS_API.set_error_message("Factory Reset") 
                                                error_codes = NOS_API.test_cases_results_info.measure_boot_time_error_code
                                                error_messages = NOS_API.test_cases_results_info.measure_boot_time_error_message
                                                Repeat = 2
                                    else:
                                        TEST_CREATION_API.write_log_to_file("Factory Reset Fail")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.measure_boot_time_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.measure_boot_time_error_message)
                                        NOS_API.set_error_message("Factory Reset") 
                                        error_codes = NOS_API.test_cases_results_info.measure_boot_time_error_code
                                        error_messages = NOS_API.test_cases_results_info.measure_boot_time_error_message
                                        Repeat = 2
                                else:
                                    TEST_CREATION_API.write_log_to_file("Factory Reset Fail")
                                    NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.measure_boot_time_error_code \
                                                                + "; Error message: " + NOS_API.test_cases_results_info.measure_boot_time_error_message)
                                    NOS_API.set_error_message("Factory Reset") 
                                    error_codes = NOS_API.test_cases_results_info.measure_boot_time_error_code
                                    error_messages = NOS_API.test_cases_results_info.measure_boot_time_error_message
                                    Repeat = 2
                                    
                                if(Factory_Reset_Result):
                                    if not(NOS_API.display_custom_dialog("Ventoinha?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                        TEST_CREATION_API.write_log_to_file("FAN is not running")
                                        NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.fan_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.fan_error_message)
                                        NOS_API.set_error_message("Ventoinha")
                                        error_codes = NOS_API.test_cases_results_info.fan_error_code
                                        error_messages = NOS_API.test_cases_results_info.fan_error_message
                                        test_result = "FAIL"
                                        NOS_API.add_test_case_result_to_file_report(
                                                        test_result,
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        "- - - - - - - - - - - - - - - - - - - -",
                                                        error_codes,
                                                        error_messages)
                                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                        report_file = ""    
                                        if (test_result != "PASS"):
                                            report_file = NOS_API.create_test_case_log_file(
                                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                                            NOS_API.test_cases_results_info.nos_sap_number,
                                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                            "",
                                                            end_time)
                                            NOS_API.upload_file_report(report_file)
                                            NOS_API.test_cases_results_info.isTestOK = False
                                            
                                            NOS_API.send_report_over_mqtt_test_plan(
                                                    test_result,
                                                    end_time,
                                                    error_codes,
                                                    report_file)
                                        
                                        
                                        ## Update test result
                                        TEST_CREATION_API.update_test_result(test_result)
                                    
                                        ## Return DUT to initial state and de-initialize grabber device
                                        NOS_API.deinitialize()
                                        return
                                        
                                    NOS_API.display_custom_dialog("Pressione no bot\xe3o 'Power'", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                    time.sleep(2)
                                    if (NOS_API.is_signal_present_on_video_source()):
                                        NOS_API.display_custom_dialog("Pressione no bot\xe3o 'Power'", 1, ["Continuar"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) 
                                        time.sleep(2)
                                        if (NOS_API.is_signal_present_on_video_source()):
                                            TEST_CREATION_API.write_log_to_file("Power button NOK")
                                            NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_button_nok_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.power_button_nok_error_message)
                                            NOS_API.set_error_message("Botões")   
                                            error_codes = NOS_API.test_cases_results_info.power_button_nok_error_code
                                            error_messages = NOS_API.test_cases_results_info.power_button_nok_error_message  
                                            test_result = "FAIL"
                                            NOS_API.add_test_case_result_to_file_report(
                                                            test_result,
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            "- - - - - - - - - - - - - - - - - - - -",
                                                            error_codes,
                                                            error_messages)
                                            end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                            report_file = ""    
                                            if (test_result != "PASS"):
                                                report_file = NOS_API.create_test_case_log_file(
                                                                NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                NOS_API.test_cases_results_info.nos_sap_number,
                                                                NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                "",
                                                                end_time)
                                                NOS_API.upload_file_report(report_file)
                                                NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                            
                                            ## Update test result
                                            TEST_CREATION_API.update_test_result(test_result)
                                        
                                            ## Return DUT to initial state and de-initialize grabber device
                                            NOS_API.deinitialize()
                                            return
                                    if (NOS_API.display_custom_dialog("O Led Vermelho est\xe1 ligado?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                        if (NOS_API.display_custom_dialog("O Display est\xe1 ligado?", 2, ["OK", "NOK"], NOS_API.WAIT_TIME_TO_CLOSE_DIALOG) == "OK"):
                                            NOS_API.configure_power_switch_by_inspection()
                                            if not(NOS_API.power_off()): 
                                                TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                                NOS_API.set_error_message("Inspection")
                                                
                                                NOS_API.add_test_case_result_to_file_report(
                                                                test_result,
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                "- - - - - - - - - - - - - - - - - - - -",
                                                                error_codes,
                                                                error_messages)
                                                end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')   
                                                report_file = ""
                                                if (test_result != "PASS"):
                                                    report_file = NOS_API.create_test_case_log_file(
                                                                    NOS_API.test_cases_results_info.s_n_using_barcode,
                                                                    NOS_API.test_cases_results_info.nos_sap_number,
                                                                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                                                                    "",
                                                                    end_time)
                                                    NOS_API.upload_file_report(report_file)
                                                    NOS_API.test_cases_results_info.isTestOK = False
                                                
                                                
                                                ## Update test result
                                                TEST_CREATION_API.update_test_result(test_result)
                                            
                                                ## Return DUT to initial state and de-initialize grabber device
                                                NOS_API.deinitialize()
                                                
                                                NOS_API.send_report_over_mqtt_test_plan(
                                                        test_result,
                                                        end_time,
                                                        error_codes,
                                                        report_file)
                                            
                                                return
                                            test_result = "PASS" 
                                            Repeat = 2
                                        else:
                                            TEST_CREATION_API.write_log_to_file("Display NOK")
                                            NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.display_nok_error_code \
                                                                            + "; Error message: " + NOS_API.test_cases_results_info.display_nok_error_message)
                                            NOS_API.set_error_message("Display")
                                            error_codes = NOS_API.test_cases_results_info.display_nok_error_code
                                            error_messages = NOS_API.test_cases_results_info.display_nok_error_message
                                            Repeat = 2
                                    else:
                                        TEST_CREATION_API.write_log_to_file("Led POWER Red NOK")
                                        NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.led_power_red_nok_error_code \
                                                                                + "; Error message: " + NOS_API.test_cases_results_info.led_power_red_nok_error_message)
                                        NOS_API.set_error_message("Led's")
                                        error_codes = NOS_API.test_cases_results_info.led_power_red_nok_error_code
                                        error_messages = NOS_API.test_cases_results_info.led_power_red_nok_error_message
                                        Repeat = 2
   
            System_Failure = 2
        except Exception as error:
            if(System_Failure == 0):
                System_Failure = System_Failure + 1 
                NOS_API.Inspection = True
                if(System_Failure == 1):
                    try:
                        TEST_CREATION_API.write_log_to_file(error)
                    except: 
                        pass
                    try:
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        TEST_CREATION_API.write_log_to_file(error)
                    except: 
                        pass
                if (NOS_API.configure_power_switch_by_inspection()):
                    if not(NOS_API.power_off()): 
                        TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        NOS_API.set_error_message("Inspection")
                        
                        NOS_API.add_test_case_result_to_file_report(
                                        test_result,
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        error_codes,
                                        error_messages)
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                        report_file = ""
                        if (test_result != "PASS"):
                            report_file = NOS_API.create_test_case_log_file(
                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                            NOS_API.test_cases_results_info.nos_sap_number,
                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                            "",
                                            end_time)
                            NOS_API.upload_file_report(report_file)
                            NOS_API.test_cases_results_info.isTestOK = False
                        
                        
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                    
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        
                        NOS_API.send_report_over_mqtt_test_plan(
                                    test_result,
                                    end_time,
                                    error_codes,
                                    report_file)

                        return
                    time.sleep(10)
                    ## Power on STB with energenie
                    if not(NOS_API.power_on()):
                        TEST_CREATION_API.write_log_to_file("Comunication with PowerSwitch Fails")
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                        NOS_API.set_error_message("Inspection")
                        
                        NOS_API.add_test_case_result_to_file_report(
                                        test_result,
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        "- - - - - - - - - - - - - - - - - - - -",
                                        error_codes,
                                        error_messages)
                        end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S') 
                        report_file = ""
                        if (test_result != "PASS"):
                            report_file = NOS_API.create_test_case_log_file(
                                            NOS_API.test_cases_results_info.s_n_using_barcode,
                                            NOS_API.test_cases_results_info.nos_sap_number,
                                            NOS_API.test_cases_results_info.cas_id_using_barcode,
                                            "",
                                            end_time)
                            NOS_API.upload_file_report(report_file)
                            NOS_API.test_cases_results_info.isTestOK = False
                        
                        test_result = "FAIL"
                        
                        ## Update test result
                        TEST_CREATION_API.update_test_result(test_result)
                    
                        ## Return DUT to initial state and de-initialize grabber device
                        NOS_API.deinitialize()
                        
                        NOS_API.send_report_over_mqtt_test_plan(
                                test_result,
                                end_time,
                                error_codes,
                                report_file)
                        
                        return
                    time.sleep(10)
                else:
                    TEST_CREATION_API.write_log_to_file("Incorrect test place name")
                    
                    NOS_API.update_test_slot_comment("Error code = " + NOS_API.test_cases_results_info.power_switch_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.power_switch_error_message)
                    NOS_API.set_error_message("Inspection")
                    
                    NOS_API.add_test_case_result_to_file_report(
                                    test_result,
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    "- - - - - - - - - - - - - - - - - - - -",
                                    error_codes,
                                    error_messages)
                    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  
                    report_file = ""
                    if (test_result != "PASS"):
                        report_file = NOS_API.create_test_case_log_file(
                                        NOS_API.test_cases_results_info.s_n_using_barcode,
                                        NOS_API.test_cases_results_info.nos_sap_number,
                                        NOS_API.test_cases_results_info.cas_id_using_barcode,
                                        "",
                                        end_time)
                        NOS_API.upload_file_report(report_file)
                        NOS_API.test_cases_results_info.isTestOK = False
                    
                    test_result = "FAIL"
                    ## Update test result
                    TEST_CREATION_API.update_test_result(test_result)
                    
                
                    ## Return DUT to initial state and de-initialize grabber device
                    NOS_API.deinitialize()
                    
                    NOS_API.send_report_over_mqtt_test_plan(
                        test_result,
                        end_time,
                        error_codes,
                        report_file)
                    
                    return
                
                NOS_API.Inspection = False
            else:
                test_result = "FAIL"
                TEST_CREATION_API.write_log_to_file(error)
                NOS_API.update_test_slot_comment("Error code: " + NOS_API.test_cases_results_info.grabber_error_code \
                                                                    + "; Error message: " + NOS_API.test_cases_results_info.grabber_error_message)
                error_codes = NOS_API.test_cases_results_info.grabber_error_code
                error_messages = NOS_API.test_cases_results_info.grabber_error_message
                NOS_API.set_error_message("Inspection")
                System_Failure = 2
        
    ####################################################################################################################################################################################################################
                
    NOS_API.add_test_case_result_to_file_report(
                    test_result,
                    "- - " + str(Signal_Power) + " " + str(Signal_Qual) + " - - - " + str(signal_strength_hor) + " " + ber_hor + " " + str(signal_strength_ver) + " " + ber_ver + " " + str(logistic_serial_number) + " " + str(cas_id_number) + " " + str(firmware_version) + " " + str(nagra_guide_version) + " " + str(sc_number) + " - - - -",
                    "- - - - - - - >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " >" + str(SIGNAL_STRENGTH_THRESHOLD_LOW) + "<" + str(SIGNAL_STRENGTH_THRESHOLD_HIGH) + " " + str(BER_THRESHOLD) + " - - - - - - - - -",
                    error_codes,
                    error_messages)
    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    report_file = ""    
    
    report_file = NOS_API.create_test_case_log_file(
                    NOS_API.test_cases_results_info.s_n_using_barcode,
                    NOS_API.test_cases_results_info.nos_sap_number,
                    NOS_API.test_cases_results_info.cas_id_using_barcode,
                    "",
                    end_time)
    NOS_API.upload_file_report(report_file)
    NOS_API.test_cases_results_info.isTestOK = False
    
    NOS_API.send_report_over_mqtt_test_plan(
                test_result,
                end_time,
                error_codes,
                report_file)

    ## Update test result
    TEST_CREATION_API.update_test_result(test_result)

    ## Return DUT to initial state and de-initialize grabber device
    NOS_API.deinitialize()